(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    170465,       3774]
NotebookOptionsPosition[    164631,       3668]
NotebookOutlinePosition[    165419,       3694]
CellTagsIndexPosition[    165376,       3691]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["DiFfRG: Code Tools package", "Title",
 CellChangeTimes->{{3.919139788507444*^9, 
  3.919139800355089*^9}},ExpressionUUID->"255990ba-0600-4517-a841-\
3b30ef1076f1"],

Cell[CellGroupData[{

Cell["Package Setup", "Chapter",
 CellChangeTimes->{{3.919139903504201*^9, 
  3.919139906695078*^9}},ExpressionUUID->"2d5f9f27-5490-4bea-8ecf-\
1b321b723da0"],

Cell[CellGroupData[{

Cell["Setup and exports", "Section",
 CellChangeTimes->{{3.919928560443655*^9, 
  3.91992856291497*^9}},ExpressionUUID->"61eae6f8-8864-4150-9158-\
1ce7d9f393be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<DiFfRG`CodeTools`\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Unprotect", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<DiFfRG`CodeTools`Private`*\>\"", "]"}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.918571078410411*^9, 3.918571081926825*^9}, {
  3.932041360141122*^9, 3.932041375737691*^9}, {3.932041586550288*^9, 
  3.932041593365497*^9}},ExpressionUUID->"61eeed29-b199-412c-9a91-\
f659c54d031c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"UpdateFlows", "::", "usage"}], "=", "\"\<\>\""}], ";"}]], "Input",\

 CellChangeTimes->{{3.960527781393551*^9, 
  3.960527785977436*^9}},ExpressionUUID->"65d902ca-dcf6-4823-97a2-\
46319b05d715"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FlowKernel", "::", "usage"}], " ", "=", " ", 
    "\"\<FlowKernel[expr_,name_String,NT_String:\\\"auto\\\",addprefix_String:\
\\\"\\\"]\nMakes an equation into a lambda expression - of limited \
usefulness, but can be used together with LoopIntegrals::integrate and \
similar functions.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExportCode", "::", "usage"}], " ", "=", " ", 
    "\"\<ExportCode[fileName_String,expression_String]\nWrites the given \
expression to disk and runs clang-format on it.\n\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CodeForm", "::", "usage"}], " ", "=", " ", 
    "\"\<CodeForm[expr_]\nObtain properly formatted and processed C++ code \
from an expression.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetCppNames", "::", "usage"}], " ", "=", " ", 
    "\"\<SetCppNames[rules___]\nSet additional replacement rules used when \
invoking CodeForm[expr].\n\nExample Call: \
SetCppNames[\\\"k\\\"->\\\"k_bosonic\\\", \\\"Arccos(\\\"->\\\"std::arccos(\\\
\"]\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"JuliaForm", "::", "usage"}], " ", "=", " ", 
    "\"\<CodeForm[expr_]\nObtain properly formatted and processed Julia code \
from an expression.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"UnicodeClip", "::", "usage"}], " ", "=", " ", 
    "\"\<UnicodeClip[expr_String]\nCopy a string as unicode into the \
clipboard. Useful when exporting to Julia.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeCMakeFile", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeCMakeFile[kernels_List]\nCreates a CMakeLists.txt inside the \
'flowDir' which you can set using SetFlowDir[dir_String]. This CMake file \
contains references to all kernels specified in the List 'kernels'. Make sure \
you have created all kernels before compiling!\nIf so, simply add the flow \
directory in the parent directory of the flow directory: \\n \
add_subdirectory(flows) \\n Note that this CMakeLists.txt exports its source \
files into parent scope as $flow_sources\nThus, to compile the flows, simply \
add them as source files:\n    add_executable(QCD QCD.cc \
${flow_sources})\>\""}], ";"}], "\n", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetFlowDirectory", "::", "usage"}], "=", 
   "\"\<SetFlowDirectory[dir]\nSet the current flow directory, i.e. where all \
generated files are saved. Default is ./flows/\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowFlowDirectory", "::", "usage"}], "=", 
    "\"\<ShowFlowDirectory[]\nShow the current flow directory, i.e. where all \
generated files are saved. Default is ./flows/\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeFlowClass", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeFlowClass[name_String,kernels_List]\nThis creates a file \
flows.hh inside the flow directory, containing a class with the specified \
name, as well as several other files. All defined kernels have a \
corresponding integrator object in this class.\nAutomatically calls \
MakeCMakeFile with the passed list of kernels.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeFlowClassFiniteT", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeFlowClassFiniteT[name_String,kernels_List]\nThis creates a file \
flows.hh inside the flow directory, containing a class with the specified \
name, as well as several other files. All defined kernels have a \
corresponding integrator object in this class.\nAutomatically calls \
MakeCMakeFile wiht the passed list of kernels.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeKernel", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeKernel[kernel_Association, \
parameterList_List,integrandFlow_,constantFlow_:0., \
integrandDefinitions_String:\\\"\\\", constantDefinitions_String:\\\"\\\"]\n\
Make a kernel from a given flow equation, parmeter list and kernel. The \
kernel must be a valid specification of an integration kernel.\nThis Function \
creates an integrator that evaluates (constantFlow + \
\[Integral]integrandFlow). One can prepend additional c++ definitions to the \
flow equation by using the integrandDefinitions and constantDefinitions \
parameters. \nThese are prepended to the respective methods of the \
integration kernel, allowing one to e.g. define specific angles one needs for \
the flow code.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints4DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints4DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 4D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints4DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints4DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints4DP3[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 4D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints4DP3[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints3DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints3DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 3D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints3DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints3DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints3DP3[]\nObtain C++ code declaring angles for a \
three-point symmetric configuration in 3D.\nThe angles will have the names \
cosp1q, cosp2q and cosp3q.\nDeclareSymmetricPoints3DP3[computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints2DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints2DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 2D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints2DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints2DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints2DP3[]\nObtain C++ code declaring angles for a \
three-point symmetric configuration in 2D.\nThe angles will have the names \
cosp1q, cosp2q and cosp3q.\nDeclareSymmetricPoints2DP3[computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareAnglesP34Dpqr", "::", "usage"}], "=", 
    "\"\<DeclareAnglesP34Dpqr[q,p,r]\nObtain C++ code declaring angles for \
the angles in a full three-point function in 4D.\nThe angles will have the \
names cospq and cosqr, where q,p,r are replaced by the given Symbol names and \
ordered alphabetically.\nDeclareAnglesP34Dpqr[q,p,r,computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SafeFiniteTFunctions", "::", "usage"}], "=", "\"\<\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowTypes", "::", "usage"}], "=", 
    "\"\<ShowTypes[]\nShow a list of all types available for use in a \
parameter list to make a kernel.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<AddCodeOptimizeFunctions[func1[__], func2[__],...]\nAdd the \
functions func1, func2, ... to the functions to be optimized out, i.e. \
calculated only once in auto-generated kernel code.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<ShowCodeOptimizeFunctions[]\nShow a list of all functions which \
DiFfRG will try to optimize out when generating C++ code.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<ClearCodeOptimizeFunctions[]\nRemove all optimization functions from \
the internal list\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"UseKernelOptimizations", "::", "usage"}], "=", 
    "\"\<UseKernelOptimizations[True]\nTurn on code optimizations in \
auto-generation of C++ code.\nUseKernelOptimizations[False]\nTurn off code \
optimizations in auto-generation of C++ code.\n\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetKernelDefinitions", "::", "usage"}], "=", 
    "\"\<SetKernelDefinitions[definitionCode_String] sets the kernel \
definitions to definitionCode.\nSetKernelDefinitions[] resets the kernel \
definitions to the standard.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowKernelDefinitions", "::", "usage"}], "=", 
    "\"\<ShowKernelDefinitions[]\nShow the currently specified kernel \
definitions code.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddParameterType", "::", "usage"}], "=", 
    "\"\<AddParameterType[name,cppType,cppTypeAD,Reference,computeTypeName]\n\
Add a recognized parameter to the list of useable kernel parameter types.\n\>\
\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetCodeParser", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.916637829669835*^9, 3.91663783796828*^9}, {
   3.916638110622831*^9, 3.916638118237995*^9}, {3.9167289728094*^9, 
   3.916728976539971*^9}, {3.916730910644607*^9, 3.916730924497292*^9}, {
   3.916731291036565*^9, 3.91673129222556*^9}, {3.9171682862057667`*^9, 
   3.917168294847966*^9}, {3.917353885713208*^9, 3.917353929246798*^9}, {
   3.918322794894466*^9, 3.91832279815382*^9}, {3.919139915548635*^9, 
   3.919139937406918*^9}, {3.919146552140621*^9, 3.919146555840046*^9}, {
   3.919154246370263*^9, 3.91915425459028*^9}, {3.919748849849753*^9, 
   3.919748862913927*^9}, {3.919795028449435*^9, 3.91979503207915*^9}, {
   3.919795193645524*^9, 3.919795204759042*^9}, {3.925555868202629*^9, 
   3.925555871229744*^9}, {3.925707942850168*^9, 3.925707949827313*^9}, {
   3.925707986615032*^9, 3.9257079888416*^9}, {3.925712046247765*^9, 
   3.925712049987134*^9}, {3.925909287252735*^9, 3.925909290473834*^9}, {
   3.927424632287867*^9, 3.927424637058543*^9}, {3.927459040847021*^9, 
   3.927459051062059*^9}, {3.929457727924595*^9, 3.929457759546459*^9}, {
   3.930749285586865*^9, 3.930749327685223*^9}, {3.930749373015257*^9, 
   3.930749424738744*^9}, {3.930749467151816*^9, 3.930750066729059*^9}, {
   3.930750124915172*^9, 3.9307501908273897`*^9}, {3.930750362233918*^9, 
   3.930750400020275*^9}, {3.930750446223989*^9, 3.930750462754278*^9}, {
   3.930997106209995*^9, 3.93099752442664*^9}, {3.930997591222265*^9, 
   3.930997606363578*^9}, {3.930997721012038*^9, 3.9309977532068453`*^9}, {
   3.9309977877347*^9, 3.930997796070214*^9}, 3.930997872225588*^9, 
   3.932042180233707*^9, {3.936719354588052*^9, 3.9367193683757477`*^9}, {
   3.937024573361062*^9, 3.937024576076627*^9}, 3.9382459184510107`*^9, {
   3.938670466135729*^9, 3.9386704700980473`*^9}, {3.9433561222163143`*^9, 
   3.943356212474441*^9}, {3.943356244052917*^9, 3.943356507237863*^9}, {
   3.9434347923639927`*^9, 3.943434867234779*^9}, 3.943442716581128*^9, {
   3.943458754267728*^9, 3.943458757107253*^9}, {3.943470327366053*^9, 
   3.943470334723653*^9}, {3.943470521450267*^9, 3.943470522810153*^9}, {
   3.943509738500535*^9, 3.943509984765916*^9}, {3.9435101021*^9, 
   3.943510236545765*^9}, {3.943510416455825*^9, 3.943510416620726*^9}, {
   3.943510457023076*^9, 3.943510479203768*^9}, {3.943510561164653*^9, 
   3.943510705178961*^9}, {3.943510908959456*^9, 3.943510950004882*^9}, {
   3.9461104880632677`*^9, 3.9461105424234533`*^9}, {3.953382707779393*^9, 
   3.95338272226712*^9}, 
   3.953382792646838*^9},ExpressionUUID->"e967b969-bd44-41d7-8598-\
8812e1394d8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}]], "Code",
 CellChangeTimes->{
  3.941639860281678*^9, {3.9435101542129297`*^9, 
   3.943510158290436*^9}},ExpressionUUID->"334e210a-0008-4f8a-aa82-\
905e18a840c0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Safe replacements for finite T", "Chapter",
 CellChangeTimes->{{3.916731510678001*^9, 3.916731522402523*^9}, {
  3.918570212039898*^9, 3.918570215507206*^9}, {3.918570373553621*^9, 
  3.918570375493225*^9}, {3.957455289520598*^9, 
  3.9574552971124573`*^9}},ExpressionUUID->"337028bb-22a5-4c7a-abf1-\
dfc7beb47d0a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SafeFiniteTFunctions", "[", 
    RowBox[{"expr_", ",", "T_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"expr", "//.", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Tanh", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Tanh", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Tanh", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Tanh", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", 
        RowBox[{
         RowBox[{"Coth", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Coth", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Coth", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Coth", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", 
        RowBox[{
         RowBox[{"Csch", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Csch", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Csch", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Csch", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", 
        RowBox[{
         RowBox[{"Sech", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Sech", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sech", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sech", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}]}], "\[IndentingNewLine]", 
       "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9183227374649057`*^9, 3.9183227894076014`*^9}, {
   3.918322863153208*^9, 3.918322878900425*^9}, {3.918384755143515*^9, 
   3.91838477018717*^9}, {3.918384814882266*^9, 3.918384818322689*^9}, {
   3.918570593189097*^9, 3.918570594333875*^9}, {3.91871998848396*^9, 
   3.918719995851115*^9}, {3.918720708340906*^9, 3.918720716415075*^9}, {
   3.919152458929375*^9, 3.919152461909113*^9}, {3.919161604045773*^9, 
   3.919161623923659*^9}, {3.919927319206914*^9, 3.919927346261128*^9}, {
   3.9252829129765244`*^9, 3.92528292380034*^9}, {3.925283050748022*^9, 
   3.925283060616178*^9}, 3.925560389445086*^9, {3.92570772396732*^9, 
   3.925707746181615*^9}, {3.927259728801195*^9, 3.927259782778897*^9}, {
   3.92726005295629*^9, 3.927260229903634*^9}, {3.9272603747037973`*^9, 
   3.9272603782268*^9}, {3.927260660135363*^9, 3.927260706646351*^9}, {
   3.927260743082341*^9, 3.927260803315909*^9}, {3.9272608739437733`*^9, 
   3.9272609336344757`*^9}, {3.927260980147702*^9, 3.9272609803307877`*^9}, {
   3.927261206282289*^9, 3.927261336658729*^9}, {3.9272614541958857`*^9, 
   3.927261476324284*^9}, {3.927261506641202*^9, 3.927261511145152*^9}, {
   3.927261548537051*^9, 3.9272615539441*^9}, {3.927612046913769*^9, 
   3.927612110210719*^9}, {3.927612194254174*^9, 3.92761219481698*^9}, {
   3.927703447146445*^9, 3.927703453657585*^9}, {3.929586324894317*^9, 
   3.929586340488901*^9}, {3.929762972024137*^9, 3.929762982969396*^9}, {
   3.931401932269908*^9, 3.931401938884918*^9}, {3.9333010557893*^9, 
   3.933301101917397*^9}, {3.933301133804902*^9, 3.933301395756246*^9}, {
   3.9333015142686033`*^9, 3.933301546995504*^9}, {3.9333056467652493`*^9, 
   3.933305654509104*^9}, {3.9359274932754583`*^9, 3.935927495997527*^9}, {
   3.935927527104536*^9, 3.935927553941113*^9}, {3.9359284959172792`*^9, 
   3.935928497175605*^9}, {3.937409070107874*^9, 3.937409070347679*^9}, {
   3.938241390414969*^9, 3.9382414096543713`*^9}, {3.938785626218605*^9, 
   3.938785692516264*^9}, {3.941637908672159*^9, 3.9416379090805197`*^9}, {
   3.941638223745199*^9, 3.9416383100088863`*^9}, {3.941638417493546*^9, 
   3.941638417649281*^9}, {3.941639593732829*^9, 3.941639602405526*^9}, 
   3.9416399657717133`*^9, {3.94648489702761*^9, 3.946484968139174*^9}, {
   3.9464852094918013`*^9, 3.946485312659563*^9}, 3.946485394744317*^9, {
   3.9488261934912663`*^9, 3.948826202298699*^9}, {3.9574552277745037`*^9, 
   3.957455270001824*^9}},ExpressionUUID->"f7ee6a73-23f9-402d-9c49-\
abbbd26f22a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["General Definitions and structural methods", "Chapter",
 CellChangeTimes->{{3.918570412954754*^9, 
  3.918570433695428*^9}},ExpressionUUID->"e84729ed-8582-435d-b0b5-\
b57d953a283a"],

Cell[CellGroupData[{

Cell["Folder setup", "Section",
 CellChangeTimes->{{3.919748795301685*^9, 
  3.919748796510569*^9}},ExpressionUUID->"e3370f84-23df-49af-8ad2-\
b13a8cd01695"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"flowName", "=", "\"\<flows\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"flowDir", ":=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"$Notebooks", ",", 
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      RowBox[{"Directory", "[", "]"}]}], "]"}], "<>", "flowName", "<>", 
    "\"\</\>\""}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetFlowName", "[", "name_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"flowName", "=", "name"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowFlowDirectory", "[", "]"}], ":=", 
   RowBox[{"Print", "[", 
    RowBox[{
    "\"\<\!\(\*StyleBox[\"DiFfRG\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\" \
\",FontWeight->\"Bold\"]\)\!\(\*StyleBox[\"CodeTools\",FontWeight->\"Bold\"]\)\
\!\(\*StyleBox[\":\",FontWeight->\"Bold\"]\) Flow output directory is set to \
\\n        \>\"", "<>", "flowDir", "<>", 
     "\"\<\\nThis can be modified by using \
\!\(\*StyleBox[\"SetFlowName\",FontColor->RGBColor[1, 0.5, \
0]]\)[\\\"YourNewName\\\"]\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ShowFlowDirectory", "[", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.919748800954547*^9, 3.919748841014795*^9}, {
   3.919748963867602*^9, 3.919748982212854*^9}, {3.919795242470355*^9, 
   3.919795249427845*^9}, {3.921273776564588*^9, 3.921273776822373*^9}, 
   3.921273910863167*^9, {3.921273974096614*^9, 3.921273984273489*^9}, {
   3.930997243068274*^9, 3.930997249479556*^9}, 3.9358436315858*^9, {
   3.958662376233975*^9, 3.958662439017469*^9}, {3.9605223217731953`*^9, 
   3.9605224163055162`*^9}, {3.960522470085608*^9, 3.9605224756409807`*^9}, {
   3.9605278196674137`*^9, 
   3.96052781985131*^9}},ExpressionUUID->"8c3ad375-b15e-4205-b5d3-\
d9996ccd7abf"],

Cell[BoxData["\<\"\\!\\(\\*StyleBox[\\\"DiFfRG\\\",FontWeight->\\\"Bold\\\"]\\\
)\\!\\(\\*StyleBox[\\\" \\\",FontWeight->\\\"Bold\\\"]\\)\\!\\(\\*StyleBox[\\\
\"CodeTools\\\",FontWeight->\\\"Bold\\\"]\\)\\!\\(\\*StyleBox[\\\":\\\",\
FontWeight->\\\"Bold\\\"]\\) Flow output directory is set to \\n        \
/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/DiFfRG/Flows/\\nThis \
can be modified by using \
\\!\\(\\*StyleBox[\\\"SetFlowName\\\",FontColor->RGBColor[1, 0.5, \
0]]\\)[\\\"YourNewName\\\"]\"\>"], "Print",
 CellChangeTimes->{
  3.9248497606542063`*^9, 3.957866780730567*^9, 3.9578871102655087`*^9, 
   3.958233549360098*^9, 3.958656556609717*^9, 3.9586624399594088`*^9, 
   3.9605208891946*^9, {3.960522403349099*^9, 3.960522476293461*^9}},
 CellLabel->
  "During evaluation of \
In[237]:=",ExpressionUUID->"513a5fde-57bd-4577-aefc-468c243da577"]
}, Open  ]]
}, Open  ]],

Cell["Safety Checks", "Section",
 CellChangeTimes->{{3.91857024358221*^9, 
  3.9185702462863216`*^9}},ExpressionUUID->"a0be1f2b-f273-4a1e-8a34-\
31c5569270ec"],

Cell[CellGroupData[{

Cell["Momentum Configurations", "Section",
 CellChangeTimes->{{3.916731294881199*^9, 3.916731307861263*^9}, 
   3.9185704484974*^9, {3.9367194473549433`*^9, 
   3.936719448575034*^9}},ExpressionUUID->"c33c8252-d769-4f2c-a755-\
55e259430a36"],

Cell[CellGroupData[{

Cell["4D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
  3.936719439894985*^9, 3.9367194419091873`*^9}, {3.938670450910139*^9, 
  3.938670451044594*^9}},ExpressionUUID->"3055f86e-1202-4f7c-82d7-\
f4a1322b935a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareAnglesP34Dpqr", "[", 
    RowBox[{"q_", ",", "p_", ",", "r_", ",", 
     RowBox[{"computeType_String", ":", "\"\<double\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "Vectorp", ",", "Vectorr", ",", "Vectorq", ",", "cos", ",",
        "\[IndentingNewLine]", "Resultcospq", ",", "Resultcosqr", ",", 
       "namecospq", ",", "namecosqr", ",", "\[IndentingNewLine]", "code", ",",
        "file"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SetAttributes", "[", 
       RowBox[{"cos", ",", "Orderless"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Vectorp", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Vectorr", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"cos", "[", 
           RowBox[{"p", ",", "r"}], "]"}], "]"}], ",", "0", ",", "0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vectorq", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
         RowBox[{"ArcCos", "[", 
          RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
         RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Resultcospq", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Vectorq", ".", "Vectorp"}], "//.", 
         RowBox[{
          RowBox[{"cos", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
          RowBox[{"Symbol", "[", 
           RowBox[{"\"\<cos\>\"", "<>", 
            RowBox[{"ToString", "[", "a", "]"}], "<>", 
            RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}], "//", 
        "FullSimplify"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Resultcosqr", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Vectorq", ".", "Vectorr"}], "//.", 
         RowBox[{
          RowBox[{"cos", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
          RowBox[{"Symbol", "[", 
           RowBox[{"\"\<cos\>\"", "<>", 
            RowBox[{"ToString", "[", "a", "]"}], "<>", 
            RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}], "//", 
        "FullSimplify"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"namecospq", "=", 
       RowBox[{
        RowBox[{"cos", "[", 
         RowBox[{"p", ",", "q"}], "]"}], "//.", 
        RowBox[{
         RowBox[{"cos", "[", 
          RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
         RowBox[{"Symbol", "[", 
          RowBox[{"\"\<cos\>\"", "<>", 
           RowBox[{"ToString", "[", "a", "]"}], "<>", 
           RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"namecosqr", "=", 
       RowBox[{
        RowBox[{"cos", "[", 
         RowBox[{"q", ",", "r"}], "]"}], "//.", 
        RowBox[{
         RowBox[{"cos", "[", 
          RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
         RowBox[{"Symbol", "[", 
          RowBox[{"\"\<cos\>\"", "<>", 
           RowBox[{"ToString", "[", "a", "]"}], "<>", 
           RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"code", "=", 
       RowBox[{"\"\<const \>\"", "<>", "computeType", "<>", "\"\< \>\"", "<>", 
        RowBox[{"ToString", "[", "namecospq", "]"}], "<>", "\"\< = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"Resultcospq", ",", "computeType"}], "]"}], "<>", 
        "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>", 
        "computeType", "<>", "\"\< \>\"", "<>", 
        RowBox[{"ToString", "[", "namecosqr", "]"}], "<>", "\"\< = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"Resultcosqr", ",", "computeType"}], "]"}], "<>", 
        "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "code", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9274241274268436`*^9, 3.927424154027457*^9}, {
  3.927424193895813*^9, 3.927424305642883*^9}, {3.927424339889554*^9, 
  3.927424373500461*^9}, {3.927424431077732*^9, 3.927424816003658*^9}, {
  3.927424856859298*^9, 3.927424866497765*^9}, {3.92742504252745*^9, 
  3.927425045454752*^9}, {3.927425102948888*^9, 3.927425110023596*^9}, {
  3.927425158973563*^9, 3.927425176948194*^9}, {3.927425242278559*^9, 
  3.927425267179769*^9}, {3.92742535040135*^9, 3.927425351968753*^9}, {
  3.927438482196419*^9, 3.927438486226136*^9}, {3.927459225968075*^9, 
  3.927459227046921*^9}, {3.936719463008197*^9, 3.9367194672279463`*^9}, {
  3.936719539124484*^9, 3.936719540871916*^9}, {3.937024615309021*^9, 
  3.9370246184009542`*^9}, {3.938785208132944*^9, 3.938785229773325*^9}, {
  3.9387857671889677`*^9, 
  3.9387857677682962`*^9}},ExpressionUUID->"c4e780f8-15b6-40cb-8a1d-\
2bd5bf49ac16"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints4DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "sanity", ",", "Vectors4DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint4DP4cosp1", ",", "SymmetricPoint4DP4cosp2", ",", 
       "SymmetricPoint4DP4cosp3", ",", "SymmetricPoint4DP4cosp4", ",", 
       "SymmetricPoint4DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors4DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors4DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors4DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "3"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint4DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916731319392432*^9, 3.916731350930162*^9}, {
   3.916731383501957*^9, 3.9167314791763988`*^9}, {3.916731617846411*^9, 
   3.916731624081429*^9}, {3.916733406703175*^9, 3.916733416060416*^9}, {
   3.917354273417809*^9, 3.917354278969678*^9}, {3.919162463668729*^9, 
   3.919162467330896*^9}, {3.919162556125326*^9, 3.9191626087518578`*^9}, {
   3.919748944609479*^9, 3.919748945398053*^9}, {3.9272610437511*^9, 
   3.927261051512759*^9}, {3.927459182030244*^9, 3.9274591940079937`*^9}, {
   3.936718903810402*^9, 3.936718976150216*^9}, 3.9367190084943666`*^9, {
   3.936719130671103*^9, 3.9367191326145782`*^9}, {3.9374762033025723`*^9, 
   3.937476205734511*^9}, {3.9387852352169*^9, 3.9387852429193277`*^9}, {
   3.938785756048355*^9, 
   3.938785761548143*^9}},ExpressionUUID->"a0d59af2-759a-487a-b63e-\
d2d14b73cd1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints4DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "Vectors4DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint4DP3cosp1", ",", "SymmetricPoint4DP3cosp2", ",", 
       "SymmetricPoint4DP3cosp3", ",", "SymmetricPoint4DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors4DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"], ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"], ",", "\[Pi]", ",", "0"}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors4DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors4DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint4DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9367189819790773`*^9, 3.936719031418726*^9}, {
  3.936719264244136*^9, 3.936719270707841*^9}, {3.9367928012607718`*^9, 
  3.936792819897534*^9}, {3.937476212938995*^9, 3.9374762145334806`*^9}, {
  3.938785249337809*^9, 3.938785266783763*^9}, {3.938785774004787*^9, 
  3.938785776681572*^9}},ExpressionUUID->"7f2c99fd-a79f-46c2-854f-\
98e61ebec777"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
  3.9367194280657387`*^9, 3.936719445083376*^9}, {3.9386704515981083`*^9, 
  3.938670451773917*^9}},ExpressionUUID->"b9fc50c2-dc66-4696-839b-\
23e9ccbcf6cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints3DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec3", ",", "Vectors3DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP3cosp1", ",", "SymmetricPoint3DP3cosp2", ",", 
       "SymmetricPoint3DP3cosp3", ",", "SymmetricPoint3DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec3", "[", 
        RowBox[{"\[CapitalTheta]_", ",", "\[Phi]_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916730946751062*^9, 3.916731056284199*^9}, {
   3.916731152203944*^9, 3.916731267405823*^9}, 3.9167313147142973`*^9, {
   3.916731419037212*^9, 3.916731442224831*^9}, {3.916731486627988*^9, 
   3.916731486937495*^9}, {3.916731626511187*^9, 3.916731628462594*^9}, {
   3.916733376150385*^9, 3.916733391701214*^9}, {3.917353970939571*^9, 
   3.917354006635349*^9}, {3.917354049536149*^9, 3.917354182251548*^9}, {
   3.917354222497705*^9, 3.917354232869914*^9}, {3.917354263689829*^9, 
   3.917354270411576*^9}, {3.917354315047325*^9, 3.91735431640311*^9}, {
   3.918320167112224*^9, 3.918320168185388*^9}, {3.91916183911097*^9, 
   3.919161853505862*^9}, {3.919162623542838*^9, 3.919162665338984*^9}, {
   3.91974894663587*^9, 3.919748947208737*^9}, {3.919928518449347*^9, 
   3.919928522987043*^9}, {3.92726105413786*^9, 3.927261060554873*^9}, {
   3.927459197594975*^9, 3.927459208320344*^9}, {3.936719126735134*^9, 
   3.936719140366767*^9}, {3.936719188207531*^9, 3.936719189267597*^9}, {
   3.9367192257874928`*^9, 3.936719253023929*^9}, {3.936719292755637*^9, 
   3.936719306771409*^9}, {3.93747621842809*^9, 3.937476219694083*^9}, {
   3.938670004542005*^9, 3.9386701548023567`*^9}, {3.938670353563264*^9, 
   3.938670368151267*^9}, {3.938785254158613*^9, 3.938785269501292*^9}, {
   3.938785779812705*^9, 
   3.938785781347447*^9}},ExpressionUUID->"02076b1d-a114-4058-b10c-\
0074b1c0bf44"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints3DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec3", ",", "sanity", ",", "Vectors3DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP4cosp1", ",", "SymmetricPoint3DP4cosp2", ",", 
       "SymmetricPoint3DP4cosp3", ",", "SymmetricPoint3DP4cosp4", ",", 
       "SymmetricPoint3DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec3", "[", 
        RowBox[{"\[CapitalTheta]_", ",", "\[Phi]_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{"0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "3"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.936719237883638*^9, {3.9367193131782303`*^9, 3.936719345463015*^9}, {
   3.937476223976891*^9, 3.937476225953047*^9}, {3.938670238915703*^9, 
   3.938670242342607*^9}, {3.938670314164032*^9, 3.9386703442389927`*^9}, {
   3.938670394360215*^9, 3.938670395919155*^9}, {3.938785254649372*^9, 
   3.938785272064581*^9}, {3.9387857845047293`*^9, 
   3.938785786556594*^9}},ExpressionUUID->"3f57e62b-c21b-46a5-aac5-\
5e869eaa87ee"]
}, Closed]],

Cell[CellGroupData[{

Cell["2D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
   3.9367194280657387`*^9, 3.936719445083376*^9}, 3.938670269858596*^9, {
   3.938670452298119*^9, 
   3.938670452446117*^9}},ExpressionUUID->"81cfd11a-63a8-4205-8e64-\
8f4881ece817"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints2DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec2", ",", "Vectors3DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP3cosp1", ",", "SymmetricPoint3DP3cosp2", ",", 
       "SymmetricPoint3DP3cosp3", ",", "SymmetricPoint3DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec2", "[", "\[CapitalTheta]_", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec2", "[", "0", "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"1", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"2", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916730946751062*^9, 3.916731056284199*^9}, {
   3.916731152203944*^9, 3.916731267405823*^9}, 3.9167313147142973`*^9, {
   3.916731419037212*^9, 3.916731442224831*^9}, {3.916731486627988*^9, 
   3.916731486937495*^9}, {3.916731626511187*^9, 3.916731628462594*^9}, {
   3.916733376150385*^9, 3.916733391701214*^9}, {3.917353970939571*^9, 
   3.917354006635349*^9}, {3.917354049536149*^9, 3.917354182251548*^9}, {
   3.917354222497705*^9, 3.917354232869914*^9}, {3.917354263689829*^9, 
   3.917354270411576*^9}, {3.917354315047325*^9, 3.91735431640311*^9}, {
   3.918320167112224*^9, 3.918320168185388*^9}, {3.91916183911097*^9, 
   3.919161853505862*^9}, {3.919162623542838*^9, 3.919162665338984*^9}, {
   3.91974894663587*^9, 3.919748947208737*^9}, {3.919928518449347*^9, 
   3.919928522987043*^9}, {3.92726105413786*^9, 3.927261060554873*^9}, {
   3.927459197594975*^9, 3.927459208320344*^9}, {3.936719126735134*^9, 
   3.936719140366767*^9}, {3.936719188207531*^9, 3.936719189267597*^9}, {
   3.9367192257874928`*^9, 3.936719253023929*^9}, {3.936719292755637*^9, 
   3.936719306771409*^9}, {3.93747621842809*^9, 3.937476219694083*^9}, 
   3.93867027306639*^9, {3.938785256306374*^9, 3.938785273985268*^9}, {
   3.9387857895164957`*^9, 
   3.938785791044825*^9}},ExpressionUUID->"a7b5ee41-8585-4441-b62c-\
89d022f47a1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints2DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec2", ",", "sanity", ",", "Vectors3DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP4cosp1", ",", "SymmetricPoint3DP4cosp2", ",", 
       "SymmetricPoint3DP4cosp3", ",", "SymmetricPoint3DP4cosp4", ",", 
       "SymmetricPoint3DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec2", "[", "\[CapitalTheta]_", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec2", "[", "0", "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"1", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"2", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"3", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.936719237883638*^9, {3.9367193131782303`*^9, 3.936719345463015*^9}, {
   3.937476223976891*^9, 3.937476225953047*^9}, 3.9386702752706127`*^9, {
   3.938670493611395*^9, 3.938670518551881*^9}, {3.938785257240024*^9, 
   3.938785276217057*^9}, {3.938785794020824*^9, 
   3.938785795816415*^9}},ExpressionUUID->"3329a8ad-9322-4b94-9584-\
392b163bb430"]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Flow code generation", "Chapter",
 CellChangeTimes->{{3.9185704568927*^9, 
  3.918570460923884*^9}},ExpressionUUID->"b45359a4-435a-48f5-938f-\
6624251f7dc8"],

Cell[CellGroupData[{

Cell["Kernel methods and classes for T = 0", "Section",
 CellChangeTimes->{{3.9165599443625517`*^9, 3.916559949616405*^9}, {
  3.917169847014802*^9, 
  3.917169848729768*^9}},ExpressionUUID->"e1a8482c-beb3-4c41-b9f2-\
3acff2f366ec"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "Print", "}"}], ",", 
    RowBox[{"Get", "[", "\"\<FunKit`\>\"", "]"}]}], "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.9575171854254913`*^9, 3.957517196199812*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"c34c2e5d-fc0f-418f-b9c3-1a00606907ef"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$PredefRegFunc", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<RB\>\"", ",", "\"\<RF\>\"", ",", "\"\<RBdot\>\"", ",", 
     "\"\<RFdot\>\"", ",", "\"\<dq2RB\>\"", ",", "\"\<dq2RF\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$StandardKernelDefinitions", "=", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"FunKit`MakeCppFunction", "[", 
       RowBox[{
        RowBox[{"\"\<Name\>\"", "->", "#"}], ",", 
        RowBox[{"\"\<Body\>\"", "->", 
         RowBox[{
         "\"\<return Regulator::\>\"", "<>", "#", "<>", 
          "\"\<(k2, p2);\>\""}]}], ",", 
        RowBox[{
        "\"\<Prefix\>\"", "->", 
         "\"\<static KOKKOS_FORCEINLINE_FUNCTION\>\""}], ",", 
        RowBox[{"\"\<Suffix\>\"", "->", "\"\<\>\""}], ",", 
        RowBox[{"\"\<Parameters\>\"", "->", 
         RowBox[{"{", 
          RowBox[{"\"\<k2\>\"", ",", "\"\<p2\>\""}], "}"}]}]}], "]"}], "&"}], 
     ",", "\[IndentingNewLine]", "$PredefRegFunc"}], "]"}]}], ";"}]}], "Input",\

 CellChangeTimes->{{3.957507810567843*^9, 3.957507979160213*^9}, {
   3.957887082864911*^9, 3.957887096344493*^9}, 3.960522293357527*^9, 
   3.960528043816486*^9},ExpressionUUID->"98e4158d-9c35-4453-b846-\
9266ccd560a6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DiFfRG", "::", "MissingKey"}], "=", 
    "\"\<The key \\\"`1`\\\" is missing.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CheckKey", "[", 
     RowBox[{"kernel_Association", ",", "name_String", ",", "test_"}], "]"}], 
    ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "valid", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Not", "@", 
          RowBox[{"KeyExistsQ", "[", 
           RowBox[{"kernel", ",", "name"}], "]"}]}], ",", 
         RowBox[{
          RowBox[{"Message", "[", 
           RowBox[{
            RowBox[{"DiFfRG", "::", "MissingKey"}], ",", "name"}], "]"}], ";", 
          RowBox[{"Return", "[", "False", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"Not", "@", 
          RowBox[{"test", "[", 
           RowBox[{"kernel", "[", "name", "]"}], "]"}]}], ",", 
         RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"KernelSpecQ", "[", "spec_Association", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"validKeys", ",", "validKeyTypes"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"validKeys", "=", 
       RowBox[{
        RowBox[{"CheckKey", "[", 
         RowBox[{"spec", ",", "\"\<Name\>\"", ",", "StringQ"}], "]"}], "&&", 
        "\[IndentingNewLine]", 
        RowBox[{"CheckKey", "[", 
         RowBox[{"spec", ",", "\"\<Integrator\>\"", ",", "StringQ"}], "]"}], "&&",
         "\[IndentingNewLine]", 
        RowBox[{"CheckKey", "[", 
         RowBox[{"spec", ",", "\"\<d\>\"", ",", "IntegerQ"}], "]"}], "&&", 
        "\[IndentingNewLine]", 
        RowBox[{"CheckKey", "[", 
         RowBox[{"spec", ",", "\"\<AD\>\"", ",", "BooleanQ"}], "]"}], "&&", 
        "\[IndentingNewLine]", 
        RowBox[{"CheckKey", "[", 
         RowBox[{"spec", ",", "\"\<Device\>\"", ",", "StringQ"}], "]"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "validKeys", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.957516092356193*^9, 3.957516161457782*^9}, {
   3.9575161925719547`*^9, 3.957516257403943*^9}, 3.957516330809062*^9, {
   3.957516411705031*^9, 3.957516413768114*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"9c70148c-55a4-4f21-a7c7-4a6c939615b7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"getRegulator", "[", 
    RowBox[{"name_", ",", 
     RowBox[{"{", 
      RowBox[{"optName_", ",", "optDef_"}], "}"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "ret", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ret", "=", "\"\<\>\""}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"optName", "=!=", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ret", "=", 
          RowBox[{"ret", "<>", "optDef", "<>", "\"\<\\n\>\""}]}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ret", "=", 
       RowBox[{
       "ret", "<>", "\"\<using Regulator = \>\"", "<>", "name", "<>", 
        "\"\<<\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"optName", "=!=", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ret", "=", 
          RowBox[{"ret", "<>", "optName"}]}], ";"}]}], "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ret", "=", 
       RowBox[{"ret", "<>", "\"\<>;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"FunKit`FormatCode", "[", "ret", "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9578694846723213`*^9, 3.9578695114066553`*^9}, {
  3.9578695414466267`*^9, 3.957869639958681*^9}, {3.9578697123790293`*^9, 
  3.957869806827475*^9}, {3.957872705124116*^9, 3.957872707687682*^9}, {
  3.9605280978026733`*^9, 
  3.9605280993578787`*^9}},ExpressionUUID->"0055a277-a39a-4b5c-9683-\
a43ce79e216b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExportCode", "::", "WrongSyntax"}], "=", 
    "\"\<Incorrect arguments for ExportCode: `1`\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ExportCode", "[", "b___", "]"}], ":=", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Message", "[", 
     RowBox[{
      RowBox[{"ExportCode", "::", "WrongSyntax"}], ",", 
      RowBox[{"{", "b", "}"}]}], "]"}], ";", 
    RowBox[{"Abort", "[", "]"}]}], ")"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ExportCode", "[", 
    RowBox[{"fileName_", ",", "content_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FileExistsQ", "[", "fileName", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"fileName", ",", "\"\<Text\>\""}], "]"}], "===", 
            "content"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"fileName", "<>", "\"\< unchanged\>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"fileName", ",", "content", ",", "\"\<Text\>\""}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Exported to \\\"\>\"", "<>", "fileName", "<>", "\"\<\\\"\>\""}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.960521201849889*^9, 3.960521245020825*^9}, {
  3.960522016117321*^9, 3.960522140177272*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"b90739d0-bd4c-4baa-bbdf-b9da1653e5fc"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"updateCMake", "[", 
     RowBox[{"varName_", ":", "\"\<Flows\>\""}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"folders", ",", "sources", ",", "cmake", ",", 
        RowBox[{"fileName", "=", 
         RowBox[{"flowDir", "<>", "\"\<CMakeLists.txt\>\""}]}], ",", 
        "flowFolderName"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"flowFolderName", "=", 
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{"flowDir", ",", "\"\</\>\""}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"folders", "=", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", "flowDir", ",", "1"}], "]"}], ",", 
          "DirectoryQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"sources", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"Join", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Get", "[", 
              RowBox[{"#", "<>", "\"\</sources.m\>\""}], "]"}], "&"}], ",", 
            "folders"}], "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"sources", "=", 
        RowBox[{"\"\<    \>\"", "<>", 
         RowBox[{"StringRiffle", "[", 
          RowBox[{"sources", ",", "\"\<\\n    \>\""}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"cmake", "=", 
        RowBox[{
        "\"\<set(\>\"", "<>", "varName", "<>", "\"\<_SOURCES \n\>\"", "<>", 
         "sources", "<>", 
         "\"\<\n    ${CMAKE_CURRENT_SOURCE_DIR}/flows.cc)\n\n\
add_library(\>\"", "<>", "varName", "<>", "\"\< STATIC ${\>\"", "<>", 
         "varName", "<>", "\"\<_SOURCES})\ntarget_link_libraries(\>\"", "<>", 
         "varName", "<>", 
         "\"\< DiFfRG::DiFfRG)\ntarget_compile_options(\n  \>\"", "<>", 
         "varName", "<>", 
         "\"\< PRIVATE $<$<COMPILE_LANGUAGE:CXX>: -Wno-unused-parameter\n     \
                    -Wno-unused-variable >)\n\>\""}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ExportCode", "[", 
        RowBox[{"fileName", ",", "cmake"}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"updateFlowClass", "[", 
     RowBox[{"varName_", ":", "\"\<Flows\>\""}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "folders", ",", "flowFolderName", ",", "integrators", ",", 
        "\[IndentingNewLine]", "flowHeader", ",", "flowCpp", ",", 
        "integratorInitializations"}], "}"}], ",", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"flowFolderName", "=", 
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{"flowDir", ",", "\"\</\>\""}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"folders", "=", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"FileNames", "[", 
           RowBox[{"\"\<*\>\"", ",", "flowDir", ",", "1"}], "]"}], ",", 
          "DirectoryQ"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"integrators", "=", 
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"StringSplit", "[", 
               RowBox[{"#", ",", "\"\</\>\""}], "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"-", "1"}], "]"}], "]"}], ",", 
             RowBox[{
              RowBox[{
               RowBox[{"StringSplit", "[", 
                RowBox[{"#", ",", "\"\</\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], "<>", 
              "\"\<_integrator\>\""}], ",", 
             RowBox[{"\"\<./\>\"", "<>", 
              RowBox[{
               RowBox[{"StringSplit", "[", 
                RowBox[{"#", ",", "\"\</\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], "<>", "\"\</\>\"", "<>", 
              RowBox[{
               RowBox[{"StringSplit", "[", 
                RowBox[{"#", ",", "\"\</\>\""}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], "<>", "\"\<.hh\>\""}]}], 
            "}"}], "&"}], "\[IndentingNewLine]", ",", "folders"}], "]"}]}], 
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"flowHeader", "=", 
        RowBox[{"FunKit`MakeCppHeader", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Includes\>\"", "->", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<DiFfRG/common/utils.hh\>\"", ",", 
               "\"\<DiFfRG/physics/integration.hh\>\""}], "}"}], ",", 
             RowBox[{"integrators", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "3"}], "]"}], "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Body\>\"", "->", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{"FunKit`MakeCppClass", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<Name\>\"", "->", "varName"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<MembersPublic\>\"", "->", 
               RowBox[{"Join", "[", 
                RowBox[{
                 RowBox[{"{", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                   "FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "varName"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{
                    "\"\<Type\>\"", "->", "\"\<DiFfRG::JSONValue\>\""}], ",", 
                    
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Name\>\"", "->", "\"\<json\>\""}]}], "|>"}], 
                    "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<\>\""}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                   
                   RowBox[{
                   "FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<set_k\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Name\>\"", "->", "\"\<k\>\""}], ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "False"}]}], "|>"}], 
                    "}"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                   "\"\<DiFfRG::QuadratureProvider \
quadrature_provider;\>\""}], "\[IndentingNewLine]", "}"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Map", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "<>", "\"\< \>\"", "<>", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<;\>\""}], 
                    "&"}], ",", "integrators"}], "]"}]}], 
                "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
             "]"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"integratorInitializations", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "integrators", "]"}], ">", "0"}], ",", 
          RowBox[{"\"\<: \>\"", "<>", 
           RowBox[{"StringRiffle", "[", 
            RowBox[{
             RowBox[{"integrators", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "1"}], "]"}], "]"}], ",", 
             "\"\<(quadrature_provider, json), \>\""}], "]"}], "<>", 
           "\"\<(quadrature_provider, json)\>\""}], ",", "\"\<\>\""}], 
         "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"flowCpp", "=", 
        RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"\"\<Includes\>\"", "->", 
           RowBox[{"{", "\"\<./flows.hh\>\"", "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"\"\<Body\>\"", "->", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\"\<Name\>\"", "->", "varName"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\<Class\>\"", "->", "varName"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\<Suffix\>\"", "->", "integratorInitializations"}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<Body\>\"", "->", "\"\<\>\""}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\<Parameters\>\"", "->", 
                RowBox[{"{", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{
                   "\"\<Type\>\"", "->", "\"\<DiFfRG::JSONValue\>\""}], ",", 
                   RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Name\>\"", "->", "\"\<json\>\""}]}], "|>"}], 
                 "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<Return\>\"", "->", "\"\<\>\""}]}], 
              "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
             RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"\"\<Name\>\"", "->", "\"\<set_k\>\""}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\<Class\>\"", "->", "varName"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"\"\<Parameters\>\"", "->", 
                RowBox[{"{", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], ",", 
                   RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Name\>\"", "->", "\"\<k\>\""}], ",", 
                   RowBox[{"\"\<Reference\>\"", "->", "False"}]}], "|>"}], 
                 "}"}]}], ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<Body\>\"", "->", 
                RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
                 RowBox[{"Map", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{
                    "\"\<if constexpr(DiFfRG::has_set_k<decltype(\>\"", "<>", 
                    
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", 
                    "\"\<.integrator)>) \>\"", "<>", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", 
                    "\"\<.integrator.set_k(k);\nif \
constexpr(DiFfRG::has_integrator_AD<decltype(\>\"", "<>", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", 
                    "\"\<)>)\nif constexpr(DiFfRG::has_set_k<decltype(\>\"", "<>", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", 
                    "\"\<.integrator_AD)>)\>\"", "<>", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "<>", 
                    "\"\<.integrator_AD.set_k(k);\>\""}], 
                    "\[IndentingNewLine]", "&"}], ",", "\[IndentingNewLine]", 
                   "integrators"}], "]"}], "\[IndentingNewLine]", "]"}]}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
            "}"}]}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"ExportCode", "[", 
        RowBox[{
         RowBox[{"flowDir", "<>", "\"\<flows.hh\>\""}], ",", "flowHeader"}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"ExportCode", "[", 
        RowBox[{
         RowBox[{"flowDir", "<>", "\"\<flows.cc\>\""}], ",", "flowCpp"}], 
        "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"UpdateFlows", "[", 
    RowBox[{"varName_", ":", "flowName"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"updateCMake", "[", "varName", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"updateFlowClass", "[", "varName", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.957872709863739*^9, 3.957872733002977*^9}, {
   3.957872827178797*^9, 3.957872941867323*^9}, {3.957872984221133*^9, 
   3.957873131463619*^9}, {3.95788762378526*^9, 3.9578876255964108`*^9}, {
   3.957887677220499*^9, 3.957887703744581*^9}, {3.9578877785012827`*^9, 
   3.9578877932533693`*^9}, {3.957887918717115*^9, 3.957887939744549*^9}, {
   3.9578880524491796`*^9, 3.9578881107532997`*^9}, {3.957888151148464*^9, 
   3.9578883148369827`*^9}, {3.957888350784848*^9, 3.957888579145463*^9}, {
   3.957888674629621*^9, 3.9578888149422417`*^9}, {3.957888857153084*^9, 
   3.957888882317616*^9}, {3.958233750544816*^9, 3.958233877827758*^9}, {
   3.958656462728879*^9, 3.95865646893125*^9}, {3.9586606972862673`*^9, 
   3.958660722294112*^9}, {3.9586608282383413`*^9, 3.958660857174004*^9}, {
   3.958660922833881*^9, 3.958660925001172*^9}, {3.958660957203487*^9, 
   3.958660977202175*^9}, {3.958662095387199*^9, 3.95866227748237*^9}, {
   3.958662471038315*^9, 3.9586624759615107`*^9}, 3.9605209098585253`*^9, {
   3.960521866642085*^9, 3.96052187412088*^9}, {3.960521916058922*^9, 
   3.960521944667364*^9}, {3.960521975590643*^9, 3.960522011702804*^9}, {
   3.960527912943623*^9, 3.960527921296886*^9}, {3.9605280548882236`*^9, 
   3.960528062323921*^9}, {3.960538426368642*^9, 3.960538493890276*^9}, {
   3.960538539873087*^9, 3.960538549313128*^9}, {3.960538845577907*^9, 
   3.960539011296652*^9}, {3.9605390680823317`*^9, 3.960539106069664*^9}, {
   3.9605391374169827`*^9, 3.9605392202148848`*^9}, {3.960539266861614*^9, 
   3.960539289803*^9}, {3.960606243378004*^9, 3.9606063593702383`*^9}, {
   3.96060640165401*^9, 
   3.960606489306451*^9}},ExpressionUUID->"000d09ba-085d-4cc6-a3bd-\
8ab73047b879"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "MakeKernel", "]"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernel", "::", "Invalid"}], "=", 
   "\"\<The given arguments are invalid. See MakeKernel::usage\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeKernel", "::", "InvalidSpec"}], "=", 
    "\"\<The given kernel specification is invalid.\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"Options", "[", "MakeKernel", "]"}], "=", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"\"\<Coordinates\>\"", "->", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<IntegrationVariables\>\"", "->", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{
      "\"\<KernelDefinitions\>\"", "->", "$StandardKernelDefinitions"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
      "\"\<Regulator\>\"", "->", "\"\<DiFfRG::PolynomialExpRegulator\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"\"\<RegulatorOpts\>\"", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}]}], 
     "\[IndentingNewLine]", "}"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$ADReplacements", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"$ADReplacementsDirect", "=", 
    RowBox[{"{", 
     RowBox[{"\"\<double\>\"", "->", "\"\<autodiff::real\>\""}], "}"}]}], 
   ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernel", "[", "__", "]"}], ":=", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Message", "[", 
      RowBox[{"MakeKernel", "::", "Invalid"}], "]"}], ";", 
     RowBox[{"Abort", "[", "]"}]}], ")"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernel", "[", 
    RowBox[{
    "kernelExpr_", ",", "constExpr_", ",", "spec_Association", ",", 
     "parameters_List", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "expr", ",", "const", ",", "\[IndentingNewLine]", "kernel", ",", 
       "constant", ",", "kernelClass", ",", "kernelHeader", ",", 
       "\[IndentingNewLine]", "integratorHeader", ",", "integratorCpp", ",", 
       "integratorTemplateParams", ",", "integratorADTemplateParams", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"tparams", "=", 
        RowBox[{"<|", 
         RowBox[{
          RowBox[{"\"\<Name\>\"", "->", "\"\<...t\>\""}], ",", 
          RowBox[{"\"\<Type\>\"", "->", "\"\<auto&&\>\""}], ",", 
          RowBox[{"\"\<Reference\>\"", "->", "False"}], ",", 
          RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"kernelDefs", "=", 
        RowBox[{"OptionValue", "[", "\"\<KernelDefinitions\>\"", "]"}]}], ",",
        "\[IndentingNewLine]", 
       RowBox[{"coordinates", "=", 
        RowBox[{"OptionValue", "[", "\"\<Coordinates\>\"", "]"}]}], ",", 
       "\[IndentingNewLine]", "regulator", ",", "\[IndentingNewLine]", 
       "params", ",", "paramsAD", ",", "explParamAD", ",", 
       "\[IndentingNewLine]", "i", ",", "arguments", ",", 
       "\[IndentingNewLine]", "outputPath", ",", "sources"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"KernelSpecQ", "[", "spec", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Message", "[", 
          RowBox[{"MakeKernel", "::", "InvalidSpec"}], "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"expr", "=", "kernelExpr"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "expr", "]"}], ",", 
        RowBox[{"expr", "=", 
         RowBox[{"Plus", "@@", "expr"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"const", "=", "constExpr"}], ";", "\[IndentingNewLine]", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"ListQ", "[", "const", "]"}], ",", 
        RowBox[{"const", "=", 
         RowBox[{"Plus", "@@", "const"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kernel", "=", 
       RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
        RowBox[{"expr", ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Name\>\"", "->", "\"\<kernel\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Suffix\>\"", "->", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<Prefix\>\"", "->", 
          "\"\<static KOKKOS_FORCEINLINE_FUNCTION\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Parameters\>\"", "->", 
          RowBox[{"Join", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<IntegrationVariables\>\"", "]"}],
             ",", "parameters"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
         "\"\<Body\>\"", "->", 
          "\"\<using namespace DiFfRG;using namespace \
DiFfRG::compute;\>\""}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"constant", "=", 
       RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
        RowBox[{"constExpr", ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Name\>\"", "->", "\"\<constant\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Suffix\>\"", "->", "\"\<\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<Prefix\>\"", "->", 
          "\"\<static KOKKOS_FORCEINLINE_FUNCTION\>\""}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Parameters\>\"", "->", "parameters"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
         "\"\<Body\>\"", "->", 
          "\"\<using namespace DiFfRG;using namespace \
DiFfRG::compute;\>\""}]}], "\[IndentingNewLine]", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"kernelClass", "=", 
       RowBox[{"FunKit`MakeCppClass", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<TemplateTypes\>\"", "->", 
          RowBox[{"{", "\"\<_Regulator\>\"", "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Name\>\"", "->", 
          RowBox[{
           RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
           "\"\<_kernel\>\""}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<MembersPublic\>\"", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<using Regulator = _Regulator;\>\"", ",", "kernel", ",", 
            "constant"}], "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<MembersPrivate\>\"", "->", "kernelDefs"}]}], 
        "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"kernelHeader", "=", 
       RowBox[{"FunKit`MakeCppHeader", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Includes\>\"", "->", 
          RowBox[{"{", "\"\<DiFfRG/physics/utils.hh\>\"", "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Body\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<namespace DiFfRG {\>\"", ",", "kernelClass", ",", 
            RowBox[{"\"\<} using DiFfRG::\>\"", "<>", 
             RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_kernel;\>\""}]}], "}"}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "kernelHeader", "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"params", "=", 
       RowBox[{"FunKit`Private`prepParam", "/@", "parameters"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"paramsAD", "=", "params"}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "1"}], ",", 
        RowBox[{"i", "<=", 
         RowBox[{"Length", "[", "params", "]"}]}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"KeyFreeQ", "[", 
            RowBox[{
             RowBox[{"params", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Type\>\""}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"params", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", 
            RowBox[{"Association", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Normal", "@", 
                RowBox[{"(", 
                 RowBox[{"params", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}], "\[Union]", 
              
              RowBox[{"{", 
               RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], "}"}]}], 
             "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"params", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
               "===", "\"\<auto\>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"params", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"KeyDrop", "[", 
                 RowBox[{
                  RowBox[{"params", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"{", "\"\<Type\>\"", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"params", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"Association", "[", 
                 RowBox[{
                  RowBox[{"Normal", "@", 
                   RowBox[{"(", 
                    RowBox[{"params", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], "}"}]}], 
                 "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"KeyFreeQ", "[", 
               RowBox[{
                RowBox[{"params", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Const\>\""}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"params", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"Association", "[", 
                RowBox[{
                 RowBox[{"Normal", "@", 
                  RowBox[{"(", 
                   RowBox[{"params", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Const\>\"", "->", "True"}], "}"}]}], "]"}]}]}],
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"KeyFreeQ", "[", 
               RowBox[{
                RowBox[{"params", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Reference\>\""}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"params", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"Association", "[", 
                RowBox[{
                 RowBox[{"Normal", "@", 
                  RowBox[{"(", 
                   RowBox[{"params", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Reference\>\"", "->", "True"}], "}"}]}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"KeyFreeQ", "[", 
            RowBox[{
             RowBox[{"paramsAD", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Type\>\""}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"paramsAD", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "=", 
            RowBox[{"Association", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Normal", "@", 
                RowBox[{"(", 
                 RowBox[{"paramsAD", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ")"}]}], ")"}], "\[Union]", 
              
              RowBox[{"{", 
               RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], "}"}]}], 
             "]"}]}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
               "===", "\"\<auto\>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"KeyDrop", "[", 
                 RowBox[{
                  RowBox[{"paramsAD", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"{", "\"\<Type\>\"", "}"}]}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"Association", "[", 
                 RowBox[{
                  RowBox[{"Normal", "@", 
                   RowBox[{"(", 
                    RowBox[{"paramsAD", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Type\>\"", "->", "\"\<autodiff::real\>\""}], 
                   "}"}]}], "]"}]}]}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"explParamAD", "=", 
                RowBox[{"StringReplace", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"paramsAD", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", 
                   "]"}], ",", "$ADReplacements"}], "]"}]}], ";", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"KeyDrop", "[", 
                 RowBox[{
                  RowBox[{"paramsAD", "[", 
                   RowBox[{"[", "i", "]"}], "]"}], ",", 
                  RowBox[{"{", "\"\<Type\>\"", "}"}]}], "]"}]}], ";", 
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], "=", 
                RowBox[{"Association", "[", 
                 RowBox[{
                  RowBox[{"Normal", "@", 
                   RowBox[{"(", 
                    RowBox[{"paramsAD", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                  RowBox[{"{", 
                   RowBox[{"\"\<Type\>\"", "->", "explParamAD"}], "}"}]}], 
                 "]"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"KeyFreeQ", "[", 
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Const\>\""}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"paramsAD", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"Association", "[", 
                RowBox[{
                 RowBox[{"Normal", "@", 
                  RowBox[{"(", 
                   RowBox[{"paramsAD", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Const\>\"", "->", "True"}], "}"}]}], "]"}]}]}],
              "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"KeyFreeQ", "[", 
               RowBox[{
                RowBox[{"paramsAD", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<Reference\>\""}], 
               "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"paramsAD", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "=", 
               RowBox[{"Association", "[", 
                RowBox[{
                 RowBox[{"Normal", "@", 
                  RowBox[{"(", 
                   RowBox[{"paramsAD", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], ")"}]}], "\[Union]", 
                 RowBox[{"{", 
                  RowBox[{"\"\<Reference\>\"", "->", "True"}], "}"}]}], 
                "]"}]}]}], "\[IndentingNewLine]", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"arguments", "=", 
       RowBox[{"StringRiffle", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "&"}], ",", "params"}], 
          "]"}], ",", "\"\<, \>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"integratorTemplateParams", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"spec", ",", "\"\<d\>\""}], "]"}], "&&", 
         RowBox[{
          RowBox[{"spec", "[", "\"\<d\>\"", "]"}], "=!=", "None"}]}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"integratorTemplateParams", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"spec", "[", "\"\<d\>\"", "]"}], "]"}]}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"spec", ",", "\"\<Type\>\""}], "]"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"integratorTemplateParams", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"spec", "[", "\"\<Type\>\"", "]"}], "]"}]}], "]"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"integratorTemplateParams", ",", "\"\<double\>\""}], "]"}]}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"integratorTemplateParams", ",", 
        RowBox[{
         RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
         "\"\<_kernel<Regulator>\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"AppendTo", "[", 
       RowBox[{"integratorTemplateParams", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"KeyFreeQ", "[", 
            RowBox[{"spec", ",", "\"\<Device\>\""}], "]"}], "||", 
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<GPU\>\"", ",", "\"\<OpenMP\>\""}], "}"}], ",", 
             RowBox[{"spec", "[", "\"\<Device\>\"", "]"}]}], "]"}]}], ",", 
          "\"\<DiFfRG::TBB_exec\>\"", ",", 
          RowBox[{"\"\<DiFfRG::\>\"", "<>", 
           RowBox[{"spec", "[", "\"\<Device\>\"", "]"}], "<>", 
           "\"\<_exec\>\""}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"integratorTemplateParams", "=", 
       RowBox[{"StringRiffle", "[", 
        RowBox[{"integratorTemplateParams", ",", "\"\<, \>\""}], "]"}]}], ";",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"integratorADTemplateParams", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"spec", ",", "\"\<d\>\""}], "]"}], "&&", 
         RowBox[{
          RowBox[{"spec", "[", "\"\<d\>\"", "]"}], "=!=", "None"}]}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"integratorADTemplateParams", ",", 
          RowBox[{"ToString", "[", 
           RowBox[{"spec", "[", "\"\<d\>\"", "]"}], "]"}]}], "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"spec", ",", "\"\<Type\>\""}], "]"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"integratorADTemplateParams", ",", 
          RowBox[{"StringReplace", "[", 
           RowBox[{
            RowBox[{"ToString", "[", 
             RowBox[{"spec", "[", "\"\<Type\>\"", "]"}], "]"}], ",", 
            "$ADReplacementsDirect"}], "]"}]}], "]"}], ",", 
        RowBox[{"AppendTo", "[", 
         RowBox[{
         "integratorADTemplateParams", ",", "\"\<autodiff::real\>\""}], 
         "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"integratorADTemplateParams", ",", 
        RowBox[{
         RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
         "\"\<_kernel<Regulator>\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"AppendTo", "[", 
       RowBox[{"integratorADTemplateParams", ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"KeyFreeQ", "[", 
            RowBox[{"spec", ",", "\"\<Device\>\""}], "]"}], "||", 
           RowBox[{"FreeQ", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"\"\<GPU\>\"", ",", "\"\<OpenMP\>\""}], "}"}], ",", 
             RowBox[{"spec", "[", "\"\<Device\>\"", "]"}]}], "]"}]}], ",", 
          "\"\<DiFfRG::TBB_exec\>\"", ",", 
          RowBox[{"\"\<DiFfRG::\>\"", "<>", 
           RowBox[{"spec", "[", "\"\<Device\>\"", "]"}], "<>", 
           "\"\<_exec\>\""}]}], "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"integratorADTemplateParams", "=", 
       RowBox[{"StringRiffle", "[", 
        RowBox[{"integratorADTemplateParams", ",", "\"\<, \>\""}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"integratorHeader", "=", 
       RowBox[{"FunKit`MakeCppHeader", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Includes\>\"", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<DiFfRG/physics/interpolation.hh\>\"", ",", 
            "\"\<DiFfRG/physics/integration.hh\>\"", ",", 
            "\"\<DiFfRG/physics/physics.hh\>\""}], "}"}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"\"\<Body\>\"", "->", 
          RowBox[{"{", 
           RowBox[{
           "\"\<#include \\\"./kernel.hh\\\"\\n\>\"", ",", 
            "\[IndentingNewLine]", 
            RowBox[{"FunKit`MakeCppClass", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<Name\>\"", "->", 
               RowBox[{
                RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<MembersPublic\>\"", "->", 
               RowBox[{"{", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"\"\<Name\>\"", "->", 
                    RowBox[{
                    RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                    "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{
                    "\"\<Type\>\"", "->", 
                    "\"\<DiFfRG::QuadratureProvider\>\""}], ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}], ",", 
                    RowBox[{
                    "\"\<Name\>\"", "->", "\"\<quadrature_provider\>\""}]}], 
                    "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{
                    "\"\<Type\>\"", "->", "\"\<DiFfRG::JSONValue\>\""}], ",", 
                    
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Name\>\"", "->", "\"\<json\>\""}]}], 
                    "|>"}]}], "}"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"\"\<Return\>\"", "->", "\"\<\>\""}]}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{"\"\<Name\>\"", "->", "\"\<get\>\""}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"\"\<Templates\>\"", "->", 
                    RowBox[{"{", "\"\<NT=double\>\"", "}"}]}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<NT\>\""}], ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<...t\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<auto&&\>\""}], ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "False"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}]}], 
                    "}"}]}], ",", "\[IndentingNewLine]", 
                   RowBox[{"\"\<Body\>\"", "->", 
                    RowBox[{
                    "\"\<static_assert(std::is_same_v<NT, double> || \
std::is_same_v<NT, autodiff::real>, \\\"Unknown type requested of \>\"", "<>", 
                    RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                    "\"\<_integrator::get\\\");\nif constexpr \
(std::is_same_v<NT, double>)\n  get_CT(dest, \
std::forward<decltype(t)>(t)...);\nelse if constexpr (std::is_same_v<NT, \
autodiff::real>)\n  get_AD(dest, std::forward<decltype(t)>(t)...);\>\""}]}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
                  "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"Length", "[", "coordinates", "]"}], ">", "0"}], 
                   ",", "\[IndentingNewLine]", 
                   RowBox[{
                   "FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<map\>\""}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Templates\>\"", "->", 
                    RowBox[{"{", "\"\<NT=double\>\"", "}"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"{", "tparams", "}"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\"\<Body\>\"", "->", 
                    RowBox[{
                    "\"\<static_assert(std::is_same_v<NT, double> || \
std::is_same_v<NT, autodiff::real>, \\\"Unknown type requested of \>\"", "<>", 
                    RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                    "\"\<_integrator::get\\\");\nif constexpr \
(std::is_same_v<NT, double>)\n  map_CT(std::forward<decltype(t)>(t)...);\n\
else if constexpr (std::is_same_v<NT, autodiff::real>)\n  \
map_AD(std::forward<decltype(t)>(t)...);\>\""}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
                    "\[IndentingNewLine]", "]"}], ",", "\"\<\>\""}], "]"}], 
                 ",", "\[IndentingNewLine]", 
                 RowBox[{"getRegulator", "[", 
                  RowBox[{
                   RowBox[{"OptionValue", "[", "\"\<Regulator\>\"", "]"}], 
                   ",", 
                   RowBox[{
                   "OptionValue", "[", "\"\<RegulatorOpts\>\"", "]"}]}], 
                  "]"}], ",", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"spec", "[", "\"\<Integrator\>\"", "]"}], "<>", 
                  "\"\<<\>\"", "<>", "integratorTemplateParams", "<>", 
                  "\"\<> integrator;\>\""}], ",", "\[IndentingNewLine]", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"spec", "[", "\"\<AD\>\"", "]"}], ",", 
                   RowBox[{
                    RowBox[{"spec", "[", "\"\<Integrator\>\"", "]"}], "<>", 
                    "\"\<<\>\"", "<>", "integratorADTemplateParams", "<>", 
                    "\"\<> integrator_AD;\>\""}], ",", "\"\<\>\""}], "]"}]}], 
                "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<MembersPrivate\>\"", "->", 
               RowBox[{"Join", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Map", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FunKit`MakeCppFunction", "[", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<map_CT\>\""}], ",", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<double*\>\""}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<coordinates\>\""}], 
                    ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "#"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}]}], "|>"}]}], 
                    "}"}], ",", "params"}], "]"}]}]}], "]"}], "&"}], ",", 
                   "\[IndentingNewLine]", "coordinates"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"Map", "[", "\[IndentingNewLine]", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"FunKit`MakeCppFunction", "[", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<map_AD\>\""}], ",", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<autodiff::real*\>\""}],
                     ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<coordinates\>\""}], 
                    ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "#"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}]}], "|>"}]}], 
                    "}"}], ",", "paramsAD"}], "]"}]}]}], "]"}], "&"}], ",", 
                   "\[IndentingNewLine]", "coordinates"}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"FunKit`MakeCppFunction", "[", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<get_CT\>\""}], ",", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], "}"}],
                     ",", "params"}], "]"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   RowBox[{"FunKit`MakeCppFunction", "[", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<get_AD\>\""}], ",", 
                    RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                    RowBox[{"\"\<Body\>\"", "->", "None"}], ",", 
                    RowBox[{"\"\<Parameters\>\"", "->", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<autodiff::real\>\""}], 
                    ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], "}"}],
                     ",", "paramsAD"}], "]"}]}]}], "]"}], ",", 
                   "\[IndentingNewLine]", 
                   "\"\<DiFfRG::QuadratureProvider& \
quadrature_provider;\>\""}], "}"}]}], "\[IndentingNewLine]", "]"}]}]}], 
             "\[IndentingNewLine]", "]"}]}], "}"}]}]}], "\[IndentingNewLine]",
         "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "integratorHeader", "]"}], ";"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"integratorCpp", "[", "\"\<Constructor\>\"", "]"}], "=", 
       RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Includes\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<../\>\"", "<>", 
            RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}],
            "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Body\>\"", "->", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<Name\>\"", "->", 
              RowBox[{
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Class\>\"", "->", 
              RowBox[{
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Suffix\>\"", "->", 
              RowBox[{
              "\"\<: integrator(quadrature_provider, json), \>\"", "<>", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"spec", "[", "\"\<AD\>\"", "]"}], ",", 
                 "\"\<integrator_AD(quadrature_provider, json), \>\""}], 
                "]"}], "<>", 
               "\"\<quadrature_provider(quadrature_provider)\>\""}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Body\>\"", "->", "\"\<\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Parameters\>\"", "->", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{
                  "\"\<Type\>\"", "->", 
                   "\"\<DiFfRG::QuadratureProvider\>\""}], ",", 
                  RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<Const\>\"", "->", "False"}], ",", 
                  RowBox[{
                  "\"\<Name\>\"", "->", "\"\<quadrature_provider\>\""}]}], 
                 "|>"}], ",", 
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<Type\>\"", "->", "\"\<DiFfRG::JSONValue\>\""}],
                   ",", 
                  RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<Const\>\"", "->", "True"}], ",", 
                  RowBox[{"\"\<Name\>\"", "->", "\"\<json\>\""}]}], "|>"}]}], 
               "}"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Return\>\"", "->", "\"\<\>\""}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"integratorCpp", "[", 
        RowBox[{"\"\<CT\>\"", ",", "\"\<get\>\""}], "]"}], "=", 
       RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Includes\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<../\>\"", "<>", 
            RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}],
            "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Body\>\"", "->", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<Name\>\"", "->", "\"\<get_CT\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Class\>\"", "->", 
              RowBox[{
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Body\>\"", "->", 
              RowBox[{
              "\"\<integrator.get(dest, \>\"", "<>", "arguments", "<>", 
               "\"\<);\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Parameters\>\"", "->", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                   RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}], ",", 
                   RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], "}"}], 
                ",", "params"}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"integratorCpp", "[", 
        RowBox[{"\"\<AD\>\"", ",", "\"\<get\>\""}], "]"}], "=", 
       RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<Includes\>\"", "->", 
          RowBox[{"{", 
           RowBox[{"\"\<../\>\"", "<>", 
            RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}],
            "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Body\>\"", "->", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"\"\<Name\>\"", "->", "\"\<get_AD\>\""}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"\"\<Class\>\"", "->", 
              RowBox[{
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Body\>\"", "->", 
              RowBox[{
              "\"\<integrator_AD.get(dest, \>\"", "<>", "arguments", "<>", 
               "\"\<);\>\""}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Parameters\>\"", "->", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"<|", 
                  RowBox[{
                   RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                   RowBox[{"\"\<Type\>\"", "->", "\"\<autodiff::real\>\""}], 
                   ",", 
                   RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                   RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], "}"}], 
                ",", "paramsAD"}], "]"}]}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "}"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"integratorCpp", "[", 
        RowBox[{"\"\<CT\>\"", ",", "\"\<map\>\""}], "]"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Includes\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"\"\<../\>\"", "<>", 
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<.hh\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Body\>\"", "->", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"\"\<Name\>\"", "->", "\"\<map_CT\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Class\>\"", "->", 
                 RowBox[{
                  RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                  "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"\"\<Body\>\"", "->", 
                 RowBox[{
                 "\"\<integrator.map(dest, coordinates, \>\"", "<>", 
                  "arguments", "<>", "\"\<);\>\""}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Parameters\>\"", "->", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<double*\>\""}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<coordinates\>\""}], 
                    ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "#"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}]}], "|>"}]}], 
                    "}"}], ",", "params"}], "]"}]}]}], "\[IndentingNewLine]", 
               "]"}], "\[IndentingNewLine]", "}"}]}]}], "]"}], "&"}], ",", 
         "coordinates"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"integratorCpp", "[", 
        RowBox[{"\"\<AD\>\"", ",", "\"\<map\>\""}], "]"}], "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"FunKit`MakeCppBlock", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<Includes\>\"", "->", 
             RowBox[{"{", 
              RowBox[{"\"\<../\>\"", "<>", 
               RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
               "\"\<.hh\>\""}], "}"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{"\"\<Body\>\"", "->", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"FunKit`MakeCppFunction", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"\"\<Name\>\"", "->", "\"\<map_AD\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Return\>\"", "->", "\"\<void\>\""}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Class\>\"", "->", 
                 RowBox[{
                  RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
                  "\"\<_integrator\>\""}]}], ",", "\[IndentingNewLine]", 
                RowBox[{"\"\<Body\>\"", "->", 
                 RowBox[{
                 "\"\<integrator_AD.map(dest, coordinates, \>\"", "<>", 
                  "arguments", "<>", "\"\<);\>\""}]}], ",", 
                "\[IndentingNewLine]", 
                RowBox[{"\"\<Parameters\>\"", "->", 
                 RowBox[{"Join", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<dest\>\""}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "\"\<autodiff::real*\>\""}],
                     ",", 
                    RowBox[{"\"\<Const\>\"", "->", "False"}]}], "|>"}], ",", 
                    RowBox[{"<|", 
                    RowBox[{
                    RowBox[{"\"\<Name\>\"", "->", "\"\<coordinates\>\""}], 
                    ",", 
                    RowBox[{"\"\<Reference\>\"", "->", "True"}], ",", 
                    RowBox[{"\"\<Type\>\"", "->", "#"}], ",", 
                    RowBox[{"\"\<Const\>\"", "->", "True"}]}], "|>"}]}], 
                    "}"}], ",", "paramsAD"}], "]"}]}]}], 
               "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "}"}]}]}],
            "]"}], "&"}], ",", "coordinates"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Print", "[", "\"\<\\n-----------------------------\\n\>\"", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"integratorCpp", "[", 
          RowBox[{"\"\<CT\>\"", ",", "\"\<get\>\""}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<\\n-----------------------------\\n\>\"", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"integratorCpp", "[", 
          RowBox[{"\"\<AD\>\"", ",", "\"\<get\>\""}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<\\n-----------------------------\\n\>\"", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"integratorCpp", "[", 
          RowBox[{"\"\<CT\>\"", ",", "\"\<map\>\""}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<\\n-----------------------------\\n\>\"", "]"}], 
        ";", "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"integratorCpp", "[", 
          RowBox[{"\"\<AD\>\"", ",", "\"\<map\>\""}], "]"}], "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"outputPath", "=", 
       RowBox[{"flowDir", "<>", 
        RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", "\"\</\>\""}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"outputPath", "<>", 
         RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}], 
        ",", "integratorHeader"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"outputPath", "<>", "\"\<kernel.hh\>\""}], ",", 
        "kernelHeader"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sources", "=", 
       RowBox[{"{", 
        RowBox[{"outputPath", "<>", "\"\<src/constructor.cc\>\""}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"sources", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], ",", 
        RowBox[{"integratorCpp", "[", "\"\<Constructor\>\"", "]"}]}], "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"AppendTo", "[", 
       RowBox[{"sources", ",", 
        RowBox[{"outputPath", "<>", "\"\<src/CT_get.cc\>\""}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"sources", "[", 
         RowBox[{"[", 
          RowBox[{"-", "1"}], "]"}], "]"}], ",", 
        RowBox[{"integratorCpp", "[", 
         RowBox[{"\"\<CT\>\"", ",", "\"\<get\>\""}], "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Do", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"sources", ",", 
           RowBox[{"outputPath", "<>", "\"\<src/CT_map_\>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.cc\>\""}]}], 
          "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"ExportCode", "[", 
          RowBox[{
           RowBox[{"sources", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{
            RowBox[{"integratorCpp", "[", 
             RowBox[{"\"\<CT\>\"", ",", "\"\<map\>\""}], "]"}], "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "coordinates", "]"}]}], "}"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"spec", "[", "\"\<AD\>\"", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{
         RowBox[{"AppendTo", "[", 
          RowBox[{"sources", ",", 
           RowBox[{"outputPath", "<>", "\"\<src/AD_get.cc\>\""}]}], "]"}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"ExportCode", "[", 
          RowBox[{
           RowBox[{"sources", "[", 
            RowBox[{"[", 
             RowBox[{"-", "1"}], "]"}], "]"}], ",", 
           RowBox[{"integratorCpp", "[", 
            RowBox[{"\"\<AD\>\"", ",", "\"\<get\>\""}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"Do", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"AppendTo", "[", 
             RowBox[{"sources", ",", 
              RowBox[{"outputPath", "<>", "\"\<src/AD_map_\>\"", "<>", 
               RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<.cc\>\""}]}], 
             "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"ExportCode", "[", 
             RowBox[{
              RowBox[{"sources", "[", 
               RowBox[{"[", 
                RowBox[{"-", "1"}], "]"}], "]"}], ",", 
              RowBox[{
               RowBox[{"integratorCpp", "[", 
                RowBox[{"\"\<AD\>\"", ",", "\"\<map\>\""}], "]"}], "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"Length", "[", "coordinates", "]"}]}], "}"}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"sources", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"StringReplace", "[", 
           RowBox[{"#", ",", 
            RowBox[{"outputPath", "->", 
             RowBox[{"\"\<${CMAKE_CURRENT_SOURCE_DIR}/\>\"", "<>", 
              RowBox[{"spec", "[", "\"\<Name\>\"", "]"}], "<>", 
              "\"\</\>\""}]}]}], "]"}], "&"}], ",", "sources"}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{"outputPath", "<>", "\"\<sources.m\>\""}], ",", "sources"}], 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", 
       "\"\<Please run UpdateFlows[] to export an up-to-date CMakeLists.txt\>\
\"", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.957456139477901*^9, 3.95745620392071*^9}, {
   3.957506009884807*^9, 3.957506036495763*^9}, {3.957507261040175*^9, 
   3.957507286881324*^9}, {3.9575073705486717`*^9, 3.957507376141335*^9}, {
   3.957507572540666*^9, 3.957507785233663*^9}, {3.957507998153143*^9, 
   3.957507999641509*^9}, {3.957516347920354*^9, 3.957516459452121*^9}, {
   3.957516531100655*^9, 3.957516571445369*^9}, {3.9575166410810432`*^9, 
   3.9575167284729967`*^9}, {3.957516761724741*^9, 3.957516934124894*^9}, {
   3.957516975933837*^9, 3.957516991432226*^9}, {3.957517214493475*^9, 
   3.957517293736719*^9}, {3.957517525680851*^9, 3.9575176875820007`*^9}, {
   3.95751791514111*^9, 3.95751794002925*^9}, {3.957517989965446*^9, 
   3.957518010501278*^9}, {3.957518058569994*^9, 3.957518142194948*^9}, {
   3.957518395025379*^9, 3.957518469535638*^9}, {3.957518529310351*^9, 
   3.9575185451021633`*^9}, {3.9575191513447647`*^9, 3.957519181449832*^9}, {
   3.9575192485013533`*^9, 3.957519284651059*^9}, {3.95760096910426*^9, 
   3.957600970423504*^9}, {3.957601027676543*^9, 3.957601171439828*^9}, {
   3.95760130678506*^9, 3.957601360292305*^9}, {3.957601416941033*^9, 
   3.957601421664859*^9}, {3.9576015070291843`*^9, 3.957601527344427*^9}, {
   3.957601643085121*^9, 3.957601754565275*^9}, {3.957602221016766*^9, 
   3.957602221207122*^9}, {3.957602292181922*^9, 3.9576023722974453`*^9}, {
   3.957602425737926*^9, 3.957602453624819*^9}, 3.957602487129374*^9, {
   3.957602520109542*^9, 3.957602649877162*^9}, {3.95784747620135*^9, 
   3.957847489184379*^9}, {3.957847618185409*^9, 3.957847637437128*^9}, {
   3.957847704717483*^9, 3.95784780232782*^9}, {3.957848404338814*^9, 
   3.957848414478629*^9}, {3.957848454023395*^9, 3.957848495119166*^9}, {
   3.95784853263911*^9, 3.957848577095632*^9}, {3.957848634634481*^9, 
   3.957848739887821*^9}, {3.9578488054359293`*^9, 3.9578489246630707`*^9}, {
   3.957861292648341*^9, 3.9578613389020042`*^9}, {3.957861466352706*^9, 
   3.95786147052328*^9}, {3.957861509166877*^9, 3.957861600883569*^9}, {
   3.957861641789736*^9, 3.957861650342328*^9}, {3.9578616807832603`*^9, 
   3.9578616807896957`*^9}, {3.957861735590438*^9, 3.957861799706046*^9}, {
   3.957861833930578*^9, 3.957861863525443*^9}, {3.9578619046486692`*^9, 
   3.9578620142656097`*^9}, {3.957862085359164*^9, 3.95786221647876*^9}, {
   3.95786227657719*^9, 3.957862415407579*^9}, {3.95786254766639*^9, 
   3.957862707180077*^9}, {3.957862772505177*^9, 3.957862835028371*^9}, {
   3.9578629287093678`*^9, 3.95786303983715*^9}, {3.957863126402431*^9, 
   3.957863176300334*^9}, {3.957863481105694*^9, 3.957863486908445*^9}, {
   3.95786352684982*^9, 3.957863579834731*^9}, {3.9578636729966173`*^9, 
   3.95786389545156*^9}, {3.9578662112032948`*^9, 3.957866227329805*^9}, {
   3.9578662631803627`*^9, 3.957866365247344*^9}, {3.9578664068635273`*^9, 
   3.957866494083777*^9}, {3.9578665335185633`*^9, 3.957866598293323*^9}, {
   3.957866642012175*^9, 3.9578666893567867`*^9}, 3.957866745901835*^9, {
   3.957866802091289*^9, 3.9578668536621523`*^9}, {3.957866912823093*^9, 
   3.957867346526437*^9}, {3.957867404887631*^9, 3.957867406399136*^9}, {
   3.95786749175744*^9, 3.957867511311738*^9}, {3.957867542411359*^9, 
   3.9578675547728643`*^9}, {3.957867638532905*^9, 3.9578676388600883`*^9}, {
   3.957867734327155*^9, 3.9578678831084623`*^9}, {3.9578679556886272`*^9, 
   3.957868101845715*^9}, 3.957868891784343*^9, {3.957869218122908*^9, 
   3.957869239502808*^9}, {3.957869276528813*^9, 3.957869282250908*^9}, {
   3.957869379704225*^9, 3.957869475633183*^9}, {3.9578698912591267`*^9, 
   3.957869951599142*^9}, {3.957870024946381*^9, 3.957870061047614*^9}, {
   3.957870106785812*^9, 3.95787010970409*^9}, {3.957870171581122*^9, 
   3.957870183180771*^9}, {3.95787022522218*^9, 3.957870239413835*^9}, {
   3.957870329431747*^9, 3.957870368291683*^9}, 3.9578726978420687`*^9, {
   3.957886671692925*^9, 3.9578868299777403`*^9}, {3.957886964194666*^9, 
   3.957886968304056*^9}, {3.957887007114019*^9, 3.957887015441741*^9}, {
   3.957887140094026*^9, 3.95788719082823*^9}, {3.957887593197241*^9, 
   3.957887596188053*^9}, {3.957887811826023*^9, 3.957887840361071*^9}, {
   3.9578879472303762`*^9, 3.957887957921227*^9}, 3.957888060955038*^9, {
   3.957888615925251*^9, 3.9578886352335043`*^9}, {3.958234148501091*^9, 
   3.958234162716333*^9}, {3.958371563515905*^9, 3.958371637330092*^9}, {
   3.95837168680649*^9, 3.958371687801732*^9}, {3.958656483169677*^9, 
   3.958656535085267*^9}, {3.958656681695087*^9, 3.958656686065785*^9}, {
   3.958656718657587*^9, 3.9586567216334267`*^9}, {3.958656758114979*^9, 
   3.9586567824090233`*^9}, {3.958656832387113*^9, 3.9586568357601337`*^9}, {
   3.9586569417777576`*^9, 3.95865697516101*^9}, {3.9586571796252127`*^9, 
   3.958657183787837*^9}, {3.958657219971304*^9, 3.958657223149588*^9}, {
   3.958657382939117*^9, 3.958657396470755*^9}, {3.958657442196681*^9, 
   3.958657448440175*^9}, {3.958658163245269*^9, 3.958658208096537*^9}, {
   3.9586582688469057`*^9, 3.958658312147566*^9}, {3.958658347639298*^9, 
   3.9586583536424637`*^9}, {3.958658391208107*^9, 3.9586583932474546`*^9}, {
   3.958658444072027*^9, 3.958658513030201*^9}, {3.958658562231415*^9, 
   3.958658566512663*^9}, {3.958658817699664*^9, 3.958658916618816*^9}, {
   3.9586590239234333`*^9, 3.9586590331317263`*^9}, 3.958659295714477*^9, {
   3.9586593342592373`*^9, 3.95865935143467*^9}, {3.9586615184228687`*^9, 
   3.958661521298324*^9}, 3.958661563447136*^9, {3.958661706354521*^9, 
   3.9586617064737787`*^9}, {3.96052091478935*^9, 3.960521090334955*^9}, {
   3.960521259474*^9, 3.960521324427774*^9}, 3.960521482882476*^9, {
   3.9605279391915627`*^9, 3.9605279856219597`*^9}, 3.960528306456668*^9, 
   3.960528468329775*^9, 3.960528499865752*^9, {3.960528599958004*^9, 
   3.960528622476225*^9}, {3.9605286670652437`*^9, 3.960528700080391*^9}, {
   3.960528780839684*^9, 3.960528806310837*^9}, {3.960528868410734*^9, 
   3.9605289185374613`*^9}, {3.960529028186455*^9, 3.960529034130178*^9}, {
   3.960529077602373*^9, 3.960529120254806*^9}, {3.960530061184412*^9, 
   3.960530065732667*^9}, {3.96053724548595*^9, 3.960537298131693*^9}, {
   3.9605373559393177`*^9, 3.960537391089473*^9}, {3.96053742597584*^9, 
   3.960537431539136*^9}, {3.960537465599559*^9, 3.960537504066349*^9}, {
   3.96053775771796*^9, 3.9605377594696627`*^9}, {3.9605377912659283`*^9, 
   3.9605378346552563`*^9}, {3.960537879646946*^9, 3.9605379146314697`*^9}, {
   3.960538007894017*^9, 3.9605380158868217`*^9}, {3.960538097043569*^9, 
   3.960538147031493*^9}, {3.960562292651455*^9, 3.960562410839596*^9}, {
   3.9606073761411448`*^9, 
   3.9606074569478207`*^9}},ExpressionUUID->"bbb4c34a-71cf-44cc-a5d3-\
2d21634b59cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"MakeKernel", "[", 
    RowBox[{"1", ",", "1", ",", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<Name\>\"", "->", "\"\<AA\>\""}], ",", 
       RowBox[{"\"\<Integrator\>\"", "->", "\"\<DiFfRG::Integrator_p2\>\""}], 
       ",", 
       RowBox[{"\"\<d\>\"", "->", "4"}], ",", 
       RowBox[{"\"\<AD\>\"", "->", "False"}], ",", 
       RowBox[{"\"\<Device\>\"", "->", "\"\<GPU\>\""}], ",", 
       RowBox[{"\"\<Type\>\"", "->", "\"\<double\>\""}]}], "|>"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", "\"\<a\>\"", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<IntegrationVariables\>\"", "->", 
      RowBox[{"{", "\"\<l1\>\"", "}"}]}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"UpdateFlows", "[", "\"\<ONFiniteTFlows\>\"", "]"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.9605209175486813`*^9, 3.9605209177207623`*^9}, {
  3.960521564821569*^9, 3.960521605364971*^9}, {3.960522238589951*^9, 
  3.960522242008769*^9}},
 CellLabel->
  "In[205]:=",ExpressionUUID->"21618124-c4e5-415b-a543-939f21650ade"],

Cell[CellGroupData[{

Cell[BoxData["\<\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/\
DiFfRG/Flows/AA/AA.hh unchanged\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.9605222433388157`*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"83f930e9-3d81-415f-a957-fb7da573d597"],

Cell[BoxData["\<\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/\
DiFfRG/Flows/AA/kernel.hh unchanged\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.9605222433421803`*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"4b5ae8a7-21e5-43af-bb07-de8cb0202034"],

Cell[BoxData["\<\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/\
DiFfRG/Flows/AA/src/constructor.cc unchanged\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.960522243507053*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"8eb6b023-ffef-414f-8d99-5cf1a573322f"],

Cell[BoxData["\<\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/\
DiFfRG/Flows/AA/src/CT_get.cc unchanged\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.9605222435077667`*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"d74d1917-b826-4153-941a-30695faecbf5"],

Cell[BoxData["\<\"Please run UpdateFlows[] to export an up-to-date \
CMakeLists.txt\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.960522243508341*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"956e77a7-2d91-4e01-baf5-d817ee9f9efb"],

Cell[BoxData["\<\"Exported to \
\\\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/DiFfRG/Flows/\
CMakeLists.txt\\\"\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.96052224353723*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"7bc54f67-4cea-41c3-ad6e-c325bdbba699"],

Cell[BoxData["\<\"Exported to \
\\\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/DiFfRG/Flows/\
flows.hh\\\"\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.960522243755961*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"65426ea0-9023-481a-862f-afeffbf67a77"],

Cell[BoxData["\<\"Exported to \
\\\"/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/DiFfRG/Flows/\
flows.cc\\\"\"\>"], "Print",
 CellChangeTimes->{
  3.9605209189903383`*^9, {3.960521064208685*^9, 3.9605210960338287`*^9}, 
   3.960521296282436*^9, {3.960521330140387*^9, 3.960521335450263*^9}, 
   3.960521485309887*^9, 3.960521546053385*^9, 3.96052160799863*^9, 
   3.960521881230981*^9, {3.960521922806232*^9, 3.960521984227453*^9}, {
   3.9605221452252197`*^9, 3.960522149536992*^9}, {3.960522192840962*^9, 
   3.960522207488976*^9}, 3.960522243777368*^9},
 CellLabel->
  "During evaluation of \
In[205]:=",ExpressionUUID->"cc4c9cd8-ec00-4333-aca1-9e6bd0e595e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finishing package", "Chapter",
 CellChangeTimes->{{3.919139867121632*^9, 
  3.919139874722487*^9}},ExpressionUUID->"e8c3cc19-732d-4100-ba41-\
4f741977ed46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], ";"}]], "Input",\

 CellChangeTimes->{{3.932041570050847*^9, 
  3.932041572308077*^9}},ExpressionUUID->"9b9ea4fc-21b7-44a7-a56c-\
9624eb86aa03"],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]], "Code",
 CellLabel->
  "In[231]:=",ExpressionUUID->"404ab529-fa01-4a17-8d30-d78a744d6275"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]], "Code",
 CellLabel->
  "In[232]:=",ExpressionUUID->"71cbb145-c03b-495b-a560-6fe322da1f14"]
}, Closed]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
InitializationCellEvaluation->False,
InitializationCellWarning->False,
WindowSize->{1200, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.6 Inherited,
FrontEndVersion->"14.1 for Linux x86 (64-bit) (July 16, 2024)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Input"], InitializationCell -> True]}, Visible -> False, 
  FrontEndVersion -> "14.1 for Linux x86 (64-bit) (July 16, 2024)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"3149dff9-433b-4831-b0e6-7a8267329937"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 169, 3, 57, "Title",ExpressionUUID->"255990ba-0600-4517-a841-3b30ef1076f1"],
Cell[CellGroupData[{
Cell[774, 29, 158, 3, 40, "Chapter",ExpressionUUID->"2d5f9f27-5490-4bea-8ecf-1b321b723da0"],
Cell[CellGroupData[{
Cell[957, 36, 161, 3, 39, "Section",ExpressionUUID->"61eae6f8-8864-4150-9158-1ce7d9f393be"],
Cell[1121, 41, 611, 15, 71, "Code",ExpressionUUID->"61eeed29-b199-412c-9a91-f659c54d031c"],
Cell[1735, 58, 241, 7, 29, "Input",ExpressionUUID->"65d902ca-dcf6-4823-97a2-46319b05d715"],
Cell[1979, 67, 12644, 261, 1443, "Code",ExpressionUUID->"e967b969-bd44-41d7-8598-8812e1394d8a"],
Cell[14626, 330, 245, 6, 33, "Code",ExpressionUUID->"334e210a-0008-4f8a-aa82-905e18a840c0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14920, 342, 321, 5, 40, "Chapter",ExpressionUUID->"337028bb-22a5-4c7a-abf1-dfc7beb47d0a"],
Cell[15244, 349, 7657, 174, 368, "Input",ExpressionUUID->"f7ee6a73-23f9-402d-9c49-abbbd26f22a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[22938, 528, 187, 3, 40, "Chapter",ExpressionUUID->"e84729ed-8582-435d-b0b5-b57d953a283a"],
Cell[CellGroupData[{
Cell[23150, 535, 157, 3, 39, "Section",ExpressionUUID->"e3370f84-23df-49af-8ad2-b13a8cd01695"],
Cell[CellGroupData[{
Cell[23332, 542, 1887, 41, 114, "Input",ExpressionUUID->"8c3ad375-b15e-4205-b5d3-d9996ccd7abf",
 InitializationCell->True],
Cell[25222, 585, 866, 14, 37, "Print",ExpressionUUID->"513a5fde-57bd-4577-aefc-468c243da577"]
}, Open  ]]
}, Open  ]],
Cell[26115, 603, 159, 3, 39, "Section",ExpressionUUID->"a0be1f2b-f273-4a1e-8a34-31c5569270ec"],
Cell[CellGroupData[{
Cell[26299, 610, 241, 4, 32, "Section",ExpressionUUID->"c33c8252-d769-4f2c-a755-55e259430a36"],
Cell[CellGroupData[{
Cell[26565, 618, 247, 4, 31, "Subsection",ExpressionUUID->"3055f86e-1202-4f7c-82d7-f4a1322b935a"],
Cell[26815, 624, 5965, 132, 303, "Input",ExpressionUUID->"c4e780f8-15b6-40cb-8a1d-2bd5bf49ac16"],
Cell[32783, 758, 8188, 188, 356, "Input",ExpressionUUID->"a0d59af2-759a-487a-b63e-d2d14b73cd1d",
 InitializationCell->True],
Cell[40974, 948, 6255, 146, 329, "Input",ExpressionUUID->"7f2c99fd-a79f-46c2-854f-98e61ebec777"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47266, 1099, 249, 4, 31, "Subsection",ExpressionUUID->"b9fc50c2-dc66-4696-839b-23e9ccbcf6cb"],
Cell[47518, 1105, 6830, 154, 331, "Input",ExpressionUUID->"02076b1d-a114-4058-b10c-0074b1c0bf44",
 InitializationCell->True],
Cell[54351, 1261, 6863, 163, 359, "Input",ExpressionUUID->"3f57e62b-c21b-46a5-aac5-5e869eaa87ee"]
}, Closed]],
Cell[CellGroupData[{
Cell[61251, 1429, 275, 5, 23, "Subsection",ExpressionUUID->"81cfd11a-63a8-4205-8e64-8f4881ece817"],
Cell[61529, 1436, 6065, 135, 331, "Input",ExpressionUUID->"a7b5ee41-8585-4441-b62c-89d022f47a1c",
 InitializationCell->True],
Cell[67597, 1573, 5248, 120, 323, "Input",ExpressionUUID->"3329a8ad-9322-4b94-9584-392b163bb430"]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72906, 1700, 163, 3, 40, "Chapter",ExpressionUUID->"b45359a4-435a-48f5-938f-6624251f7dc8"],
Cell[CellGroupData[{
Cell[73094, 1707, 232, 4, 39, "Section",ExpressionUUID->"e1a8482c-beb3-4c41-b9f2-3acff2f366ec"],
Cell[73329, 1713, 328, 7, 29, "Input",ExpressionUUID->"c34c2e5d-fc0f-418f-b9c3-1a00606907ef"],
Cell[73660, 1722, 1285, 32, 80, "Input",ExpressionUUID->"98e4158d-9c35-4453-b846-9266ccd560a6"],
Cell[74948, 1756, 2720, 68, 221, "Input",ExpressionUUID->"9c70148c-55a4-4f21-a7c7-4a6c939615b7"],
Cell[77671, 1826, 1716, 40, 166, "Input",ExpressionUUID->"0055a277-a39a-4b5c-9683-a43ce79e216b"],
Cell[79390, 1868, 1963, 51, 181, "Input",ExpressionUUID->"b90739d0-bd4c-4baa-bbdf-b9da1653e5fc"],
Cell[81356, 1921, 15903, 330, 1204, "Input",ExpressionUUID->"000d09ba-085d-4cc6-a3bd-8ab73047b879"],
Cell[97262, 2253, 60035, 1243, 3381, "Input",ExpressionUUID->"bbb4c34a-71cf-44cc-a5d3-2d21634b59cd"],
Cell[CellGroupData[{
Cell[157322, 3500, 1108, 24, 78, "Input",ExpressionUUID->"21618124-c4e5-415b-a543-939f21650ade"],
Cell[CellGroupData[{
Cell[158455, 3528, 664, 11, 16, "Print",ExpressionUUID->"83f930e9-3d81-415f-a957-fb7da573d597"],
Cell[159122, 3541, 668, 11, 16, "Print",ExpressionUUID->"4b5ae8a7-21e5-43af-bb07-de8cb0202034"],
Cell[159793, 3554, 675, 11, 16, "Print",ExpressionUUID->"8eb6b023-ffef-414f-8d99-5cf1a573322f"],
Cell[160471, 3567, 672, 11, 16, "Print",ExpressionUUID->"d74d1917-b826-4153-941a-30695faecbf5"],
Cell[161146, 3580, 637, 11, 16, "Print",ExpressionUUID->"956e77a7-2d91-4e01-baf5-d817ee9f9efb"],
Cell[161786, 3593, 679, 12, 16, "Print",ExpressionUUID->"7bc54f67-4cea-41c3-ad6e-c325bdbba699"],
Cell[162468, 3607, 674, 12, 16, "Print",ExpressionUUID->"65426ea0-9023-481a-862f-afeffbf67a77"],
Cell[163145, 3621, 674, 12, 16, "Print",ExpressionUUID->"cc4c9cd8-ec00-4333-aca1-9e6bd0e595e9"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[163892, 3641, 162, 3, 40, "Chapter",ExpressionUUID->"e8c3cc19-732d-4100-ba41-4f741977ed46"],
Cell[164057, 3646, 231, 6, 27, "Input",ExpressionUUID->"9b9ea4fc-21b7-44a7-a56c-9624eb86aa03"],
Cell[164291, 3654, 151, 4, 30, "Code",ExpressionUUID->"404ab529-fa01-4a17-8d30-d78a744d6275"],
Cell[164445, 3660, 158, 4, 30, "Code",ExpressionUUID->"71cbb145-c03b-495b-a560-6fe322da1f14"]
}, Closed]]
}, Open  ]]
}
]
*)

