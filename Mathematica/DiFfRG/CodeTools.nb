(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    297551,       6640]
NotebookOptionsPosition[    287572,       6451]
NotebookOutlinePosition[    288360,       6477]
CellTagsIndexPosition[    288317,       6474]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["DiFfRG: Code Tools package", "Title",
 CellChangeTimes->{{3.919139788507444*^9, 
  3.919139800355089*^9}},ExpressionUUID->"255990ba-0600-4517-a841-\
3b30ef1076f1"],

Cell[CellGroupData[{

Cell["Package Setup", "Chapter",
 CellChangeTimes->{{3.919139903504201*^9, 
  3.919139906695078*^9}},ExpressionUUID->"2d5f9f27-5490-4bea-8ecf-\
1b321b723da0"],

Cell[CellGroupData[{

Cell["Setup and exports", "Section",
 CellChangeTimes->{{3.919928560443655*^9, 
  3.91992856291497*^9}},ExpressionUUID->"61eae6f8-8864-4150-9158-\
1ce7d9f393be"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<DiFfRG`CodeTools`\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Unprotect", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ClearAll", "[", "\"\<DiFfRG`CodeTools`Private`*\>\"", "]"}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.918571078410411*^9, 3.918571081926825*^9}, {
  3.932041360141122*^9, 3.932041375737691*^9}, {3.932041586550288*^9, 
  3.932041593365497*^9}},ExpressionUUID->"61eeed29-b199-412c-9a91-\
f659c54d031c"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"FlowKernel", "::", "usage"}], " ", "=", " ", 
    "\"\<FlowKernel[expr_,name_String,NT_String:\\\"auto\\\",addprefix_String:\
\\\"\\\"]\nMakes an equation into a lambda expression - of limited \
usefulness, but can be used together with LoopIntegrals::integrate and \
similar functions.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ExportCode", "::", "usage"}], " ", "=", " ", 
    "\"\<ExportCode[fileName_String,expression_String]\nWrites the given \
expression to disk and runs clang-format on it.\n\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CodeForm", "::", "usage"}], " ", "=", " ", 
    "\"\<CodeForm[expr_]\nObtain properly formatted and processed C++ code \
from an expression.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetCppNames", "::", "usage"}], " ", "=", " ", 
    "\"\<SetCppNames[rules___]\nSet additional replacement rules used when \
invoking CodeForm[expr].\n\nExample Call: \
SetCppNames[\\\"k\\\"->\\\"k_bosonic\\\", \\\"Arccos(\\\"->\\\"std::arccos(\\\
\"]\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"JuliaForm", "::", "usage"}], " ", "=", " ", 
    "\"\<CodeForm[expr_]\nObtain properly formatted and processed Julia code \
from an expression.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"UnicodeClip", "::", "usage"}], " ", "=", " ", 
    "\"\<UnicodeClip[expr_String]\nCopy a string as unicode into the \
clipboard. Useful when exporting to Julia.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeCMakeFile", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeCMakeFile[kernels_List]\nCreates a CMakeLists.txt inside the \
'flowDir' which you can set using SetFlowDir[dir_String]. This CMake file \
contains references to all kernels specified in the List 'kernels'. Make sure \
you have created all kernels before compiling!\nIf so, simply add the flow \
directory in the parent directory of the flow directory: \\n \
add_subdirectory(flows) \\n Note that this CMakeLists.txt exports its source \
files into parent scope as $flow_sources\nThus, to compile the flows, simply \
add them as source files:\n    add_executable(QCD QCD.cc \
${flow_sources})\>\""}], ";"}], "\n", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetFlowDirectory", "::", "usage"}], "=", 
   "\"\<SetFlowDirectory[dir]\nSet the current flow directory, i.e. where all \
generated files are saved. Default is ./flows/\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowFlowDirectory", "::", "usage"}], "=", 
    "\"\<ShowFlowDirectory[]\nShow the current flow directory, i.e. where all \
generated files are saved. Default is ./flows/\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeFlowClass", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeFlowClass[name_String,kernels_List]\nThis creates a file \
flows.hh inside the flow directory, containing a class with the specified \
name, as well as several other files. All defined kernels have a \
corresponding integrator object in this class.\nAutomatically calls \
MakeCMakeFile with the passed list of kernels.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeFlowClassFiniteT", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeFlowClassFiniteT[name_String,kernels_List]\nThis creates a file \
flows.hh inside the flow directory, containing a class with the specified \
name, as well as several other files. All defined kernels have a \
corresponding integrator object in this class.\nAutomatically calls \
MakeCMakeFile wiht the passed list of kernels.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MakeKernel", "::", "usage"}], " ", "=", " ", 
    "\"\<MakeKernel[kernel_Association, \
parameterList_List,integrandFlow_,constantFlow_:0., \
integrandDefinitions_String:\\\"\\\", constantDefinitions_String:\\\"\\\"]\n\
Make a kernel from a given flow equation, parmeter list and kernel. The \
kernel must be a valid specification of an integration kernel.\nThis Function \
creates an integrator that evaluates (constantFlow + \
\[Integral]integrandFlow). One can prepend additional c++ definitions to the \
flow equation by using the integrandDefinitions and constantDefinitions \
parameters. \nThese are prepended to the respective methods of the \
integration kernel, allowing one to e.g. define specific angles one needs for \
the flow code.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints4DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints4DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 4D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints4DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints4DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints4DP3[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 4D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints4DP3[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints3DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints3DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 3D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints3DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints3DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints3DP3[]\nObtain C++ code declaring angles for a \
three-point symmetric configuration in 3D.\nThe angles will have the names \
cosp1q, cosp2q and cosp3q.\nDeclareSymmetricPoints3DP3[computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints2DP4", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints2DP4[]\nObtain C++ code declaring angles for a \
four-point symmetric configuration in 2D.\nThe angles will have the names \
cosp1q, cosp2q, cosp3q and cosp4q.\nDeclareSymmetricPoints2DP4[computeType]\n\
Set the type of the declared C++ variables (should be double or \
float).\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareSymmetricPoints2DP3", "::", "usage"}], "=", 
    "\"\<DeclareSymmetricPoints2DP3[]\nObtain C++ code declaring angles for a \
three-point symmetric configuration in 2D.\nThe angles will have the names \
cosp1q, cosp2q and cosp3q.\nDeclareSymmetricPoints2DP3[computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DeclareAnglesP34Dpqr", "::", "usage"}], "=", 
    "\"\<DeclareAnglesP34Dpqr[q,p,r]\nObtain C++ code declaring angles for \
the angles in a full three-point function in 4D.\nThe angles will have the \
names cospq and cosqr, where q,p,r are replaced by the given Symbol names and \
ordered alphabetically.\nDeclareAnglesP34Dpqr[q,p,r,computeType]\nSet the \
type of the declared C++ variables (should be double or float).\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SafeFiniteTFunctions", "::", "usage"}], "=", "\"\<\>\""}], ";"}],
   "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowTypes", "::", "usage"}], "=", 
    "\"\<ShowTypes[]\nShow a list of all types available for use in a \
parameter list to make a kernel.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<AddCodeOptimizeFunctions[func1[__], func2[__],...]\nAdd the \
functions func1, func2, ... to the functions to be optimized out, i.e. \
calculated only once in auto-generated kernel code.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<ShowCodeOptimizeFunctions[]\nShow a list of all functions which \
DiFfRG will try to optimize out when generating C++ code.\>\""}], ";"}], 
  "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ClearCodeOptimizeFunctions", "::", "usage"}], "=", 
    "\"\<ClearCodeOptimizeFunctions[]\nRemove all optimization functions from \
the internal list\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"UseKernelOptimizations", "::", "usage"}], "=", 
    "\"\<UseKernelOptimizations[True]\nTurn on code optimizations in \
auto-generation of C++ code.\nUseKernelOptimizations[False]\nTurn off code \
optimizations in auto-generation of C++ code.\n\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetKernelDefinitions", "::", "usage"}], "=", 
    "\"\<SetKernelDefinitions[definitionCode_String] sets the kernel \
definitions to definitionCode.\nSetKernelDefinitions[] resets the kernel \
definitions to the standard.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ShowKernelDefinitions", "::", "usage"}], "=", 
    "\"\<ShowKernelDefinitions[]\nShow the currently specified kernel \
definitions code.\>\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddParameterType", "::", "usage"}], "=", 
    "\"\<AddParameterType[name,cppType,cppTypeAD,Reference,computeTypeName]\n\
Add a recognized parameter to the list of useable kernel parameter types.\n\>\
\""}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SetCodeParser", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "Code",
 CellChangeTimes->{{3.916637829669835*^9, 3.91663783796828*^9}, {
   3.916638110622831*^9, 3.916638118237995*^9}, {3.9167289728094*^9, 
   3.916728976539971*^9}, {3.916730910644607*^9, 3.916730924497292*^9}, {
   3.916731291036565*^9, 3.91673129222556*^9}, {3.9171682862057667`*^9, 
   3.917168294847966*^9}, {3.917353885713208*^9, 3.917353929246798*^9}, {
   3.918322794894466*^9, 3.91832279815382*^9}, {3.919139915548635*^9, 
   3.919139937406918*^9}, {3.919146552140621*^9, 3.919146555840046*^9}, {
   3.919154246370263*^9, 3.91915425459028*^9}, {3.919748849849753*^9, 
   3.919748862913927*^9}, {3.919795028449435*^9, 3.91979503207915*^9}, {
   3.919795193645524*^9, 3.919795204759042*^9}, {3.925555868202629*^9, 
   3.925555871229744*^9}, {3.925707942850168*^9, 3.925707949827313*^9}, {
   3.925707986615032*^9, 3.9257079888416*^9}, {3.925712046247765*^9, 
   3.925712049987134*^9}, {3.925909287252735*^9, 3.925909290473834*^9}, {
   3.927424632287867*^9, 3.927424637058543*^9}, {3.927459040847021*^9, 
   3.927459051062059*^9}, {3.929457727924595*^9, 3.929457759546459*^9}, {
   3.930749285586865*^9, 3.930749327685223*^9}, {3.930749373015257*^9, 
   3.930749424738744*^9}, {3.930749467151816*^9, 3.930750066729059*^9}, {
   3.930750124915172*^9, 3.9307501908273897`*^9}, {3.930750362233918*^9, 
   3.930750400020275*^9}, {3.930750446223989*^9, 3.930750462754278*^9}, {
   3.930997106209995*^9, 3.93099752442664*^9}, {3.930997591222265*^9, 
   3.930997606363578*^9}, {3.930997721012038*^9, 3.9309977532068453`*^9}, {
   3.9309977877347*^9, 3.930997796070214*^9}, 3.930997872225588*^9, 
   3.932042180233707*^9, {3.936719354588052*^9, 3.9367193683757477`*^9}, {
   3.937024573361062*^9, 3.937024576076627*^9}, 3.9382459184510107`*^9, {
   3.938670466135729*^9, 3.9386704700980473`*^9}, {3.9433561222163143`*^9, 
   3.943356212474441*^9}, {3.943356244052917*^9, 3.943356507237863*^9}, {
   3.9434347923639927`*^9, 3.943434867234779*^9}, 3.943442716581128*^9, {
   3.943458754267728*^9, 3.943458757107253*^9}, {3.943470327366053*^9, 
   3.943470334723653*^9}, {3.943470521450267*^9, 3.943470522810153*^9}, {
   3.943509738500535*^9, 3.943509984765916*^9}, {3.9435101021*^9, 
   3.943510236545765*^9}, {3.943510416455825*^9, 3.943510416620726*^9}, {
   3.943510457023076*^9, 3.943510479203768*^9}, {3.943510561164653*^9, 
   3.943510705178961*^9}, {3.943510908959456*^9, 3.943510950004882*^9}, {
   3.9461104880632677`*^9, 3.9461105424234533`*^9}, {3.953382707779393*^9, 
   3.95338272226712*^9}, 
   3.953382792646838*^9},ExpressionUUID->"e967b969-bd44-41d7-8598-\
8812e1394d8a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}]], "Code",
 CellChangeTimes->{
  3.941639860281678*^9, {3.9435101542129297`*^9, 
   3.943510158290436*^9}},ExpressionUUID->"334e210a-0008-4f8a-aa82-\
905e18a840c0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Formatting and saving C++ code", "Chapter",
 CellChangeTimes->{{3.916731510678001*^9, 3.916731522402523*^9}, {
  3.918570212039898*^9, 3.918570215507206*^9}, {3.918570373553621*^9, 
  3.918570375493225*^9}},ExpressionUUID->"337028bb-22a5-4c7a-abf1-\
dfc7beb47d0a"],

Cell[CellGroupData[{

Cell["C++ formatting", "Subsection",
 CellChangeTimes->{{3.918570624414493*^9, 
  3.918570646019106*^9}},ExpressionUUID->"34fe5e06-f143-4bae-9984-\
5a15e1d8db32"],

Cell[BoxData[{
 RowBox[{"Needs", "[", "\"\<SymbolicC`\>\"", "]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CodeFormatted", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"computeType_String", ":", "\"\<double\>\""}]}], "]"}], " ", ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "Powergen", ",", "Powery", ",", "Sqrty", ",", "RemoveFormat", ",", 
        "res"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{
        RowBox[{"Format", "[", 
         RowBox[{
          RowBox[{"Powergen", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ",", "CForm"}], "]"}], ":=", 
        RowBox[{"\"\<pow(\>\"", "~~", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", ",", "CForm"}], "]"}], "~~", "\"\<, \>\"", "~~", 
         RowBox[{"ToString", "[", 
          RowBox[{"b", ",", "CForm"}], "]"}], "~~", "\"\<)\>\""}]}], ";", 
       "\n", "\t", 
       RowBox[{
        RowBox[{"Format", "[", 
         RowBox[{
          RowBox[{"Powery", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ",", "CForm"}], "]"}], ":=", 
        RowBox[{"\"\<powr<\>\"", "~~", 
         RowBox[{"ToString", "[", 
          RowBox[{"b", ",", "CForm"}], "]"}], "~~", "\"\<>(\>\"", "~~", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", ",", "CForm"}], "]"}], "~~", "\"\<)\>\""}]}], ";", 
       "\n", "\t", 
       RowBox[{
        RowBox[{"Format", "[", 
         RowBox[{
          RowBox[{"Sqrty", "[", "a_", "]"}], ",", "CForm"}], "]"}], ":=", 
        RowBox[{"\"\<sqrt(\>\"", "~~", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", ",", "CForm"}], "]"}], "~~", "\"\<)\>\""}]}], ";", 
       "\n", "\n", "\t", 
       RowBox[{
        RowBox[{"RemoveFormat", "[", "exp_", "]"}], ":=", 
        RowBox[{"Module", "[", 
         RowBox[{
          RowBox[{"{", "ret", "}"}], ",", "\n", "\t\t", 
          RowBox[{
           RowBox[{"ret", "=", "exp"}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Max(\>\"", ":>", "\"\<max(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Min(\>\"", ":>", "\"\<min(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Re(\>\"", ":>", "\"\<real(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Im(\>\"", ":>", "\"\<imag(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Sqrt(\>\"", ":>", "\"\<sqrt(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Log(\>\"", ":>", "\"\<log(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Abs(\>\"", ":>", "\"\<abs(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<Complex(\>\"", ":>", 
                RowBox[{
                "\"\<complex<\>\"", "<>", "computeType", "<>", 
                 "\"\<>(\>\""}]}], "}"}]}], "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{"\"\<powr<1>(\>\"", ":>", "\"\<(\>\""}], "}"}]}], 
             "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"ret", "=", 
            RowBox[{"StringReplace", "[", 
             RowBox[{"ret", ",", 
              RowBox[{"{", 
               RowBox[{
               "\"\<HeavisideTheta(\>\"", ":>", "\"\<heaviside_theta(\>\""}], 
               "}"}]}], "]"}]}], ";", "\n", "\t\t", 
           RowBox[{"While", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringCount", "[", 
               RowBox[{"ret", ",", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<\\\\\>\"", ",", "\"\<\\\"\>\"", ",", "\"\< \>\""}], 
                 "}"}]}], "]"}], ">", "0"}], ",", "\n", "\t\t\t", 
             RowBox[{"ret", "=", 
              RowBox[{"StringReplace", "[", 
               RowBox[{"ret", ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"\"\<\\\\\>\"", "->", "\"\<\>\""}], ",", 
                  RowBox[{"\"\<\\\"\>\"", "->", "\"\<\>\""}], ",", 
                  RowBox[{"\"\< \>\"", "->", "\"\<\>\""}]}], "}"}]}], 
               "]"}]}]}], "\n", "\t\t", "]"}], ";", "\n", "\t\t", "ret"}]}], 
         "\n", "\t", "]"}]}], ";", "\n", "\n", "\t", 
       RowBox[{"res", "=", 
        RowBox[{
         RowBox[{"ToCCodeString", "[", "\n", "\t\t", 
          RowBox[{"CExpression", "[", "\n", "\t\t\t", 
           RowBox[{
            RowBox[{"expr", "//.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"Power", "[", 
                 RowBox[{"a_", ",", "b_Integer"}], "]"}], "->", 
                RowBox[{"Powery", "[", 
                 RowBox[{"a", ",", "b"}], "]"}]}], ",", " ", 
               RowBox[{
                RowBox[{"Power", "[", 
                 RowBox[{"a_", ",", 
                  RowBox[{"b_", "/;", 
                   RowBox[{"Element", "[", 
                    RowBox[{
                    RowBox[{"b", "+", 
                    RowBox[{"1", "/", "2"}]}], ",", "Integers"}], "]"}]}]}], 
                 "]"}], "->", 
                RowBox[{"Powery", "[", 
                 RowBox[{
                  RowBox[{"Sqrty", "[", "a", "]"}], ",", 
                  RowBox[{"2", "b"}]}], "]"}]}], ",", 
               RowBox[{
                RowBox[{"Power", "[", 
                 RowBox[{"a_", ",", "b_"}], "]"}], "->", 
                RowBox[{"Powergen", "[", 
                 RowBox[{"a", ",", "b"}], "]"}]}]}], "}"}]}], "//.", 
            RowBox[{
             RowBox[{"ArcTan", "[", 
              RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
             RowBox[{"Global`atan2", "[", 
              RowBox[{"a", ",", "b"}], "]"}]}]}], "\n", "\t\t", "]"}], "\n", 
          "\t", "]"}], "//", "RemoveFormat"}]}], ";", "\n", "\t", "\n", "\t", 
       
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"computeType", "==", "\"\<float\>\""}], ",", "\n", "\t", 
         RowBox[{
          RowBox[{"res", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"res", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"a", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<.\>\"", "~~", 
               RowBox[{"b", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<e-\>\"", "~~", 
               
               RowBox[{"c", ":", 
                RowBox[{"DigitCharacter", ".."}]}]}], ":>", 
              RowBox[{"a", "~~", "\"\<.\>\"", "~~", "b", "~~", "\"\<*\>\"", "~~", 
               RowBox[{"ToString", "[", 
                RowBox[{"DecimalForm", "[", 
                 RowBox[{
                  SuperscriptBox["10", 
                   RowBox[{"-", 
                    RowBox[{"ToExpression", "[", "c", "]"}]}]], "//", "N"}], 
                 "]"}], "]"}]}]}]}], "]"}]}], ";", "\n", "\t", 
          RowBox[{"res", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"res", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"a", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<.\>\"", "~~", 
               "\"\<e-\>\"", "~~", 
               RowBox[{"c", ":", 
                RowBox[{"DigitCharacter", ".."}]}]}], ":>", 
              RowBox[{"a", "~~", "\"\<.\>\"", "~~", "\"\<*\>\"", "~~", 
               RowBox[{"ToString", "[", 
                RowBox[{"DecimalForm", "[", 
                 RowBox[{
                  SuperscriptBox["10", 
                   RowBox[{"-", 
                    RowBox[{"ToExpression", "[", "c", "]"}]}]], "//", "N"}], 
                 "]"}], "]"}]}]}]}], "]"}]}], ";", "\n", "\t", 
          RowBox[{"res", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"res", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"a", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<.\>\"", "~~", 
               RowBox[{"b", ":", 
                RowBox[{"DigitCharacter", ".."}]}]}], ":>", 
              RowBox[{
              "a", "~~", "\"\<.\>\"", "~~", "b", "~~", "\"\<f\>\""}]}]}], 
            "]"}]}], ";", "\n", "\t", 
          RowBox[{"res", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"res", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"a", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<.\>\"", "~~", 
               RowBox[{"b", ":", 
                RowBox[{"Except", "[", "DigitCharacter", "]"}]}]}], ":>", 
              RowBox[{"a", "~~", "\"\<.f\>\"", "~~", "b"}]}]}], "]"}]}], ";", 
          "\n", "\t", 
          RowBox[{"res", "=", 
           RowBox[{"StringReplace", "[", 
            RowBox[{"res", ",", 
             RowBox[{
              RowBox[{
               RowBox[{"a", ":", 
                RowBox[{"DigitCharacter", ".."}]}], "~~", "\"\<.\>\"", "~~", 
               "EndOfString"}], ":>", 
              RowBox[{"a", "~~", "\"\<.f\>\""}]}]}], "]"}]}], ";"}]}], "\n", 
        "\t", "]"}], ";", "\n", "\t", 
       RowBox[{"res", "=", 
        RowBox[{"StringReplace", "[", 
         RowBox[{"res", ",", 
          RowBox[{"{", 
           RowBox[{"\"\<Complex(\>\"", ":>", 
            RowBox[{
            "\"\<complex<\>\"", "<>", "computeType", "<>", "\"\<>(\>\""}]}], 
           "}"}]}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"Return", "[", 
        RowBox[{"res", "//", "RemoveFormat"}], "]"}], ";"}]}], "\n", "]"}]}], 
   ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"CppNames", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"SetCppNames", "[", "rules___", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"baseList", ",", "ruleList"}], "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"baseList", "=", 
        RowBox[{"{", "\n", "\t\t", 
         RowBox[{
          RowBox[{"\"\<Sin(\>\"", "->", "\"\<sin(\>\""}], ",", "\n", "\t\t", 
          RowBox[{"\"\<Cos(\>\"", "->", "\"\<cos(\>\""}], ",", "\n", "\t\t", 
          RowBox[{"\"\<Tan(\>\"", "->", "\"\<tan(\>\""}], ",", "\n", "\t\t", 
          RowBox[{"\"\<Cot(\>\"", "->", "\"\<cot(\>\""}], ",", "\n", "\t\t", 
          RowBox[{"\"\<q0f\>\"", "->", "\"\<(q0 + M_PI * T)\>\""}]}], "\n", 
         "\t", "}"}]}], ";", "\n", "\t", 
       RowBox[{"ruleList", "=", 
        RowBox[{"{", "rules", "}"}]}], ";", "\n", "\t", 
       RowBox[{"CppNames", "=", 
        RowBox[{"Join", "[", 
         RowBox[{"ruleList", ",", "baseList"}], "]"}]}], ";"}]}], "\n", 
     "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"SetCppNames", "[", "]"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CodeForm", "[", 
     RowBox[{"expr_", ",", 
      RowBox[{"computeType_String", ":", "\"\<double\>\""}]}], "]"}], ":=", 
    RowBox[{"StringDelete", "[", 
     RowBox[{
      RowBox[{"StringReplace", "[", 
       RowBox[{
        RowBox[{"CodeFormatted", "[", 
         RowBox[{
          RowBox[{"N", "[", "expr", "]"}], ",", "computeType"}], "]"}], ",", 
        "CppNames"}], "]"}], ",", 
      RowBox[{"\"\<\\n\>\"", "|", "\"\<\\r\>\""}]}], "]"}]}], ";"}], "\n", 
  "   "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SafeFiniteTFunctions", "[", 
    RowBox[{"expr_", ",", "T_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"expr", "//.", 
      RowBox[{"{", "\n", 
       RowBox[{
        RowBox[{
         RowBox[{"Tanh", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Tanh", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Tanh", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Tanh", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<TanhFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", "\n", 
        RowBox[{
         RowBox[{"Coth", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Coth", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Coth", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Coth", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CothFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", "\n", 
        RowBox[{
         RowBox[{"Csch", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Csch", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Csch", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Csch", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<CschFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}], ",", "\n", 
        RowBox[{
         RowBox[{"Sech", "[", 
          FractionBox["a_", 
           RowBox[{"2", " ", "T"}]], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", "T"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Sech", "[", 
          FractionBox["a_", "T"], "]"}], ":>", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
          RowBox[{"a", ",", 
           RowBox[{"2", "T"}]}], "]"}]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sech", "[", 
           FractionBox["a_", 
            RowBox[{"2", " ", "T"}]], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", "T"}], "]"}], "n"]}], ",", 
        RowBox[{
         SuperscriptBox[
          RowBox[{"Sech", "[", 
           FractionBox["a_", "T"], "]"}], "n_"], ":>", 
         SuperscriptBox[
          RowBox[{
           RowBox[{"Symbol", "[", "\"\<SechFiniteT\>\"", "]"}], "[", 
           RowBox[{"a", ",", 
            RowBox[{"2", "T"}]}], "]"}], "n"]}]}], "\n", "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"clangFormatExists", "=", 
   RowBox[{
    RowBox[{"Quiet", "[", 
     RowBox[{"RunProcess", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<clang-format\>\"", ",", "\"\<--help\>\""}], "}"}], "]"}], 
     "]"}], "=!=", "$Failed"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"CreateClangFormat", "[", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"Not", "@", 
       RowBox[{"FileExistsQ", "[", "\"\<.clang-format\>\"", "]"}]}], ",", 
      "\n", 
      RowBox[{"Export", "[", 
       RowBox[{
       "\"\<.clang-format\>\"", ",", "\n", 
        "\"\<BasedOnStyle: LLVM\nUseTab: Never\nIndentWidth: 2\nTabWidth: 2\n\
BreakBeforeBraces: Linux\nAllowShortIfStatementsOnASingleLine: true\n\
IndentCaseLabels: false\nColumnLimit: 120\nAccessModifierOffset: -2\n\
NamespaceIndentation: All\nAllowShortEnumsOnASingleLine: true\n\>\"", ",", 
        "\n", "\"\<Text\>\""}], "]"}]}], "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"ExportCode", "[", 
   RowBox[{"fileName_String", ",", "expression_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "tmpfileName", "}"}], ",", "\n", "\t", 
    RowBox[{
     RowBox[{"tmpfileName", "=", 
      RowBox[{"fileName", "<>", "\"\<.tmpcode\>\""}]}], ";", "\n", "\t", 
     RowBox[{"Export", "[", 
      RowBox[{"tmpfileName", ",", "expression", ",", "\"\<Text\>\""}], "]"}], 
     ";", "\n", "\t", 
     RowBox[{"If", "[", 
      RowBox[{"clangFormatExists", ",", "\n", "\t\t", 
       RowBox[{
        RowBox[{"CreateClangFormat", "[", "]"}], ";", "\n", "\t\t", 
        RowBox[{"RunProcess", "[", 
         RowBox[{"$SystemShell", ",", " ", "All", ",", " ", 
          RowBox[{
          "\"\<clang-format \>\"", "<>", "tmpfileName", "<>", "\"\< > \>\"", "<>",
            "tmpfileName", "<>", "\"\<_formatted && mv \>\"", "<>", 
           "tmpfileName", "<>", "\"\<_formatted \>\"", "<>", 
           "tmpfileName"}]}], "]"}], ";"}]}], "\n", "\t", "]"}], ";", "\n", 
     "\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"FileExistsQ", "[", "fileName", "]"}], ",", "\n", "\t\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Import", "[", 
           RowBox[{"fileName", ",", "\"\<Text\>\""}], "]"}], "==", 
          RowBox[{"Import", "[", 
           RowBox[{"tmpfileName", ",", "\"\<Text\>\""}], "]"}]}], ",", "\n", 
         "\t\t\t", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"fileName", "<>", "\"\< unchanged\>\""}], "]"}], ";", "\n",
           "\t\t\t", 
          RowBox[{"RunProcess", "[", 
           RowBox[{"$SystemShell", ",", " ", "All", ",", " ", 
            RowBox[{"\"\<rm \>\"", "<>", "tmpfileName"}]}], "]"}]}], ",", 
         "\n", "\t\t\t", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Exported to \>\"", "<>", "fileName"}], "]"}], ";", 
          "\n", "\t\t\t", 
          RowBox[{"RunProcess", "[", 
           RowBox[{"$SystemShell", ",", " ", "All", ",", " ", 
            RowBox[{
            "\"\<mv \>\"", "<>", "tmpfileName", "<>", "\"\< \>\"", "<>", 
             "fileName"}]}], "]"}]}]}], "\n", "\t\t", "]"}], ",", "\n", 
       "\t\t", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Exported to \>\"", "<>", "fileName"}], "]"}], ";", "\n",
         "\t\t", 
        RowBox[{"RunProcess", "[", 
         RowBox[{"$SystemShell", ",", " ", "All", ",", " ", 
          RowBox[{
          "\"\<mv \>\"", "<>", "tmpfileName", "<>", "\"\< \>\"", "<>", 
           "fileName"}]}], "]"}]}]}], "\n", "\t", "]"}]}]}], "\n", 
   "]"}]}]}], "Code",
 CellChangeTimes->{{3.9183227374649057`*^9, 3.9183227894076014`*^9}, {
   3.918322863153208*^9, 3.918322878900425*^9}, {3.918384755143515*^9, 
   3.91838477018717*^9}, {3.918384814882266*^9, 3.918384818322689*^9}, {
   3.918570593189097*^9, 3.918570594333875*^9}, {3.91871998848396*^9, 
   3.918719995851115*^9}, {3.918720708340906*^9, 3.918720716415075*^9}, {
   3.919152458929375*^9, 3.919152461909113*^9}, {3.919161604045773*^9, 
   3.919161623923659*^9}, {3.919927319206914*^9, 3.919927346261128*^9}, {
   3.9252829129765244`*^9, 3.92528292380034*^9}, {3.925283050748022*^9, 
   3.925283060616178*^9}, 3.925560389445086*^9, {3.92570772396732*^9, 
   3.925707746181615*^9}, {3.927259728801195*^9, 3.927259782778897*^9}, {
   3.92726005295629*^9, 3.927260229903634*^9}, {3.9272603747037973`*^9, 
   3.9272603782268*^9}, {3.927260660135363*^9, 3.927260706646351*^9}, {
   3.927260743082341*^9, 3.927260803315909*^9}, {3.9272608739437733`*^9, 
   3.9272609336344757`*^9}, {3.927260980147702*^9, 3.9272609803307877`*^9}, {
   3.927261206282289*^9, 3.927261336658729*^9}, {3.9272614541958857`*^9, 
   3.927261476324284*^9}, {3.927261506641202*^9, 3.927261511145152*^9}, {
   3.927261548537051*^9, 3.9272615539441*^9}, {3.927612046913769*^9, 
   3.927612110210719*^9}, {3.927612194254174*^9, 3.92761219481698*^9}, {
   3.927703447146445*^9, 3.927703453657585*^9}, {3.929586324894317*^9, 
   3.929586340488901*^9}, {3.929762972024137*^9, 3.929762982969396*^9}, {
   3.931401932269908*^9, 3.931401938884918*^9}, {3.9333010557893*^9, 
   3.933301101917397*^9}, {3.933301133804902*^9, 3.933301395756246*^9}, {
   3.9333015142686033`*^9, 3.933301546995504*^9}, {3.9333056467652493`*^9, 
   3.933305654509104*^9}, {3.9359274932754583`*^9, 3.935927495997527*^9}, {
   3.935927527104536*^9, 3.935927553941113*^9}, {3.9359284959172792`*^9, 
   3.935928497175605*^9}, {3.937409070107874*^9, 3.937409070347679*^9}, {
   3.938241390414969*^9, 3.9382414096543713`*^9}, {3.938785626218605*^9, 
   3.938785692516264*^9}, {3.941637908672159*^9, 3.9416379090805197`*^9}, {
   3.941638223745199*^9, 3.9416383100088863`*^9}, {3.941638417493546*^9, 
   3.941638417649281*^9}, {3.941639593732829*^9, 3.941639602405526*^9}, 
   3.9416399657717133`*^9, {3.94648489702761*^9, 3.946484968139174*^9}, {
   3.9464852094918013`*^9, 3.946485312659563*^9}, 3.946485394744317*^9, {
   3.9488261934912663`*^9, 
   3.948826202298699*^9}},ExpressionUUID->"f7ee6a73-23f9-402d-9c49-\
abbbd26f22a2"]
}, Closed]],

Cell[CellGroupData[{

Cell["Make Code to a lambda for use with old integrators", "Subsection",
 CellChangeTimes->{{3.9185703244436803`*^9, 
  3.918570335706668*^9}},ExpressionUUID->"948177c6-784c-493a-a7ca-\
2aa9f473b46c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"FlowKernel", "[", 
   RowBox[{"expr_", ",", "name_String", ",", 
    RowBox[{"NT_String", ":", "\"\<auto\>\""}], ",", 
    RowBox[{"addprefix_String", ":", "\"\<\>\""}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"head", ",", "prefix", ",", "integrand"}], "}"}], ",", "\n", 
    "\t", 
    RowBox[{
     RowBox[{"head", "=", 
      RowBox[{
      "\"\<auto \>\"", "~~", "name", "~~", 
       "\"\<_kernel = [=, this](const double q2) -> \>\"", "~~", "NT", "~~", 
       "\"\< {\\n\>\""}]}], ";", "\n", "\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Symbol", "[", "\"\<q0\>\"", "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}], "||", 
        RowBox[{"MemberQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Symbol", "[", "\"\<q0f\>\"", "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}]}], ",", 
       RowBox[{
        RowBox[{"head", "=", 
         RowBox[{
         "\"\<auto \>\"", "~~", "name", "~~", 
          "\"\<_kernel = [=, this](const double q2, const double q0) -> \>\"",
           "~~", "NT", "~~", "\"\< {\\n\>\""}]}], ";"}]}], "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Symbol", "[", "\"\<cos\>\"", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{
        RowBox[{"head", "=", 
         RowBox[{
         "\"\<auto \>\"", "~~", "name", "~~", 
          "\"\<_kernel = [=, this](const double q2, const double cos) -> \
\>\"", "~~", "NT", "~~", "\"\< {\\n\>\""}]}], ";"}]}], "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"expr", ",", 
          RowBox[{"Symbol", "[", "\"\<cos\>\"", "]"}], ",", 
          RowBox[{"-", "1"}]}], "]"}], "&&", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"Symbol", "[", "\"\<q0\>\"", "]"}], ",", 
            RowBox[{"-", "1"}]}], "]"}], "||", 
          RowBox[{"MemberQ", "[", 
           RowBox[{"expr", ",", 
            RowBox[{"Symbol", "[", "\"\<q0f\>\"", "]"}], ",", 
            RowBox[{"-", "1"}]}], "]"}]}], ")"}]}], ",", 
       RowBox[{
        RowBox[{"head", "=", 
         RowBox[{
         "\"\<auto \>\"", "~~", "name", "~~", 
          "\"\<_kernel = [=, this](const double q2, const double cos, const \
double q0) -> \>\"", "~~", "NT", "~~", "\"\< {\\n\>\""}]}], ";"}]}], "]"}], 
     ";", "\n", "\n", "\t", 
     RowBox[{"prefix", "=", "\"\<\>\""}], ";", "\n", "\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Symbol", "[", "\"\<q\>\"", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", "\"\<  const double q = sqrt(q2);\\n\>\""}]}]}], 
      "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{"Symbol", "[", "\"\<q0f\>\"", "]"}], ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", 
         "\"\<  const double q0f = q0 + M_PI * prm.T;\\n\>\""}]}]}], "]"}], 
     ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<RB\>\"", "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<k\>\"", "]"}], "^", "2"}], ",", 
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<q\>\"", "]"}], "^", "2"}]}], "]"}], 
         ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", 
         "\"\<  const double RB = RB(powr<2>(k), q2);\\n\>\""}]}]}], "]"}], 
     ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<RBdot\>\"", "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<k\>\"", "]"}], "^", "2"}], ",", 
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<q\>\"", "]"}], "^", "2"}]}], "]"}], 
         ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", 
         "\"\<  const double RBdot = RBdot(powr<2>(k), q2);\\n\>\""}]}]}], 
      "]"}], ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<RF\>\"", "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<k\>\"", "]"}], "^", "2"}], ",", 
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<q\>\"", "]"}], "^", "2"}]}], "]"}], 
         ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", 
         "\"\<  const double RF = RF(powr<2>(k), q2);\\n\>\""}]}]}], "]"}], 
     ";", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"expr", ",", 
         RowBox[{
          RowBox[{"Symbol", "[", "\"\<RFdot\>\"", "]"}], "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<k\>\"", "]"}], "^", "2"}], ",", 
           RowBox[{
            RowBox[{"Symbol", "[", "\"\<q\>\"", "]"}], "^", "2"}]}], "]"}], 
         ",", 
         RowBox[{"-", "1"}]}], "]"}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{
        "prefix", "~~", 
         "\"\<  const double RFdot = RFdot(powr<2>(k), q2);\\n\>\""}]}]}], 
      "]"}], ";", "\n", 
     RowBox[{"prefix", "=", 
      RowBox[{"prefix", "~~", "addprefix"}]}], ";", "\n", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"prefix", "!=", "\"\<\>\""}], ",", 
       RowBox[{"prefix", "=", 
        RowBox[{"prefix", "~~", "\"\<\\n\>\""}]}]}], "]"}], ";", "\n", "\n", 
     RowBox[{"integrand", "=", 
      RowBox[{"\"\<  return real(\>\"", "~~", 
       RowBox[{"CodeForm", "[", "expr", "]"}], "~~", "\"\<);\\n\>\""}]}], ";",
      "\n", "\n", 
     RowBox[{
     "head", "~~", "prefix", "~~", "integrand", "~~", "\"\<};\>\""}]}]}], 
   "\n", "]"}]}]], "Code",
 CellLabel->"In[45]:=",ExpressionUUID->"d9f5e016-4e8a-496b-b503-a2aecdf57df3"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["General Definitions and structural methods", "Chapter",
 CellChangeTimes->{{3.918570412954754*^9, 
  3.918570433695428*^9}},ExpressionUUID->"e84729ed-8582-435d-b0b5-\
b57d953a283a"],

Cell[CellGroupData[{

Cell["Type definitions", "Section",
 CellChangeTimes->{{3.918570230283297*^9, 
  3.918570232088829*^9}},ExpressionUUID->"fe336611-c5eb-4640-8785-\
3416a0106c98"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ArgType", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Constant\>\"", "->", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Variable\>\"", "->", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<ComplexConstant\>\"", "->", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<ComplexVariable\>\"", "->", "\"\<\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex1D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex2D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex3D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex3DLogLinLin\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Function1D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Function2D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Function2DLinLin\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Function3D\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Function3DLogLinLin\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex1DBosonicFT\>\"", "->", "\"\<&\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<FunctionTex1DFermionicFT\>\"", "->", "\"\<&\>\""}]}], "\n", 
    "|>"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"$CppType", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Constant\>\"", "->", "\"\<$computeType\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Variable\>\"", "->", "\"\<$computeType\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<ComplexConstant\>\"", "->", "\"\<complex<$computeType>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<ComplexVariable\>\"", "->", "\"\<complex<$computeType>\>\""}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex1D\>\"", "->", 
      "\"\<TexLinearInterpolator1D<double, LogarithmicCoordinates1D<float>>\>\
\""}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex2D\>\"", "->", 
      "\"\<TexLinearInterpolator2D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex2DLinLin\>\"", "->", 
      "\"\<TexLinearInterpolator2D<double, \
CoordinatePackND<LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex3D\>\"", "->", 
      "\"\<TexLinearInterpolator3D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>>>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex3DLogLinLin\>\"", "->", 
      "\"\<TexLinearInterpolator3D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function1D\>\"", "->", 
      "\"\<LinearInterpolator1D<double, \
LogarithmicCoordinates1D<float>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function2D\>\"", "->", 
      "\"\<LinearInterpolator2D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function2DLinLin\>\"", "->", 
      "\"\<LinearInterpolator2D<double, \
CoordinatePackND<LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function3D\>\"", "->", 
      "\"\<LinearInterpolator3D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>>>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function3DLogLinLin\>\"", "->", 
      "\"\<LinearInterpolator3D<double, \
CoordinatePackND<LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex1DBosonicFT\>\"", "->", 
      "\"\<TexLinearInterpolator1DStack<double, \
BosonicCoordinates1DFiniteT<int, float>>\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex1DFermionicFT\>\"", "->", 
      "\"\<TexLinearInterpolator1DStack<double, \
FermionicCoordinates1DFiniteT<int, float>>\>\""}]}], "\n", "|>"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"CppType", "[", "computeType_String", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"StringReplace", "[", 
      RowBox[{"#", ",", 
       RowBox[{"\"\<$computeType\>\"", "->", "computeType"}]}], "]"}], "&"}], 
    ",", "$CppType"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$CppTypeAD", "=", 
   RowBox[{"<|", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Constant\>\"", "->", "\"\<$computeType\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Variable\>\"", "->", "\"\<autodiff::real\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<ComplexConstant\>\"", "->", "\"\<complex<$computeType>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<ComplexVariable\>\"", "->", "\"\<complex<autodiff::real>\>\""}], 
     ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex1D\>\"", "->", 
      "\"\<TexLinearInterpolator1D<autodiff::real, \
LogarithmicCoordinates1D<float>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex2D\>\"", "->", 
      "\"\<TexLinearInterpolator2D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex2DLinLin\>\"", "->", 
      "\"\<TexLinearInterpolator2D<autodiff::real, \
CoordinatePackND<LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex3D\>\"", "->", 
      "\"\<TexLinearInterpolator3D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>>>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex3DLogLinLin\>\"", "->", 
      "\"\<TexLinearInterpolator3D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function1D\>\"", "->", 
      "\"\<LinearInterpolator1D<autodiff::real, \
LogarithmicCoordinates1D<float>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function2D\>\"", "->", 
      "\"\<LinearInterpolator2D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function2DLinLin\>\"", "->", 
      "\"\<LinearInterpolator2D<autodiff::real, \
CoordinatePackND<LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function3D\>\"", "->", 
      "\"\<LinearInterpolator3D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, \
LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>>>\>\""}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<Function3DLogLinLin\>\"", "->", 
      "\"\<LinearInterpolator3D<autodiff::real, \
CoordinatePackND<LogarithmicCoordinates1D<float>, LinearCoordinates1D<float>, \
LinearCoordinates1D<float>>>\>\""}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
     "\"\<FunctionTex1DBosonicFT\>\"", "->", 
      "\"\<TexLinearInterpolator1DStack<autodiff::real, \
BosonicCoordinates1DFiniteT<int, float>>&\>\""}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
     "\"\<FunctionTex1DFermionicFT\>\"", "->", 
      "\"\<TexLinearInterpolator1DStack<autodiff::real, \
FermionicCoordinates1DFiniteT<int, float>>&\>\""}]}], "\n", "|>"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"CppTypeAD", "[", "computeType_String", "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"StringReplace", "[", 
       RowBox[{"#", ",", 
        RowBox[{"\"\<$computeType\>\"", "->", "computeType"}]}], "]"}], "&"}],
      ",", "$CppTypeAD"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"AddParameterType", "[", 
     RowBox[{
     "name_String", ",", "cppType_String", ",", "cppTypeAD_String", ",", 
      RowBox[{"Reference_", ":", "True"}], ",", 
      RowBox[{"computeTypeName_String", ":", "\"\<$computeType\>\""}]}], 
     "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"Keys", "[", "ArgType", "]"}], ",", "name"}], "]"}], "||", 
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"Keys", "[", "$CppType", "]"}], ",", "name"}], "]"}], "||", 
          RowBox[{"MemberQ", "[", 
           RowBox[{
            RowBox[{"Keys", "[", "$CppTypeAD", "]"}], ",", "name"}], "]"}]}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
           "\"\<Parameter type with name \\\"\>\"", "<>", "name", "<>", 
            "\"\<\\\" already exists!\>\""}], "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"Reference", ",", "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"ArgType", ",", 
           RowBox[{"name", "->", "\"\<&\>\""}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"AppendTo", "[", 
          RowBox[{"ArgType", ",", 
           RowBox[{"name", "->", "\"\<\>\""}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"$CppType", ",", 
         RowBox[{"name", "->", "cppType"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"AppendTo", "[", 
        RowBox[{"$CppTypeAD", ",", 
         RowBox[{"name", "->", "cppTypeAD"}]}], "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowTypes", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Available argument types (for double) are: \>\"", ",", 
       RowBox[{"Dataset", "[", 
        RowBox[{
         RowBox[{"Association", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"#", "->", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"$CppType", "[", "#", "]"}], ",", 
                 RowBox[{"$CppTypeAD", "[", "#", "]"}]}], "}"}]}], "}"}], 
             "&"}], ",", 
            RowBox[{"Keys", "[", "$CppType", "]"}]}], "]"}], "]"}], ",", 
         RowBox[{"MaxItems", "->", "20000"}]}], "]"}]}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.918570474758263*^9, 3.918570490457319*^9}, {
   3.919150688934251*^9, 3.919150691061182*^9}, {3.919794548586405*^9, 
   3.9197946117901497`*^9}, {3.919794710482575*^9, 3.919794712561692*^9}, {
   3.91979491227238*^9, 3.919795020469885*^9}, {3.919795209304199*^9, 
   3.919795236523072*^9}, {3.924152296537065*^9, 3.92415234502906*^9}, {
   3.924580606719984*^9, 3.924580611302719*^9}, {3.924839342011119*^9, 
   3.924839418577333*^9}, {3.924839491413197*^9, 3.924839498235841*^9}, {
   3.924839534840849*^9, 3.924839580172714*^9}, {3.924850746645026*^9, 
   3.924850769709311*^9}, {3.925555408161371*^9, 3.925555413628748*^9}, {
   3.925555496169681*^9, 3.9255555186291733`*^9}, {3.9255555696917877`*^9, 
   3.92555573178128*^9}, {3.925555775700901*^9, 3.92555577585712*^9}, {
   3.925555981571697*^9, 3.925556004879518*^9}, {3.925708019438201*^9, 
   3.92570802295324*^9}, {3.9274590645704403`*^9, 3.927459100290112*^9}, 
   3.927459147521287*^9, {3.927459784307003*^9, 3.92745978863069*^9}, {
   3.927612444310102*^9, 3.927612474800035*^9}, {3.936724169923994*^9, 
   3.936724255479931*^9}, {3.9387851582207127`*^9, 3.9387851806866827`*^9}, {
   3.9387861528601837`*^9, 3.938786196432082*^9}, {3.938787485468904*^9, 
   3.938787493727853*^9}, {3.946102444166375*^9, 3.946102719398613*^9}, {
   3.946102759338822*^9, 3.946102955726715*^9}, {3.9461029888746643`*^9, 
   3.9461030180429*^9}, {3.946103050308551*^9, 3.9461030544076223`*^9}, {
   3.94610311517126*^9, 3.946103164187114*^9}, {3.946109316735325*^9, 
   3.946109351311309*^9}, {3.946109445779978*^9, 3.946109562000149*^9}, {
   3.946109608151771*^9, 3.946109629759781*^9}, {3.946109684967546*^9, 
   3.94610972101198*^9}, {3.946109774920075*^9, 3.946109883247389*^9}, {
   3.946109914457368*^9, 3.946109922260346*^9}, {3.946110003089876*^9, 
   3.9461100767717257`*^9}, {3.946110127280327*^9, 3.946110225553981*^9}, {
   3.946110344284852*^9, 3.946110362912292*^9}, {3.946110477247488*^9, 
   3.946110483847475*^9}, 3.946110629817834*^9, {3.9461121537576637`*^9, 
   3.9461121686499357`*^9}},ExpressionUUID->"e0865668-fd95-406e-8d16-\
597ffc83cce7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"GridSelector", "[", "kernel_", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Return", "@", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "==", 
           "\"\<CartesianQuadrature\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], ",", 
            "\[IndentingNewLine]", "1", ",", "\"\<grid_size_int\>\"", ",", 
            "\[IndentingNewLine]", "2", ",", 
            "\"\<grid_sizes_2D_cartesian_int\>\"", ",", "\[IndentingNewLine]",
             "3", ",", "\"\<grid_sizes_3D_cartesian_int\>\"", ",", 
            "\[IndentingNewLine]", "_", ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<CartesianQuadrature has wrong dimension!\>\"",
               "]"}], ";", 
             RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Switch", "[", 
           RowBox[{
            RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], ",", 
            "\[IndentingNewLine]", "0", ",", "\"\<grid_size_int\>\"", ",", 
            "\[IndentingNewLine]", "1", ",", "\"\<grid_sizes_angle_int\>\"", 
            ",", "\[IndentingNewLine]", "2", ",", "\"\<grid_sizes_3D_int\>\"",
             ",", "\[IndentingNewLine]", "3", ",", 
            "\"\<grid_sizes_4D_int\>\""}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";"}]}], "\[IndentingNewLine]", 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GridSelectorFiniteT", "=", 
    RowBox[{"<|", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"0", "->", "\"\<grid_sizes_int_fT\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"1", "->", "\"\<grid_sizes_angle_int_fT\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"2", "->", "\"\<grid_sizes_4D_int_fT\>\""}]}], 
     "\[IndentingNewLine]", "|>"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeviceChoice", "[", "\"\<CPU\>\"", "]"}], "=", "\"\<TBB\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeviceChoice", "[", "\"\<TBB\>\"", "]"}], "=", "\"\<TBB\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"DeviceChoice", "[", "\"\<GPU\>\"", "]"}], "=", "\"\<GPU\>\""}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.946110633791431*^9, 3.946110634591062*^9}, {
  3.9461412308609247`*^9, 3.946141353385625*^9}, {3.946141452429474*^9, 
  3.946141506361285*^9}, {3.9461415370135098`*^9, 3.946141537993731*^9}, {
  3.946141591118038*^9, 3.9461416099933*^9}, {3.946141680869418*^9, 
  3.9461417268180323`*^9}, {3.948718553532485*^9, 
  3.948718555716557*^9}},ExpressionUUID->"f45f2f7c-00b0-422c-b938-\
377d2da7520e"]
}, Closed]],

Cell[CellGroupData[{

Cell["Folder setup", "Section",
 CellChangeTimes->{{3.919748795301685*^9, 
  3.919748796510569*^9}},ExpressionUUID->"e3370f84-23df-49af-8ad2-\
b13a8cd01695"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"flowDir", "=", 
   RowBox[{
    RowBox[{"If", "[", 
     RowBox[{"$Notebooks", ",", 
      RowBox[{"NotebookDirectory", "[", "]"}], ",", 
      RowBox[{"Directory", "[", "]"}]}], "]"}], "<>", "\"\<flows/\>\""}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetFlowDirectory", "[", "dir_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{"flowDir", "=", "dir"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowFlowDirectory", "[", "]"}], ":=", 
   RowBox[{"Print", "[", "flowDir", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"Print", "[", 
  RowBox[{"\"\<Flow output directory: \>\"", "<>", "flowDir"}], 
  "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.919748800954547*^9, 3.919748841014795*^9}, {
   3.919748963867602*^9, 3.919748982212854*^9}, {3.919795242470355*^9, 
   3.919795249427845*^9}, {3.921273776564588*^9, 3.921273776822373*^9}, 
   3.921273910863167*^9, {3.921273974096614*^9, 3.921273984273489*^9}, {
   3.930997243068274*^9, 3.930997249479556*^9}, 
   3.9358436315858*^9},ExpressionUUID->"bd614719-a216-4b2c-9de9-a8b815cc9ea5"],

Cell[BoxData["\<\"Flow output directory: \
/home/franz/Documents/Uni/Code/DiFfRG/DiFfRG/Mathematica/DiFfRG/Kernel//flows/\
\"\>"], "Print",
 CellChangeTimes->{3.9248497606542063`*^9},
 CellLabel->
  "During evaluation of \
In[195]:=",ExpressionUUID->"65d59a2b-50e4-43c5-9ad1-e9e34093a585"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["CMake setup", "Section",
 CellChangeTimes->{{3.918570280718567*^9, 
  3.918570305622134*^9}},ExpressionUUID->"44bbcb70-c7f7-442b-8def-\
82fff8bd0ea7"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeCMakeFile", "[", "kernels_List", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "cuKernelList", ",", "ccKernelList", ",", "CMakeListsTxt", ",", 
       RowBox[{"fileName", "=", 
        RowBox[{"flowDir", "<>", "\"\<CMakeLists.txt\>\""}]}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid kernels list!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"cuKernelList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<    flows/\>\"", "<>", 
              RowBox[{"#", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
              RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
              "\"\<.cu\\n\>\""}], "&"}], ",", "kernels"}], "]"}], "]"}], ",", 
         
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"ccKernelList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"\"\<    flows/\>\"", "<>", 
              RowBox[{"#", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
              RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
              "\"\<.cc\\n\>\""}], "&"}], ",", "kernels"}], "]"}], "]"}], ",", 
         
         RowBox[{"-", "1"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"CMakeListsTxt", "=", 
       RowBox[{
       "\"\<if(USE_CUDA)\n  set(flow_sources\n\>\"", "<>", "cuKernelList", 
        "<>", "\"\<\n\tflows/flows.cc\n    PARENT_SCOPE)\nelse()\n  \
set(flow_sources\n\>\"", "<>", "ccKernelList", "<>", 
        "\"\<\n\tflows/flows.cc\n    PARENT_SCOPE)\nendif()\>\""}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"FileExistsQ", "[", "fileName", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Import", "[", 
             RowBox[{"fileName", ",", "\"\<Text\>\""}], "]"}], "==", 
            "CMakeListsTxt"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Print", "[", 
             RowBox[{"fileName", "<>", "\"\< unchanged\>\""}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Return", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
         ";"}]}], "\n", "\t", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"fileName", ",", "CMakeListsTxt", ",", "\"\<Text\>\""}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
       "\"\<Exported to \\\"\>\"", "<>", "fileName", "<>", "\"\<\\\"\>\""}], 
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916637997627503*^9, 3.916638105178487*^9}, {
   3.916638326872943*^9, 3.916638329977515*^9}, {3.9171706430901623`*^9, 
   3.91717064827709*^9}, 3.917171292914676*^9, {3.918622893178757*^9, 
   3.9186228943569508`*^9}, {3.919748875724751*^9, 3.919748897260251*^9}, 
   3.91974893473445*^9, {3.933304906423752*^9, 3.933304922495817*^9}, {
   3.937488578505584*^9, 
   3.93748874483304*^9}},ExpressionUUID->"fcb4101e-cf09-4b05-8515-\
2708e798aaeb"]
}, Closed]],

Cell[CellGroupData[{

Cell["Safety Checks", "Section",
 CellChangeTimes->{{3.91857024358221*^9, 
  3.9185702462863216`*^9}},ExpressionUUID->"a0be1f2b-f273-4a1e-8a34-\
31c5569270ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CheckKey", "[", 
    RowBox[{"kernel_Association", ",", "name_String", ",", "test_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "valid", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"kernel", ",", "name"}], "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Missing kernel key: \>\"", ",", "name"}], "]"}], ";", 
         RowBox[{"Return", "[", "False", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"test", "[", 
          RowBox[{"kernel", "[", "name", "]"}], "]"}]}], ",", 
        RowBox[{"Return", "[", "False", "]"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "True", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.938786747257393*^9, 3.938786811664537*^9}, {
  3.938786844366226*^9, 3.938786913533485*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"4651bebd-71bd-4a97-92b5-5351611f6050"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"knownTypes", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Quadrature\>\"", ",", "\"\<QMC\>\"", ",", "\"\<Quadrature\>\"", ",", 
     "\"\<Quadratureq0\>\"", ",", "\"\<Quadraturex0\>\"", ",", 
     "\"\<CartesianQuadrature\>\"", ",", "\"\<CartesianQuadratureq0\>\""}], 
    "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TypeTest", "[", "type_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"knownTypes", ",", "type"}], "]"}], ",", 
       RowBox[{"Return", "[", "True", "]"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Unkown kernel Type: \>\"", ",", "type", ",", " ", 
          "\"\<\\nKnown types: \>\"", ",", "knownTypes"}], "]"}], ";", 
        RowBox[{"Return", "[", "False", "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"AngleTest", "[", "number_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"0", "<=", "number", "<=", "3"}], ",", 
       RowBox[{"Return", "[", "True", "]"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Invalid number of Angles: \>\"", ",", "number", ",", 
          "\"\<\\nMust be between 0 and 3.\>\""}], "]"}], ";", 
        RowBox[{"Return", "[", "False", "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"knownctypes", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<double\>\"", ",", "\"\<float\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ctypeTest", "[", "type_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"knownctypes", ",", "type"}], "]"}], ",", 
       RowBox[{"Return", "[", "True", "]"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Unkown kernel ctype: \>\"", ",", "type", ",", " ", 
          "\"\<\\nKnown ctypes: \>\"", ",", "knownctypes"}], "]"}], ";", 
        RowBox[{"Return", "[", "False", "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"knownDevices", "=", 
   RowBox[{"{", 
    RowBox[{"\"\<CPU\>\"", ",", "\"\<TBB\>\"", ",", "\"\<GPU\>\""}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"deviceTest", "[", "type_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"knownDevices", ",", "type"}], "]"}], ",", 
       RowBox[{"Return", "[", "True", "]"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Unkown kernel Device: \>\"", ",", "type", ",", " ", 
          "\"\<\\nKnown Devices (where TBB=CPU): \>\"", ",", "knownDevices"}],
          "]"}], ";", 
        RowBox[{"Return", "[", "False", "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9387869406479607`*^9, 3.938786984053474*^9}, {
  3.938787018053985*^9, 3.9387871811947002`*^9}, {3.938787211495647*^9, 
  3.9387873319640017`*^9}, {3.9387888587572727`*^9, 3.938788868407303*^9}, {
  3.9461399223375998`*^9, 3.946139929329183*^9}, {3.9508517501147547`*^9, 
  3.950851754266459*^9}},ExpressionUUID->"2ea8b7a0-b679-4c15-8bdc-\
98e6abdfdf6f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"IsValidKernelSpec", "[", "kernel_Association", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"validKeys", ",", "validKeyTypes"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"validKeys", "=", 
        RowBox[{
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<Path\>\""}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<Name\>\"", ",", "StringQ"}], "]"}], "&&",
          "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<Type\>\"", ",", "TypeTest"}], "]"}], "&&",
          "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<Angles\>\"", ",", "AngleTest"}], "]"}], 
         "&&", "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<d\>\"", ",", "IntegerQ"}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<AD\>\"", ",", "BooleanQ"}], "]"}], "&&",
          "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<ctype\>\"", ",", "ctypeTest"}], "]"}], "&&",
          "\[IndentingNewLine]", 
         RowBox[{"CheckKey", "[", 
          RowBox[{"kernel", ",", "\"\<Device\>\"", ",", "deviceTest"}], 
          "]"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Return", "[", "validKeys", "]"}], ";"}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IsValidKernelSpecList", "[", "kernels_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"validList", ",", "validSpecs"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"validList", "=", 
      RowBox[{"AllTrue", "[", 
       RowBox[{"kernels", ",", "AssociationQ"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"validSpecs", "=", 
      RowBox[{"AllTrue", "[", 
       RowBox[{"kernels", ",", "IsValidKernelSpec"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"validList", "&&", "validSpecs"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.917170062895973*^9, 3.91717022666391*^9}, {
   3.917170377274715*^9, 3.917170438534101*^9}, {3.917170472310377*^9, 
   3.917170501860292*^9}, {3.9171705903235817`*^9, 3.9171706393300443`*^9}, {
   3.91975108329427*^9, 3.919751100747879*^9}, {3.938783422949678*^9, 
   3.9387834325354767`*^9}, {3.93878346893589*^9, 3.938783530024022*^9}, {
   3.9387862253399982`*^9, 3.938786227360629*^9}, {3.938786732817245*^9, 
   3.938786734141049*^9}, {3.938786819666541*^9, 3.938786837867648*^9}, {
   3.938786918713799*^9, 3.938786924683711*^9}, 3.938787132371834*^9, {
   3.938787186035514*^9, 3.938787235310865*^9}, {3.938787372309132*^9, 
   3.938787375635404*^9}},ExpressionUUID->"281add74-3e82-4da2-b304-\
04fcb894fbc5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"knownParamTypes", "=", 
   RowBox[{"Keys", "[", "ArgType", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"TestParamType", "[", "type_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MemberQ", "[", 
        RowBox[{"knownParamTypes", ",", "type"}], "]"}], ",", 
       RowBox[{"Return", "[", "True", "]"}], ",", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
         "\"\<Unkown kernel ctype: \>\"", ",", "type", ",", " ", 
          "\"\<\\nKnown ctypes: \>\"", ",", "knownParamTypes"}], "]"}], ";", 
        RowBox[{"Return", "[", "False", "]"}]}]}], "]"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.9387874159841003`*^9, 3.938787474947982*^9}, {
  3.93878750559216*^9, 
  3.9387875436442842`*^9}},ExpressionUUID->"a02f1dce-8481-4dda-a767-\
41c3938ad776"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.938787528059828*^9, 3.938787537449707*^9}},
 CellLabel->"Out[57]=",ExpressionUUID->"0cc19047-5efd-446b-b394-e1fec94a1c13"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"IsValidParameter", "[", "parameter_Association", "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"validKeys", ",", "validKeyTypes"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"validKeys", "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"parameter", ",", "\"\<Name\>\""}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"parameter", ",", "\"\<Type\>\""}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"KeyExistsQ", "[", 
          RowBox[{"parameter", ",", "\"\<AD\>\""}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"validKeyTypes", "=", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"StringQ", "[", 
          RowBox[{"parameter", "[", "\"\<Name\>\"", "]"}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"TestParamType", "[", 
          RowBox[{"parameter", "[", "\"\<Type\>\"", "]"}], "]"}], "&&", 
         "\[IndentingNewLine]", 
         RowBox[{"BooleanQ", "[", 
          RowBox[{"parameter", "[", "\"\<AD\>\"", "]"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"validKeys", "&&", "validKeyTypes"}]}]}], 
     "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IsValidParameterList", "[", "parameters_List", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"validList", ",", "validParams"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"validList", "=", 
      RowBox[{"AllTrue", "[", 
       RowBox[{"parameters", ",", "AssociationQ"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"validParams", "=", 
      RowBox[{"AllTrue", "[", 
       RowBox[{"parameters", ",", "IsValidParameter"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"validList", "&&", "validParams"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.918569457301843*^9, 3.918569562193447*^9}, {
   3.9185701047583847`*^9, 3.9185701094640303`*^9}, 
   3.9387875479475117`*^9},ExpressionUUID->"abcfc1d3-2e59-4f0a-89d2-\
0541b475bac8"]
}, Closed]],

Cell[CellGroupData[{

Cell["Momentum Configurations", "Section",
 CellChangeTimes->{{3.916731294881199*^9, 3.916731307861263*^9}, 
   3.9185704484974*^9, {3.9367194473549433`*^9, 
   3.936719448575034*^9}},ExpressionUUID->"c33c8252-d769-4f2c-a755-\
55e259430a36"],

Cell[CellGroupData[{

Cell["4D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
  3.936719439894985*^9, 3.9367194419091873`*^9}, {3.938670450910139*^9, 
  3.938670451044594*^9}},ExpressionUUID->"3055f86e-1202-4f7c-82d7-\
f4a1322b935a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareAnglesP34Dpqr", "[", 
    RowBox[{"q_", ",", "p_", ",", "r_", ",", 
     RowBox[{"computeType_String", ":", "\"\<double\>\""}]}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "Vectorp", ",", "Vectorr", ",", "Vectorq", ",", "cos", ",",
        "\[IndentingNewLine]", "Resultcospq", ",", "Resultcosqr", ",", 
       "namecospq", ",", "namecosqr", ",", "\[IndentingNewLine]", "code", ",",
        "file"}], "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SetAttributes", "[", 
       RowBox[{"cos", ",", "Orderless"}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Vectorp", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{"0", ",", "0", ",", "0"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Vectorr", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"cos", "[", 
           RowBox[{"p", ",", "r"}], "]"}], "]"}], ",", "0", ",", "0"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Vectorq", "=", 
       RowBox[{"vec4", "[", 
        RowBox[{
         RowBox[{"ArcCos", "[", 
          RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
         RowBox[{"ArcCos", "[", 
          RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
         RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Resultcospq", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Vectorq", ".", "Vectorp"}], "//.", 
         RowBox[{
          RowBox[{"cos", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
          RowBox[{"Symbol", "[", 
           RowBox[{"\"\<cos\>\"", "<>", 
            RowBox[{"ToString", "[", "a", "]"}], "<>", 
            RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}], "//", 
        "FullSimplify"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Resultcosqr", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"Vectorq", ".", "Vectorr"}], "//.", 
         RowBox[{
          RowBox[{"cos", "[", 
           RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
          RowBox[{"Symbol", "[", 
           RowBox[{"\"\<cos\>\"", "<>", 
            RowBox[{"ToString", "[", "a", "]"}], "<>", 
            RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}], "//", 
        "FullSimplify"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"namecospq", "=", 
       RowBox[{
        RowBox[{"cos", "[", 
         RowBox[{"p", ",", "q"}], "]"}], "//.", 
        RowBox[{
         RowBox[{"cos", "[", 
          RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
         RowBox[{"Symbol", "[", 
          RowBox[{"\"\<cos\>\"", "<>", 
           RowBox[{"ToString", "[", "a", "]"}], "<>", 
           RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"namecosqr", "=", 
       RowBox[{
        RowBox[{"cos", "[", 
         RowBox[{"q", ",", "r"}], "]"}], "//.", 
        RowBox[{
         RowBox[{"cos", "[", 
          RowBox[{"a_", ",", "b_"}], "]"}], ":>", 
         RowBox[{"Symbol", "[", 
          RowBox[{"\"\<cos\>\"", "<>", 
           RowBox[{"ToString", "[", "a", "]"}], "<>", 
           RowBox[{"ToString", "[", "b", "]"}]}], "]"}]}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"code", "=", 
       RowBox[{"\"\<const \>\"", "<>", "computeType", "<>", "\"\< \>\"", "<>", 
        RowBox[{"ToString", "[", "namecospq", "]"}], "<>", "\"\< = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"Resultcospq", ",", "computeType"}], "]"}], "<>", 
        "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>", 
        "computeType", "<>", "\"\< \>\"", "<>", 
        RowBox[{"ToString", "[", "namecosqr", "]"}], "<>", "\"\< = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"Resultcosqr", ",", "computeType"}], "]"}], "<>", 
        "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "code", "]"}], ";"}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9274241274268436`*^9, 3.927424154027457*^9}, {
  3.927424193895813*^9, 3.927424305642883*^9}, {3.927424339889554*^9, 
  3.927424373500461*^9}, {3.927424431077732*^9, 3.927424816003658*^9}, {
  3.927424856859298*^9, 3.927424866497765*^9}, {3.92742504252745*^9, 
  3.927425045454752*^9}, {3.927425102948888*^9, 3.927425110023596*^9}, {
  3.927425158973563*^9, 3.927425176948194*^9}, {3.927425242278559*^9, 
  3.927425267179769*^9}, {3.92742535040135*^9, 3.927425351968753*^9}, {
  3.927438482196419*^9, 3.927438486226136*^9}, {3.927459225968075*^9, 
  3.927459227046921*^9}, {3.936719463008197*^9, 3.9367194672279463`*^9}, {
  3.936719539124484*^9, 3.936719540871916*^9}, {3.937024615309021*^9, 
  3.9370246184009542`*^9}, {3.938785208132944*^9, 3.938785229773325*^9}, {
  3.9387857671889677`*^9, 
  3.9387857677682962`*^9}},ExpressionUUID->"c4e780f8-15b6-40cb-8a1d-\
2bd5bf49ac16"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints4DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "sanity", ",", "Vectors4DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint4DP4cosp1", ",", "SymmetricPoint4DP4cosp2", ",", 
       "SymmetricPoint4DP4cosp3", ",", "SymmetricPoint4DP4cosp4", ",", 
       "SymmetricPoint4DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors4DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors4DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors4DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "3"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint4DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916731319392432*^9, 3.916731350930162*^9}, {
   3.916731383501957*^9, 3.9167314791763988`*^9}, {3.916731617846411*^9, 
   3.916731624081429*^9}, {3.916733406703175*^9, 3.916733416060416*^9}, {
   3.917354273417809*^9, 3.917354278969678*^9}, {3.919162463668729*^9, 
   3.919162467330896*^9}, {3.919162556125326*^9, 3.9191626087518578`*^9}, {
   3.919748944609479*^9, 3.919748945398053*^9}, {3.9272610437511*^9, 
   3.927261051512759*^9}, {3.927459182030244*^9, 3.9274591940079937`*^9}, {
   3.936718903810402*^9, 3.936718976150216*^9}, 3.9367190084943666`*^9, {
   3.936719130671103*^9, 3.9367191326145782`*^9}, {3.9374762033025723`*^9, 
   3.937476205734511*^9}, {3.9387852352169*^9, 3.9387852429193277`*^9}, {
   3.938785756048355*^9, 
   3.938785761548143*^9}},ExpressionUUID->"a0d59af2-759a-487a-b63e-\
d2d14b73cd1d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints4DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec4", ",", "Vectors4DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint4DP3cosp1", ",", "SymmetricPoint4DP3cosp2", ",", 
       "SymmetricPoint4DP3cosp3", ",", "SymmetricPoint4DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec4", "[", 
        RowBox[{
        "\[CapitalTheta]1_", ",", "\[CapitalTheta]2_", ",", "\[Phi]_"}], 
        "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]1", "]"}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Cos", "[", "\[CapitalTheta]2", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]1", "]"}], 
          RowBox[{"Sin", "[", "\[CapitalTheta]2", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors4DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{"0", ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"], ",", "0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec4", "[", 
          RowBox[{
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"], ",", "\[Pi]", ",", "0"}], "]"}]}], 
        "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors4DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors4DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec4", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos2\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors4DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint4DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint4DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint4DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.9367189819790773`*^9, 3.936719031418726*^9}, {
  3.936719264244136*^9, 3.936719270707841*^9}, {3.9367928012607718`*^9, 
  3.936792819897534*^9}, {3.937476212938995*^9, 3.9374762145334806`*^9}, {
  3.938785249337809*^9, 3.938785266783763*^9}, {3.938785774004787*^9, 
  3.938785776681572*^9}},ExpressionUUID->"7f2c99fd-a79f-46c2-854f-\
98e61ebec777"]
}, Open  ]],

Cell[CellGroupData[{

Cell["3D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
  3.9367194280657387`*^9, 3.936719445083376*^9}, {3.9386704515981083`*^9, 
  3.938670451773917*^9}},ExpressionUUID->"b9fc50c2-dc66-4696-839b-\
23e9ccbcf6cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints3DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec3", ",", "Vectors3DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP3cosp1", ",", "SymmetricPoint3DP3cosp2", ",", 
       "SymmetricPoint3DP3cosp3", ",", "SymmetricPoint3DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec3", "[", 
        RowBox[{"\[CapitalTheta]_", ",", "\[Phi]_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           FractionBox["\[Pi]", "2"], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916730946751062*^9, 3.916731056284199*^9}, {
   3.916731152203944*^9, 3.916731267405823*^9}, 3.9167313147142973`*^9, {
   3.916731419037212*^9, 3.916731442224831*^9}, {3.916731486627988*^9, 
   3.916731486937495*^9}, {3.916731626511187*^9, 3.916731628462594*^9}, {
   3.916733376150385*^9, 3.916733391701214*^9}, {3.917353970939571*^9, 
   3.917354006635349*^9}, {3.917354049536149*^9, 3.917354182251548*^9}, {
   3.917354222497705*^9, 3.917354232869914*^9}, {3.917354263689829*^9, 
   3.917354270411576*^9}, {3.917354315047325*^9, 3.91735431640311*^9}, {
   3.918320167112224*^9, 3.918320168185388*^9}, {3.91916183911097*^9, 
   3.919161853505862*^9}, {3.919162623542838*^9, 3.919162665338984*^9}, {
   3.91974894663587*^9, 3.919748947208737*^9}, {3.919928518449347*^9, 
   3.919928522987043*^9}, {3.92726105413786*^9, 3.927261060554873*^9}, {
   3.927459197594975*^9, 3.927459208320344*^9}, {3.936719126735134*^9, 
   3.936719140366767*^9}, {3.936719188207531*^9, 3.936719189267597*^9}, {
   3.9367192257874928`*^9, 3.936719253023929*^9}, {3.936719292755637*^9, 
   3.936719306771409*^9}, {3.93747621842809*^9, 3.937476219694083*^9}, {
   3.938670004542005*^9, 3.9386701548023567`*^9}, {3.938670353563264*^9, 
   3.938670368151267*^9}, {3.938785254158613*^9, 3.938785269501292*^9}, {
   3.938785779812705*^9, 
   3.938785781347447*^9}},ExpressionUUID->"02076b1d-a114-4058-b10c-\
0074b1c0bf44"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints3DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec3", ",", "sanity", ",", "Vectors3DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP4cosp1", ",", "SymmetricPoint3DP4cosp2", ",", 
       "SymmetricPoint3DP4cosp3", ",", "SymmetricPoint3DP4cosp4", ",", 
       "SymmetricPoint3DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec3", "[", 
        RowBox[{"\[CapitalTheta]_", ",", "\[Phi]_"}], "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Cos", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{
          RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}], 
          RowBox[{"Sin", "[", "\[Phi]", "]"}]}], ",", 
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{"0", ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", "0"}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"1", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}], ",", 
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"-", 
             FractionBox["1", "3"]}], "]"}], ",", 
           RowBox[{"2", 
            FractionBox[
             RowBox[{"2", "\[Pi]"}], "3"]}]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "3"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec3", "[", 
          RowBox[{
           RowBox[{"ArcCos", "[", 
            RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], ",", 
           RowBox[{"Symbol", "[", "\"\<phi\>\"", "]"}]}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.936719237883638*^9, {3.9367193131782303`*^9, 3.936719345463015*^9}, {
   3.937476223976891*^9, 3.937476225953047*^9}, {3.938670238915703*^9, 
   3.938670242342607*^9}, {3.938670314164032*^9, 3.9386703442389927`*^9}, {
   3.938670394360215*^9, 3.938670395919155*^9}, {3.938785254649372*^9, 
   3.938785272064581*^9}, {3.9387857845047293`*^9, 
   3.938785786556594*^9}},ExpressionUUID->"3f57e62b-c21b-46a5-aac5-\
5e869eaa87ee"]
}, Closed]],

Cell[CellGroupData[{

Cell["2D", "Subsection",
 CellChangeTimes->{{3.936719378219471*^9, 3.936719381542781*^9}, {
   3.9367194280657387`*^9, 3.936719445083376*^9}, 3.938670269858596*^9, {
   3.938670452298119*^9, 
   3.938670452446117*^9}},ExpressionUUID->"81cfd11a-63a8-4205-8e64-\
8f4881ece817"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints2DP3", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec2", ",", "Vectors3DSP3", ",", "sanity", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP3cosp1", ",", "SymmetricPoint3DP3cosp2", ",", 
       "SymmetricPoint3DP3cosp3", ",", "SymmetricPoint3DP3Code"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec2", "[", "\[CapitalTheta]_", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP3", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec2", "[", "0", "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"1", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"2", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "3"]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP3", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AllTrue", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"sanity", "//", "N"}], ")"}], ",", 
           RowBox[{
            RowBox[{"#", "==", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"-", 
                FractionBox["1", "2"]}], "//", "N"}], ")"}]}], "&"}]}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Sanity check failed!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP3", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP3Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP3cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP3Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916730946751062*^9, 3.916731056284199*^9}, {
   3.916731152203944*^9, 3.916731267405823*^9}, 3.9167313147142973`*^9, {
   3.916731419037212*^9, 3.916731442224831*^9}, {3.916731486627988*^9, 
   3.916731486937495*^9}, {3.916731626511187*^9, 3.916731628462594*^9}, {
   3.916733376150385*^9, 3.916733391701214*^9}, {3.917353970939571*^9, 
   3.917354006635349*^9}, {3.917354049536149*^9, 3.917354182251548*^9}, {
   3.917354222497705*^9, 3.917354232869914*^9}, {3.917354263689829*^9, 
   3.917354270411576*^9}, {3.917354315047325*^9, 3.91735431640311*^9}, {
   3.918320167112224*^9, 3.918320168185388*^9}, {3.91916183911097*^9, 
   3.919161853505862*^9}, {3.919162623542838*^9, 3.919162665338984*^9}, {
   3.91974894663587*^9, 3.919748947208737*^9}, {3.919928518449347*^9, 
   3.919928522987043*^9}, {3.92726105413786*^9, 3.927261060554873*^9}, {
   3.927459197594975*^9, 3.927459208320344*^9}, {3.936719126735134*^9, 
   3.936719140366767*^9}, {3.936719188207531*^9, 3.936719189267597*^9}, {
   3.9367192257874928`*^9, 3.936719253023929*^9}, {3.936719292755637*^9, 
   3.936719306771409*^9}, {3.93747621842809*^9, 3.937476219694083*^9}, 
   3.93867027306639*^9, {3.938785256306374*^9, 3.938785273985268*^9}, {
   3.9387857895164957`*^9, 
   3.938785791044825*^9}},ExpressionUUID->"a7b5ee41-8585-4441-b62c-\
89d022f47a1c"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DeclareSymmetricPoints2DP4", "[", 
    RowBox[{"computeType_String", ":", "\"\<double\>\""}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "vec2", ",", "sanity", ",", "Vectors3DSP4", ",", "\[IndentingNewLine]", 
       "SymmetricPoint3DP4cosp1", ",", "SymmetricPoint3DP4cosp2", ",", 
       "SymmetricPoint3DP4cosp3", ",", "SymmetricPoint3DP4cosp4", ",", 
       "SymmetricPoint3DP4Code"}], "\[IndentingNewLine]", "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"vec2", "[", "\[CapitalTheta]_", "]"}], ":=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "\[CapitalTheta]", "]"}], ",", 
         RowBox[{"Sin", "[", "\[CapitalTheta]", "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Vectors3DSP4", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"vec2", "[", "0", "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"1", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"2", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}], ",", 
         RowBox[{"vec2", "[", 
          RowBox[{"3", 
           FractionBox[
            RowBox[{"2", "\[Pi]"}], "4"]}], "]"}]}], "}"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"sanity", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], ".", 
           RowBox[{"Vectors3DSP4", "[", 
            RowBox[{"[", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], "&"}], ",", 
         RowBox[{"Subsets", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp1", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp2", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp3", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "3", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4cosp4", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"vec2", "[", 
          RowBox[{"ArcCos", "[", 
           RowBox[{"Symbol", "[", "\"\<cos1\>\"", "]"}], "]"}], "]"}], ".", 
         RowBox[{"Vectors3DSP4", "[", 
          RowBox[{"[", "4", "]"}], "]"}]}], "//", "FullSimplify"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"SymmetricPoint3DP4Code", "=", 
       RowBox[{
       "\"\<const \>\"", "<>", "computeType", "<>", "\"\< cosp1q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp1", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp2q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp2", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp3q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp3", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\\n\>\"", "<>", "\[IndentingNewLine]", "\"\<const \>\"", "<>",
         "computeType", "<>", "\"\< cosp4q = \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{"SymmetricPoint3DP4cosp4", ",", "computeType"}], "]"}], 
        "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", "SymmetricPoint3DP4Code", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.936719237883638*^9, {3.9367193131782303`*^9, 3.936719345463015*^9}, {
   3.937476223976891*^9, 3.937476225953047*^9}, 3.9386702752706127`*^9, {
   3.938670493611395*^9, 3.938670518551881*^9}, {3.938785257240024*^9, 
   3.938785276217057*^9}, {3.938785794020824*^9, 
   3.938785795816415*^9}},ExpressionUUID->"3329a8ad-9322-4b94-9584-\
392b163bb430"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Kernel  Optimizations and Definitions", "Section",
 CellChangeTimes->{{3.924887074411989*^9, 3.924887087653908*^9}, {
  3.925707470504766*^9, 
  3.925707474532899*^9}},ExpressionUUID->"5a9c695d-a2e4-42c7-b625-\
3ac877f31cbd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"KernelPrepend", "=", "\"\<\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.9199266247885027`*^9, 3.919926744305746*^9}, {
   3.919926996246287*^9, 3.919927016138739*^9}, 3.9199955701122503`*^9, {
   3.924887060426296*^9, 3.924887060996331*^9}, 3.925707523099104*^9},
 CellLabel->
  "In[121]:=",ExpressionUUID->"b02fa6fa-1e5a-47f7-ac5f-07bf58b8badf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"codeOptimizeFunctions", "=", 
   RowBox[{"{", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AddCodeOptimizeFunctions", "[", "expr___", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "list", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"list", "=", 
      RowBox[{"{", "expr", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"codeOptimizeFunctions", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"codeOptimizeFunctions", ",", "list"}], "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ClearCodeOptimizeFunctions", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"codeOptimizeFunctions", "=", 
      RowBox[{"{", "}"}]}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowCodeOptimizeFunctions", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Functions to be optimized for call count are: \>\"", ",", 
       RowBox[{"Dataset", "[", 
        RowBox[{"codeOptimizeFunctions", ",", 
         RowBox[{"MaxItems", "->", "20000"}]}], "]"}]}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.925707800404338*^9, 3.925707860326218*^9}, {
   3.925707996416679*^9, 3.925708004745759*^9}, {3.925708035938981*^9, 
   3.925708051129855*^9}, 3.925708112103202*^9, {3.92571200808964*^9, 
   3.925712040456319*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"5f8052cc-3463-4c0e-bb13-e8dfd09bc056"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"useKernelOptimizations", "=", "True"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"UseKernelOptimizations", "[", 
   RowBox[{"yn_", "/;", 
    RowBox[{"Element", "[", 
     RowBox[{"yn", ",", "Booleans"}], "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{"useKernelOptimizations", "=", "yn"}], ";"}]}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.925909026846777*^9, 3.925909056547328*^9}, {
  3.925909088902992*^9, 3.925909134567381*^9}, {3.925909218446531*^9, 
  3.9259092210680847`*^9}},
 CellLabel->
  "In[126]:=",ExpressionUUID->"10cdcfac-f1bb-4dd7-b72a-645465a2bbed"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"KernelParamIsInterpolator", "[", "expr_Association", "]"}], ":=", 
   
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"expr", "[", "\"\<Type\>\"", "]"}], "!=", "\"\<Variable\>\""}], 
     ")"}], "&&", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"expr", "[", "\"\<Type\>\"", "]"}], "!=", "\"\<Constant\>\""}], 
     ")"}], "&&", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"expr", "[", "\"\<Type\>\"", "]"}], "!=", 
      "\"\<ComplexVariable\>\""}], ")"}], "&&", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"expr", "[", "\"\<Type\>\"", "]"}], "!=", 
      "\"\<ComplexConstant\>\""}], ")"}]}]}], ";"}]], "Input",ExpressionUUID->\
"d9615112-8698-41b1-a04a-431fb17c1340"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GetOptimizedKernelCode", "[", 
    RowBox[{
     RowBox[{"equation_", "/;", 
      RowBox[{
       RowBox[{"Head", "[", "equation", "]"}], "=!=", "List"}]}], ",", 
     "kernelParameterList_List", ",", "computeType_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "optList", ",", "interpObj", ",", "replacementObj", ",", 
       "replacementNames", ",", "replacements", ",", "definitions", ",", 
       "returnStatement"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::GetOptimizedKernelCode: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", "useKernelOptimizations", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Return", "[", 
         RowBox[{"\"\<    // flow\\n    return \>\"", "<>", 
          RowBox[{"CodeForm", "[", 
           RowBox[{"equation", ",", "computeType"}], "]"}], "<>", 
          "\"\<;\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"optList", "=", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "]"}], "[", "__", "]"}],
            "&"}], ",", 
          RowBox[{"Select", "[", 
           RowBox[{"kernelParameterList", ",", "KernelParamIsInterpolator"}], 
           "]"}]}], "]"}], "\[Union]", "codeOptimizeFunctions"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"interpObj", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"equation", ",", "#", ",", "Infinity"}], "]"}], "&"}], 
          ",", "optList"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replacementObj", "=", 
       RowBox[{"Keys", "@", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Counts", "[", "interpObj", "]"}], ",", 
          RowBox[{
           RowBox[{"#", ">", "1"}], "&"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replacementNames", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<DiFfRGREPL\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"replacements", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"replacementObj", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "->", 
          RowBox[{"replacementNames", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"definitions", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "replacementObj", "]"}], ">", "0"}], ",", 
         RowBox[{"\"\<    // optimization definitions\\n\>\"", "<>", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
             "\"\<const \>\"", "<>", "computeType", "<>", "\"\< \>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"replacementNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "<>", "\"\< = \>\"", "<>", 
              RowBox[{"CodeForm", "[", 
               RowBox[{
                RowBox[{"replacementObj", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "computeType"}], "]"}], 
              "<>", "\"\<;\\n\>\""}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], 
            "]"}], "]"}], "<>", "\"\<\\n\>\""}], ",", "\"\<\>\""}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"returnStatement", "=", 
       RowBox[{"\"\<    // flow\\n    return \>\"", "<>", 
        RowBox[{"CodeForm", "[", 
         RowBox[{
          RowBox[{"equation", "//.", "replacements"}], ",", "computeType"}], 
         "]"}], "<>", "\"\<;\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"definitions", "<>", "returnStatement"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"GetOptimizedKernelCode", "[", 
    RowBox[{
    "equations_List", ",", "kernelParameterList_List", ",", 
     "computeType_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "optList", ",", "interpObj", ",", "replacementObj", ",", 
       "replacementNames", ",", "replacements", ",", "definitions", ",", 
       "partNames", ",", "parts", ",", "returnStatement"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::GetOptimizedKernelCode: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "[", "useKernelOptimizations", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"partNames", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<DiFfRGPart\>\"", "<>", 
             RowBox[{"ToString", "[", "i", "]"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"parts", "=", 
          RowBox[{"\"\<    // flows\\n\>\"", "<>", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"\"\<const auto \>\"", "<>", 
               RowBox[{"partNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\< = \>\"", "<>", 
               RowBox[{"CodeForm", "[", 
                RowBox[{
                 RowBox[{"equations", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "computeType"}], "]"}],
                "<>", "\"\<;\\n\>\""}], ",", 
              RowBox[{"{", 
               RowBox[{"i", ",", "1", ",", 
                RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}], 
            "]"}]}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"returnStatement", "=", 
          RowBox[{"\"\<    // sum of flows\\n    return \>\"", "<>", 
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"StringJoin", "[", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"partNames", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\< + \>\""}], ",", 
                
                RowBox[{"{", 
                 RowBox[{"i", ",", "1", ",", 
                  RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}],
               "]"}], ",", 
             RowBox[{"-", "3"}]}], "]"}], "<>", "\"\<;\>\""}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"parts", "<>", "returnStatement"}], "]"}], ";"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"optList", "=", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Symbol", "[", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "]"}], "[", "__", "]"}],
            "&"}], ",", 
          RowBox[{"Select", "[", 
           RowBox[{"kernelParameterList", ",", "KernelParamIsInterpolator"}], 
           "]"}]}], "]"}], "\[Union]", "codeOptimizeFunctions"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"interpObj", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Cases", "[", 
            RowBox[{"equations", ",", "#", ",", "Infinity"}], "]"}], "&"}], 
          ",", "optList"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"replacementObj", "=", 
       RowBox[{"Keys", "@", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{"Counts", "[", "interpObj", "]"}], ",", 
          RowBox[{
           RowBox[{"#", ">", "1"}], "&"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"replacementNames", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<DiFfRGREPL\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"replacements", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"replacementObj", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "->", 
          RowBox[{"replacementNames", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"definitions", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "replacementObj", "]"}], ">", "0"}], ",", 
         RowBox[{"\"\<    // optimization definitions\\n\>\"", "<>", 
          RowBox[{"StringJoin", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
             "\"\<const \>\"", "<>", "computeType", "<>", "\"\< \>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"replacementNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "<>", "\"\< = \>\"", "<>", 
              RowBox[{"CodeForm", "[", 
               RowBox[{
                RowBox[{"replacementObj", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", "computeType"}], "]"}], 
              "<>", "\"\<;\\n\>\""}], ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "replacementObj", "]"}]}], "}"}]}], 
            "]"}], "]"}], "<>", "\"\<\\n\>\""}], ",", "\"\<\>\""}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"partNames", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"\"\<DiFfRGPart\>\"", "<>", 
          RowBox[{"ToString", "[", "i", "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"parts", "=", 
       RowBox[{"\"\<    // flows\\n\>\"", "<>", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"\"\<const auto \>\"", "<>", 
            RowBox[{"ToString", "[", 
             RowBox[{"partNames", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "]"}], "<>", "\"\< = \>\"", "<>", 
            RowBox[{"CodeForm", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"equations", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "//.", "replacements"}], ",", 
              "computeType"}], "]"}], "<>", "\"\<;\\n\>\""}], ",", 
           RowBox[{"{", 
            RowBox[{"i", ",", "1", ",", 
             RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}], 
         "]"}], "<>", "\"\<\\n\>\""}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"returnStatement", "=", 
       RowBox[{"\"\<    // sum of flows\\n    return \>\"", "<>", 
        RowBox[{"StringDrop", "[", 
         RowBox[{
          RowBox[{"StringJoin", "[", 
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ToString", "[", 
               RowBox[{"partNames", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "]"}], "<>", "\"\< + \>\""}], 
             ",", 
             RowBox[{"{", 
              RowBox[{"i", ",", "1", ",", 
               RowBox[{"Length", "[", "equations", "]"}]}], "}"}]}], "]"}], 
           "]"}], ",", 
          RowBox[{"-", "3"}]}], "]"}], "<>", "\"\<;\>\""}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"definitions", "<>", "parts", "<>", "returnStatement"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.925707478577066*^9, 3.925707513859118*^9}, {
   3.925707770248493*^9, 3.925707774050929*^9}, {3.925707880518664*^9, 
   3.925707903522541*^9}, {3.925707934432786*^9, 3.9257079348818073`*^9}, {
   3.92570919705335*^9, 3.925709198845766*^9}, {3.925709437368464*^9, 
   3.9257094396079063`*^9}, {3.925710044896023*^9, 3.9257100636592007`*^9}, {
   3.925712252732678*^9, 3.925712255615948*^9}, {3.92590917183536*^9, 
   3.925909211955093*^9}, {3.92590942091114*^9, 3.925909425176322*^9}, {
   3.925909463262588*^9, 3.925909481128065*^9}, {3.92590955682531*^9, 
   3.925909558500592*^9}, {3.931419817534824*^9, 3.931419860007971*^9}, {
   3.931419894486116*^9, 3.931419895405524*^9}, {3.931419975675881*^9, 
   3.931420194158597*^9}, {3.9314202268194838`*^9, 3.931420373049406*^9}, {
   3.93204098578543*^9, 3.932040986204354*^9}, {3.932041044803256*^9, 
   3.9320410501374397`*^9}, {3.9320412127795973`*^9, 3.93204123315661*^9}, {
   3.932041530815583*^9, 3.932041533077765*^9}, {3.9320418556709957`*^9, 
   3.932041959133141*^9}, {3.932041995923657*^9, 3.932041999267761*^9}, {
   3.932042033255431*^9, 3.9320420871912127`*^9}, 3.932042236729015*^9, {
   3.932042322479778*^9, 3.932042355945862*^9}, {3.934166682496434*^9, 
   3.9341666887935147`*^9}, {3.93416672573591*^9, 3.934166738735838*^9}, {
   3.9341672212881813`*^9, 3.9341672296384583`*^9}, {3.936854714485991*^9, 
   3.936854874865799*^9}, {3.937488899850667*^9, 3.9374889804710817`*^9}, {
   3.938783572613789*^9, 3.938783594503048*^9}, {3.938785807715172*^9, 
   3.938785827663423*^9}, {3.9387858588055973`*^9, 3.9387858619333467`*^9}, {
   3.938785895614574*^9, 
   3.9387858980313797`*^9}},ExpressionUUID->"5d6c55e3-f445-4d4a-86cc-\
4fd8d11ac6db"],

Cell[BoxData[
 RowBox[{
  RowBox[{"IndentCode", "[", 
   RowBox[{"code_String", ",", "level_Integer"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"StringJoin", "[", 
    RowBox[{"Table", "[", 
     RowBox[{"\"\<  \>\"", ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "level"}], "}"}]}], "]"}], "]"}], "<>", 
   RowBox[{"StringReplace", "[", 
    RowBox[{"code", ",", 
     RowBox[{"\"\<\\n\>\"", "->", 
      RowBox[{"\"\<\\n\>\"", "<>", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"Table", "[", 
         RowBox[{"\"\<  \>\"", ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "level"}], "}"}]}], "]"}], "]"}]}]}]}],
     "]"}]}]}]], "Input",
 CellChangeTimes->{{3.925709445646558*^9, 3.925709536383327*^9}, 
   3.9257099341104593`*^9},ExpressionUUID->"7660f901-71c0-46ff-a682-\
2ff9c7d62cb3"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Flow code generation", "Chapter",
 CellChangeTimes->{{3.9185704568927*^9, 
  3.918570460923884*^9}},ExpressionUUID->"b45359a4-435a-48f5-938f-\
6624251f7dc8"],

Cell[CellGroupData[{

Cell["Flow Class", "Section",
 CellChangeTimes->{{3.916561823620569*^9, 3.91656182837251*^9}, {
  3.926136532112515*^9, 
  3.9261365323591833`*^9}},ExpressionUUID->"97b4fbb0-92d9-4885-b408-\
2eee17007491"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "$StandardKernelDefinitions", "=", 
   "\"\<\nstatic __forceinline__ __device__ __host__ auto RB(const auto k2, \
const auto p2) { return REG::RB(k2, p2); }\nstatic __forceinline__ __device__ \
__host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }\n\n\
static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const \
auto p2) { return REG::RBdot(k2, p2); }\nstatic __forceinline__ __device__ \
__host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, \
p2); }\n\nstatic __forceinline__ __device__ __host__ auto dq2RB(const auto \
k2, const auto p2) { return REG::dq2RB(k2, p2); }\nstatic __forceinline__ \
__device__ __host__ auto dq2RF(const auto k2, const auto p2) { return \
REG::dq2RF(k2, p2); }\n\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"$KernelDefinitions", "=", "$StandardKernelDefinitions"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetKernelDefinitions", "[", "definitionCode_String", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"$KernelDefinitions", ",", "definitionCode"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetKernelDefinitions", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Set", "[", 
      RowBox[{"$KernelDefinitions", ",", "$StandardKernelDefinitions"}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowKernelDefinitions", "[", "]"}], ":=", 
  RowBox[{"Print", "[", "$KernelDefinitions", "]"}]}]}], "Input",
 CellChangeTimes->{{3.93322627230301*^9, 3.933226291334398*^9}, {
  3.933226490298123*^9, 3.9332265590035343`*^9}, {3.933300933190289*^9, 
  3.933300946414246*^9}, {3.9334042881780376`*^9, 3.933404298418262*^9}, {
  3.943434751480136*^9, 
  3.943434775266438*^9}},ExpressionUUID->"f5928534-0655-4f1b-bfed-\
3dd38a332088"],

Cell[CellGroupData[{

Cell["T = 0", "Subsection",
 CellChangeTimes->{{3.916733429630674*^9, 
  3.91673344255842*^9}},ExpressionUUID->"30a15baf-c80b-4b54-9185-\
3459472d17b7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Options", "[", "MakeFlowClass", "]"}], " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<Regulator\>\"", "->", "\"\<PolynomialExpRegulator\>\""}], 
    ",", 
    RowBox[{"\"\<RegulatorOptionCode\>\"", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}]}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeFlowClass", "[", 
    RowBox[{"name_String", ",", "kernels_List", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "includeList", ",", "integratorList", ",", "hhDef", ",", "hhFlow", ",", 
       "ccFlow", ",", "regulatorPrefix", ",", "regulatorParameters", ",", 
       "regulatorOpts", ",", "regulator"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid kernels list!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"regulatorOpts", " ", "=", " ", 
       RowBox[{"OptionValue", "[", "\"\<RegulatorOptionCode\>\"", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"regulator", "=", " ", 
       RowBox[{"OptionValue", "[", "\"\<Regulator\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Not", "@", 
          RowBox[{"StringQ", "[", 
           RowBox[{"regulatorOpts", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "||", 
         RowBox[{"Not", "@", 
          RowBox[{"StringQ", "[", 
           RowBox[{"regulatorOpts", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid regulator options!\>\"", "]"}], 
         ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"name", "==", "\"\<\>\""}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<Please provide a valid name to MakeFlowClass.\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"integratorList", "=", "kernels"}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"includeList", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<#include \\\"\>\"", "<>", 
            RowBox[{"#", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
            
            RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
            "\"\<.hh\\\"\\n\>\""}], "&"}], ",", "kernels"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"regulatorParameters", "=", 
       RowBox[{"regulatorOpts", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"regulatorPrefix", "=", 
       RowBox[{"regulatorOpts", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"hhDef", "=", 
       RowBox[{
       "\"\<#pragma once\n\n#include <DiFfRG/common/utils.hh>\n#include \
<DiFfRG/physics/integration.hh>\n#include <DiFfRG/physics/interpolation.hh>\n\
#include <DiFfRG/physics/regulators.hh>\n#include \
<DiFfRG/physics/thermodynamics.hh>\n\nusing namespace ::DiFfRG;\n\n\>\"", "<>",
         "regulatorPrefix", "<>", 
        "\"\<\n#define __REGULATOR__ ::DiFfRG::\>\"", "<>", "regulator", 
        "<>", "\"\<<\>\"", "<>", "regulatorParameters", "<>", 
        "\"\<>\n\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hhFlow", "=", 
       RowBox[{
       "\"\<#pragma once\n\n\>\"", "<>", "includeList", "<>", 
        "\"\<\n\n#include \\\"def.hh\\\"\n#include \
<DiFfRG/physics/flow_equations.hh>\n\nclass \>\"", "<>", "name", "<>", 
        "\"\<FlowEquations : public FlowEquations\n{\npublic:\n  \>\"", "<>", 
        "name", "<>", 
        "\"\<FlowEquations(const JSONValue& json);\n\nprivate:\n  const \
std::array<uint, 1> grid_size_int;\n  const std::array<uint, 2> \
grid_sizes_angle_int;\n  const std::array<uint, 3> grid_sizes_3D_int;\n  \
const std::array<uint, 4> grid_sizes_4D_int;\n\n  const std::array<uint, 2> \
grid_sizes_2D_cartesian_int;\n  const std::array<uint, 3> \
grid_sizes_3D_cartesian_int;\n\npublic:\n  ::DiFfRG::QuadratureProvider \
quadrature_provider;\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<\\n  ::DiFfRG::Flows::\>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator;\>\""}], "&"}], ",", "integratorList"}], "]"}], 
         "]"}], "<>", "\"\<\n};\>\""}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ccFlow", "=", 
       RowBox[{
       "\"\<#include \\\"flows.hh\\\"\n\n\>\"", "<>", "name", "<>", 
        "\"\<FlowEquations::\>\"", "<>", "name", "<>", 
        "\"\<FlowEquations(const JSONValue& json)\n  : FlowEquations(json, \
[](double x) { return powr<-1>(x + __REGULATOR__::RB(1., x)) * \
__REGULATOR__::RBdot(1., x); }),\n\n                      \
grid_size_int{{x_quadrature_order}},\n                      \
grid_sizes_angle_int{{x_quadrature_order, 2 * angle_quadrature_order}},\n     \
                 grid_sizes_3D_int{{x_quadrature_order, \
angle_quadrature_order, angle_quadrature_order}},\n                      \
grid_sizes_4D_int{{x_quadrature_order, angle_quadrature_order, \
angle_quadrature_order, angle_quadrature_order}},\n\n                      \
grid_sizes_2D_cartesian_int{{x_quadrature_order, x_quadrature_order}},\n      \
                grid_sizes_3D_cartesian_int{{x_quadrature_order, \
x_quadrature_order, x_quadrature_order}},\n\n                      \
quadrature_provider(json)\n\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<,\\n                      \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator(quadrature_provider, \>\"", "<>", 
             RowBox[{"GridSelector", "[", "#", "]"}], "<>", 
             "\"\<, x_extent, json)\>\""}], "&"}], ",", "integratorList"}], 
          "]"}], "]"}], "<>", "\"\<\n{\n}\n\>\""}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<def.hh\>\""}], ",", "hhDef"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<flows.hh\>\""}], ",", "hhFlow"}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<flows.cc\>\""}], ",", "ccFlow"}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"MakeCMakeFile", "[", "kernels", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.915266076973261*^9, 3.915266096502841*^9}, {
   3.915266200238308*^9, 3.915266298943959*^9}, {3.915524894746177*^9, 
   3.915524923865303*^9}, {3.916561842775977*^9, 3.916562042167379*^9}, {
   3.916562088264067*^9, 3.916562184547618*^9}, {3.916562309609804*^9, 
   3.91656238662405*^9}, {3.9165624453393173`*^9, 3.916562902661953*^9}, 
   3.916637854791019*^9, {3.916638220244384*^9, 3.916638221401405*^9}, {
   3.916638320971363*^9, 3.916638364155405*^9}, {3.916638396029094*^9, 
   3.916638539564769*^9}, {3.9166386433928137`*^9, 3.916638722959673*^9}, {
   3.916638755636091*^9, 3.916638899992998*^9}, {3.91663948360975*^9, 
   3.916639483717289*^9}, {3.916639515140254*^9, 3.916639522473421*^9}, 
   3.9166442726336184`*^9, {3.916644320214897*^9, 3.916644375394819*^9}, {
   3.916644406025504*^9, 3.916644418577367*^9}, 3.916728989478773*^9, 
   3.916729330395783*^9, {3.916730373214861*^9, 3.916730482816251*^9}, 
   3.916733346590831*^9, {3.917166357896953*^9, 3.917166462884304*^9}, {
   3.917169725302834*^9, 3.917169798471406*^9}, 3.91717066024316*^9, {
   3.917170802349793*^9, 3.917170810323257*^9}, {3.917170863899581*^9, 
   3.917170865182828*^9}, {3.917171074406164*^9, 3.91717111831079*^9}, {
   3.917172609520296*^9, 3.91717269422215*^9}, {3.917174522081416*^9, 
   3.917174525179377*^9}, {3.917175525141343*^9, 3.917175545285121*^9}, {
   3.917342714109618*^9, 3.917342715867557*^9}, {3.917342881388105*^9, 
   3.917342904373345*^9}, {3.917355072998807*^9, 3.917355089178806*^9}, {
   3.917355133162534*^9, 3.917355137391519*^9}, {3.918318453425646*^9, 
   3.918318466721135*^9}, {3.9184926975042963`*^9, 3.9184927018931713`*^9}, {
   3.918531045115096*^9, 3.918531051288211*^9}, {3.918569706416689*^9, 
   3.918569711313903*^9}, {3.918569883840232*^9, 3.918569924191991*^9}, {
   3.918570481808065*^9, 3.918570482658513*^9}, 3.918572965681876*^9, {
   3.918619330247024*^9, 3.9186194999796*^9}, {3.918619551331699*^9, 
   3.918619557001275*^9}, {3.918619715476077*^9, 3.918619718755018*^9}, {
   3.91861990258656*^9, 3.918619905815543*^9}, {3.918622704968856*^9, 
   3.918622720251073*^9}, {3.918987723815475*^9, 3.918987800718699*^9}, {
   3.919748949623682*^9, 3.919748950350857*^9}, {3.919753345877274*^9, 
   3.9197533475132427`*^9}, 3.924755409606573*^9, {3.924755904174837*^9, 
   3.924755904751028*^9}, 3.926136557509192*^9, {3.927261077480047*^9, 
   3.927261080534039*^9}, {3.927437023057565*^9, 3.927437029727252*^9}, {
   3.927617145785913*^9, 3.927617167008032*^9}, {3.927617256055049*^9, 
   3.927617264526808*^9}, {3.928503022724699*^9, 3.928503023761883*^9}, 
   3.928503261877388*^9, 3.92850333510682*^9, {3.929457675553541*^9, 
   3.929457719546505*^9}, {3.929457795512295*^9, 3.929457798851206*^9}, {
   3.933225918926235*^9, 3.933225923329981*^9}, {3.933226028061363*^9, 
   3.9332261230813103`*^9}, {3.933226185578936*^9, 3.933226266830832*^9}, {
   3.933226328288453*^9, 3.93322633014824*^9}, {3.933226577715176*^9, 
   3.93322661692254*^9}, {3.933226955030998*^9, 3.933227000189639*^9}, {
   3.933227082239916*^9, 3.933227092403379*^9}, {3.933227414557926*^9, 
   3.933227415199885*^9}, {3.933227629665277*^9, 3.933227653880763*^9}, {
   3.933227710148876*^9, 3.9332278004295053`*^9}, {3.933228530848271*^9, 
   3.933228541003646*^9}, {3.933301407253092*^9, 3.933301416831483*^9}, {
   3.933301499317684*^9, 3.9333015005323076`*^9}, 3.933304525641684*^9, {
   3.933304602209537*^9, 3.9333046277690268`*^9}, {3.93330466336119*^9, 
   3.933304789864666*^9}, {3.93330484332067*^9, 3.933304853136348*^9}, 
   3.933304964720351*^9, {3.933305064176303*^9, 3.933305066319943*^9}, {
   3.937407106337494*^9, 3.9374071214025993`*^9}, {3.946141076862392*^9, 
   3.94614108756663*^9}, {3.946141119447261*^9, 3.946141172258122*^9}, {
   3.946141203314022*^9, 3.946141207650319*^9}, 3.946141369226582*^9, {
   3.946141833634643*^9, 3.946141834758081*^9}, {3.948718651281159*^9, 
   3.9487186584329844`*^9}, {3.948732903785323*^9, 
   3.9487329145213223`*^9}},ExpressionUUID->"343ea549-3ec9-4b86-9bc0-\
73c18f46ff9e"]
}, Closed]],

Cell[CellGroupData[{

Cell["finite T", "Subsection",
 CellChangeTimes->{{3.9167290082980013`*^9, 
  3.916729010272327*^9}},ExpressionUUID->"4444b3ad-10a7-4edc-b924-\
bcbc2ab9b259"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Options", "[", "MakeFlowClassFiniteT", "]"}], " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"\"\<Regulator\>\"", "->", "\"\<PolynomialExpRegulator\>\""}], 
    ",", 
    RowBox[{"\"\<RegulatorOptionCode\>\"", "->", 
     RowBox[{"{", 
      RowBox[{"\"\<\>\"", ",", "\"\<\>\""}], "}"}]}]}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeFlowClassFiniteT", "[", 
    RowBox[{"name_String", ",", "kernels_List", ",", 
     RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "includeList", ",", "\[IndentingNewLine]", "integratorList", ",", 
       "integratorq0List", ",", "integratorx0List", ",", "regulatorOpts", ",",
        "regulator", ",", "\[IndentingNewLine]", "hhDef", ",", "hhFlow", ",", 
       "ccFlow", ",", "regulatorPrefix", ",", "regulatorParameters"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeFlowClassFiniteT: Invalid kernels list!\
\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"regulatorOpts", " ", "=", " ", 
       RowBox[{"OptionValue", "[", "\"\<RegulatorOptionCode\>\"", "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"regulator", "=", " ", 
       RowBox[{"OptionValue", "[", "\"\<Regulator\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Not", "@", 
          RowBox[{"StringQ", "[", 
           RowBox[{"regulatorOpts", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "||", 
         RowBox[{"Not", "@", 
          RowBox[{"StringQ", "[", 
           RowBox[{"regulatorOpts", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "]"}]}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeFlowClassFiniteT: Invalid regulator \
options!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"name", "==", "\"\<\>\""}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeFlowClassFiniteT: Please provide a \
valid name to MakeFlowClass.\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"integratorList", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"kernels", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", "\"\<Type\>\"", "]"}], "==", 
           "\"\<Quadrature\>\""}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"integratorq0List", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"kernels", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", "\"\<Type\>\"", "]"}], "==", 
           "\"\<Quadratureq0\>\""}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"integratorx0List", "=", 
       RowBox[{"Select", "[", 
        RowBox[{"kernels", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", "\"\<Type\>\"", "]"}], "==", 
           "\"\<Quadraturex0\>\""}], "&"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"includeList", "=", 
       RowBox[{"StringJoin", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<#include \\\"\>\"", "<>", 
            RowBox[{"#", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
            
            RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
            "\"\<.hh\\\"\\n\>\""}], "&"}], ",", "kernels"}], "]"}], "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"regulatorParameters", "=", 
       RowBox[{"regulatorOpts", "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"regulatorPrefix", "=", 
       RowBox[{"regulatorOpts", "[", 
        RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"hhDef", "=", 
       RowBox[{
       "\"\<#pragma once\n\n#include <DiFfRG/common/utils.hh>\n#include \
<DiFfRG/physics/integration.hh>\n#include \
<DiFfRG/physics/integration_finiteT.hh>\n#include \
<DiFfRG/physics/interpolation.hh>\n#include <DiFfRG/physics/regulators.hh>\n\
#include <DiFfRG/physics/thermodynamics.hh>\n\nusing namespace ::DiFfRG;\n\n\
\>\"", "<>", "regulatorPrefix", "<>", 
        "\"\<\n#define __REGULATOR__ ::DiFfRG::\>\"", "<>", "regulator", 
        "<>", "\"\<<\>\"", "<>", "regulatorParameters", "<>", 
        "\"\<>\n\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hhFlow", "=", 
       RowBox[{
       "\"\<#pragma once\n\n\>\"", "<>", "includeList", "<>", 
        "\"\<\n\n#include \\\"def.hh\\\"\n#include \
<DiFfRG/physics/flow_equations.hh>\n\nclass \>\"", "<>", "name", "<>", 
        "\"\<FlowEquations : public FlowEquationsFiniteT\n{\npublic:\n  \>\"",
         "<>", "name", "<>", 
        "\"\<FlowEquations(const JSONValue& json);\n\nprivate:\n  const \
std::array<uint, 1> grid_size_int;\n  const std::array<uint, 2> \
grid_sizes_angle_int;\n  const std::array<uint, 3> grid_sizes_3D_int;\n  \
const std::array<uint, 4> grid_sizes_4D_int;\n\n  const std::array<uint, 2> \
grid_sizes_int_fT;\n  const std::array<uint, 3> grid_sizes_angle_int_fT;\n  \
const std::array<uint, 4> grid_sizes_4D_int_fT;\n\n  const std::array<uint, \
2> grid_sizes_2D_cartesian_int;\n  const std::array<uint, 3> \
grid_sizes_3D_cartesian_int;\n\npublic:\n  QuadratureProvider \
quadrature_provider;\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<\\n  Flows::\>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator;\>\""}], "&"}], ",", 
           RowBox[{"Join", "[", 
            RowBox[{
            "integratorList", ",", "integratorx0List", ",", 
             "integratorq0List"}], "]"}]}], "]"}], "]"}], "<>", 
        "\"\<\n};\>\""}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ccFlow", "=", 
       RowBox[{
       "\"\<#include \\\"flows.hh\\\"\n\n\>\"", "<>", "name", "<>", 
        "\"\<FlowEquations::\>\"", "<>", "name", "<>", 
        "\"\<FlowEquations(const JSONValue& json)\n  : \
FlowEquationsFiniteT(json, json.get_double(\\\"/physical/T\\\"),\n\n          \
          [&](double q2) { return 1. / (q2 + __REGULATOR__::RB(powr<2>(k), \
q2)) * __REGULATOR__::RBdot(powr<2>(k), q2); },\n                    \
[&](double q0) { return 1. / (powr<2>(q0) + __REGULATOR__::RB(powr<2>(k), \
powr<2>(q0))) * __REGULATOR__::RBdot(powr<2>(k), powr<2>(q0)); }, \n          \
          [&](double q0) { return 1. / powr<2>(powr<2>(q0) + powr<2>(k)); }),\
\n\n                    grid_size_int{{x_quadrature_order}},\n                \
    grid_sizes_angle_int{{x_quadrature_order, angle_quadrature_order}},\n     \
               grid_sizes_3D_int{{x_quadrature_order, angle_quadrature_order, \
angle_quadrature_order}},\n                    \
grid_sizes_4D_int{{x_quadrature_order, angle_quadrature_order, \
angle_quadrature_order, angle_quadrature_order}},\n\n                    \
grid_sizes_int_fT{{x_quadrature_order, x0_quadrature_order}},\n               \
     grid_sizes_angle_int_fT{{x_quadrature_order, angle_quadrature_order, \
x0_quadrature_order}},\n                    \
grid_sizes_4D_int_fT{{x_quadrature_order, angle_quadrature_order, \
angle_quadrature_order, x0_quadrature_order}},\n\n                    \
grid_sizes_2D_cartesian_int{{x_quadrature_order, x_quadrature_order}},\n      \
              grid_sizes_3D_cartesian_int{{x_quadrature_order, \
x_quadrature_order, x_quadrature_order}},\n\n                    \
quadrature_provider(json)\n\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<,\\n                      \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator(quadrature_provider, grid_size_int, x_extent, \
json)\>\""}], "&"}], ",", "integratorList"}], "]"}], "]"}], "<>", 
        "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<,\\n                      \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator(quadrature_provider, \>\"", "<>", 
             RowBox[{"GridSelectorFiniteT", "[", 
              RowBox[{"#", "[", "\"\<Angles\>\"", "]"}], "]"}], "<>", 
             "\"\<, x_extent, x0_extent, x0_summands, json)\>\""}], "&"}], 
           ",", "integratorx0List"}], "]"}], "]"}], "<>", 
        "\[IndentingNewLine]", 
        RowBox[{"StringJoin", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<,\\n                      \>\"", "<>", 
             RowBox[{"#", "[", "\"\<Name\>\"", "]"}], "<>", 
             "\"\<_integrator(quadrature_provider, \>\"", "<>", 
             RowBox[{"GridSelector", "[", "#", "]"}], "<>", 
             "\"\<, x_extent, json)\>\""}], "&"}], ",", "integratorq0List"}], 
          "]"}], "]"}], "<>", "\"\<\n{\n}\n\>\""}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<def.hh\>\""}], ",", "hhDef"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<flows.hh\>\""}], ",", "hhFlow"}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<flows.cc\>\""}], ",", "ccFlow"}], "]"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"MakeCMakeFile", "[", "kernels", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.915266076973261*^9, 3.915266096502841*^9}, {
   3.915266200238308*^9, 3.915266298943959*^9}, {3.915524894746177*^9, 
   3.915524923865303*^9}, {3.916561842775977*^9, 3.916562042167379*^9}, {
   3.916562088264067*^9, 3.916562184547618*^9}, {3.916562309609804*^9, 
   3.91656238662405*^9}, {3.9165624453393173`*^9, 3.916562902661953*^9}, 
   3.916637854791019*^9, {3.916638220244384*^9, 3.916638221401405*^9}, {
   3.916638320971363*^9, 3.916638364155405*^9}, {3.916638396029094*^9, 
   3.916638539564769*^9}, {3.9166386433928137`*^9, 3.916638722959673*^9}, {
   3.916638755636091*^9, 3.916638899992998*^9}, {3.91663948360975*^9, 
   3.916639483717289*^9}, {3.916639515140254*^9, 3.916639522473421*^9}, 
   3.9166442726336184`*^9, {3.916644320214897*^9, 3.916644375394819*^9}, {
   3.916644406025504*^9, 3.916644418577367*^9}, {3.916728989478773*^9, 
   3.916729042821049*^9}, {3.916729081379501*^9, 3.916729226143487*^9}, {
   3.916729320302341*^9, 3.916729321601018*^9}, {3.91672946600306*^9, 
   3.916729532384797*^9}, {3.916729567123477*^9, 3.916729611596072*^9}, {
   3.916729691474326*^9, 3.916729800241272*^9}, {3.916729847576171*^9, 
   3.916729923353033*^9}, {3.916729965153618*^9, 3.916729981168078*^9}, {
   3.916730084307664*^9, 3.9167301637303343`*^9}, {3.91673022412214*^9, 
   3.916730352235264*^9}, {3.916730498650958*^9, 3.916730499415411*^9}, 
   3.916733466598329*^9, 3.916812852590053*^9, {3.917166177551119*^9, 
   3.917166179485702*^9}, 3.917166218914966*^9, {3.917166531907534*^9, 
   3.917166671557904*^9}, {3.917166702669332*^9, 3.917166758762174*^9}, {
   3.917166823295353*^9, 3.917166859514841*^9}, {3.917167108849738*^9, 
   3.917167116653275*^9}, {3.917167163086964*^9, 3.91716718842254*^9}, {
   3.917171695781415*^9, 3.917171698096422*^9}, {3.917171739085417*^9, 
   3.917171744938889*^9}, {3.917172430479111*^9, 3.9171725668098097`*^9}, 
   3.917174553487628*^9, {3.917175078015837*^9, 3.917175115633391*^9}, {
   3.917175173916637*^9, 3.917175224018043*^9}, {3.917175483267754*^9, 
   3.917175505076025*^9}, {3.9172643158766336`*^9, 3.917264327272668*^9}, {
   3.917265106278274*^9, 3.917265256752136*^9}, {3.917268725702932*^9, 
   3.917268730818947*^9}, {3.917339181671501*^9, 3.917339181870193*^9}, {
   3.917340243995558*^9, 3.9173402960377617`*^9}, {3.917340359015554*^9, 
   3.917340364282778*^9}, {3.917342706606825*^9, 3.917342708617527*^9}, {
   3.917355099955168*^9, 3.917355124652009*^9}, {3.918318484085571*^9, 
   3.91831849127116*^9}, {3.91856972524998*^9, 3.918569772164587*^9}, {
   3.918569802190571*^9, 3.918569868613179*^9}, {3.9185704681290913`*^9, 
   3.918570469135703*^9}, {3.918619227521628*^9, 3.918619319485058*^9}, {
   3.918619531107049*^9, 3.918619543633903*^9}, 3.9186195790519342`*^9, 
   3.918619726409367*^9, {3.918619924522457*^9, 3.918619926288368*^9}, {
   3.918622748834831*^9, 3.918622770710989*^9}, {3.918987826285483*^9, 
   3.918987846726801*^9}, {3.919138338056944*^9, 3.919138350362139*^9}, {
   3.919139972521459*^9, 3.919139973748899*^9}, {3.919146503208115*^9, 
   3.919146520998831*^9}, {3.919146681732176*^9, 3.919146682208541*^9}, {
   3.919150849505518*^9, 3.919150862515491*^9}, {3.919748951000933*^9, 
   3.919748951706152*^9}, {3.919753358980715*^9, 3.919753368119635*^9}, 
   3.92475543905409*^9, 3.924755476217381*^9, {3.9247558933718977`*^9, 
   3.9247558952254467`*^9}, {3.924839605420999*^9, 3.92483967828244*^9}, {
   3.924840262285612*^9, 3.924840280401784*^9}, {3.924840688865526*^9, 
   3.924840764316359*^9}, {3.9248408636307707`*^9, 3.9248408660336027`*^9}, {
   3.924849702715564*^9, 3.924849705326725*^9}, {3.924850367353318*^9, 
   3.924850388759513*^9}, {3.924850680622618*^9, 3.924850680964913*^9}, {
   3.924850898686751*^9, 3.924850900455326*^9}, {3.925707530385339*^9, 
   3.925707550063572*^9}, 3.926136570459586*^9, {3.927261087076824*^9, 
   3.927261089409863*^9}, {3.927617283670886*^9, 3.92761729496708*^9}, 
   3.927703505644225*^9, {3.9294578109860783`*^9, 3.92945786118618*^9}, {
   3.93063916373557*^9, 3.930639171102499*^9}, 3.930654453150228*^9, {
   3.930660984003987*^9, 3.930661046006777*^9}, {3.930661786370256*^9, 
   3.930661819170774*^9}, {3.930661995805984*^9, 3.930661996185329*^9}, {
   3.933225937973589*^9, 3.933225950968552*^9}, {3.933226789184795*^9, 
   3.933226813495335*^9}, {3.933226855553367*^9, 3.933226946516834*^9}, {
   3.933227096319548*^9, 3.93322710296111*^9}, 3.9332285557145443`*^9, {
   3.933259463482828*^9, 3.933259485514222*^9}, {3.9333017325571537`*^9, 
   3.933301738556025*^9}, 3.933304532697991*^9, {3.933304591065898*^9, 
   3.933304593801551*^9}, {3.933304772097981*^9, 3.933304857320385*^9}, 
   3.93330497050459*^9, 3.933305016784762*^9, {3.933305056513434*^9, 
   3.933305081688542*^9}, {3.9366886751026497`*^9, 3.936688679955563*^9}, {
   3.9374071275789423`*^9, 3.9374071419234467`*^9}, {3.9461384391740026`*^9, 
   3.946138445169738*^9}, {3.946141167871611*^9, 3.946141181999564*^9}, {
   3.946141827090726*^9, 3.946141827750345*^9}, {3.948710378221284*^9, 
   3.948710383825131*^9}, 3.9487104256770287`*^9, {3.94871843917358*^9, 
   3.948718531921958*^9}, {3.948718580241784*^9, 3.948718581061533*^9}, {
   3.9487186418852663`*^9, 3.948718643101501*^9}, 3.9487187085573463`*^9, {
   3.948732923647358*^9, 3.948732925769496*^9}, 
   3.948737343946762*^9},ExpressionUUID->"1ef8a59a-d834-40ef-86a8-\
99dc4a1d5a67"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel methods and classes for T = 0", "Section",
 CellChangeTimes->{{3.9165599443625517`*^9, 3.916559949616405*^9}, {
  3.917169847014802*^9, 
  3.917169848729768*^9}},ExpressionUUID->"e1a8482c-beb3-4c41-b9f2-\
3acff2f366ec"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$codeParser", "=", "\"\<Cpp\>\""}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetCodeParser", "[", "str_String", "]"}], ":=", 
  RowBox[{"Set", "[", 
   RowBox[{"$codeParser", ",", "str"}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9533827303361464`*^9, 3.953382751790977*^9}, {
  3.953382789995707*^9, 
  3.9533827916563463`*^9}},ExpressionUUID->"7834af40-4bf8-4a04-b1ca-\
9ec04bb3d613"],

Cell[CellGroupData[{

Cell["Kernel class creation", "Subsection",
 CellChangeTimes->{{3.916559983910474*^9, 3.916559989385697*^9}, {
  3.917169856535161*^9, 
  3.917169861537467*^9}},ExpressionUUID->"2a678e8d-3220-4dc3-80ad-\
773d02937bfb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelClass", "[", 
    RowBox[{
    "kernel_Association", ",", "parameterList_List", ",", "integrandFlow_", 
     ",", "constantFlow_", ",", "integrandDefinitions_String", ",", 
     "constantDefinitions_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"computeType", ",", "integrationVariables"}], "}"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClass: Invalid kernel!\>\"", 
          "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClass: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "<", "0"}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClass: T = 0 kernel cannot have < \
0 angles!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "===", 
         "\"\<Constant\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{"integrationVariables", "=", 
         RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "===", 
            "\"\<CartesianQuadrature\>\""}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "!=", "0"}], 
              ",", 
              RowBox[{
               RowBox[{
               "Print", "[", 
                "\"\<Cartesian integrator cannot have angles!\>\"", "]"}], 
               ";", 
               RowBox[{"Abort", "[", "]"}], ";"}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"Switch", "[", 
             RowBox[{
              RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], ",", 
              "\[IndentingNewLine]", "1", ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", "\"\<q\>\"", "}"}]}], ",", "\[IndentingNewLine]", 
              "2", ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{"\"\<qx\>\"", ",", "\"\<qy\>\""}], "}"}]}], ",", 
              "\[IndentingNewLine]", "3", ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{"\"\<qx\>\"", ",", "\"\<qy\>\"", ",", "\"\<qz\>\""}], 
                "}"}]}], ",", "\[IndentingNewLine]", "_", ",", 
              RowBox[{
               RowBox[{"Print", "[", 
                RowBox[{"\"\<Cartesian integrator for dimension \>\"", "<>", 
                 RowBox[{"ToString", "[", 
                  RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
                 "\"\< not implemented!\>\""}], "]"}], ";", 
               RowBox[{"Abort", "[", "]"}], ";"}]}], "\[IndentingNewLine]", 
             "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "0"}], 
              ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", "\"\<q\>\"", "}"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "1"}], 
              ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{"\"\<q\>\"", ",", "\"\<cos1\>\""}], "}"}]}]}], "]"}], 
            ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "2"}], "&&", 
               RowBox[{
                RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "==", "4"}]}], ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{
                "\"\<q\>\"", ",", "\"\<cos1\>\"", ",", "\"\<cos2\>\""}], 
                "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "2"}], "&&", 
               RowBox[{
                RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "4"}]}], ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{
                "\"\<q\>\"", ",", "\"\<cos1\>\"", ",", "\"\<phi\>\""}], 
                "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "3"}], 
              ",", 
              RowBox[{"integrationVariables", "=", 
               RowBox[{"{", 
                RowBox[{
                "\"\<q\>\"", ",", "\"\<cos1\>\"", ",", "\"\<cos2\>\"", ",", 
                 "\"\<phi\>\""}], "}"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], ">", "3"}], 
              ",", 
              RowBox[{
               RowBox[{
               "Print", "[", 
                "\"\<DiFfRG::CodeTools::MakeKernelClass: T = 0 kernel cannot \
have > 3 angles!\>\"", "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";"}]}], 
          "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
         "\"\<.kernel\>\""}], ",", 
        RowBox[{"Global`CreateKernelClass", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "]"}], "<>", 
           "\"\<_kernel\>\""}], ",", "integrandFlow", ",", "constantFlow", 
          ",", 
          RowBox[{"\"\<integrandBody\>\"", "->", "integrandDefinitions"}], 
          ",", 
          RowBox[{"\"\<constantBody\>\"", "->", "constantDefinitions"}], ",", 
          
          RowBox[{
          "\"\<integrationVariables\>\"", "->", "integrationVariables"}], ",", 
          RowBox[{"\"\<parameters\>\"", "->", 
           RowBox[{"Join", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"<|", 
               RowBox[{"\"\<Name\>\"", "->", "\"\<k\>\""}], "|>"}], "}"}], 
             ",", "parameterList"}], "]"}]}], ",", 
          RowBox[{"\"\<CodeParser\>\"", "->", "$codeParser"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\n", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.917167640881205*^9, 3.917167717307514*^9}, 
   3.9171706843857403`*^9, {3.917171193035145*^9, 3.917171200756341*^9}, 
   3.918569646523734*^9, {3.918622812746869*^9, 3.91862281746519*^9}, {
   3.919102876138693*^9, 3.919102889096034*^9}, {3.919147058535109*^9, 
   3.919147081558768*^9}, {3.919748952548492*^9, 3.919748953284323*^9}, 
   3.919995809983215*^9, {3.925708686745697*^9, 3.925708798036582*^9}, {
   3.92726109349473*^9, 3.927261096227631*^9}, {3.933226459644033*^9, 
   3.9332264772616653`*^9}, 3.933301613804916*^9, {3.93669497205359*^9, 
   3.936695021617154*^9}, {3.936718381218132*^9, 3.936718391862528*^9}, {
   3.9367209332590933`*^9, 3.936720938800125*^9}, {3.9367267403766317`*^9, 
   3.936726790851357*^9}, {3.938783747029664*^9, 3.938783791917678*^9}, {
   3.9461395399856853`*^9, 3.946139566809874*^9}, {3.946139630834118*^9, 
   3.946139750365835*^9}, {3.9461401005262127`*^9, 3.9461401368457947`*^9}, {
   3.946140346014332*^9, 3.94614036797021*^9}, 3.946140487397786*^9, {
   3.9461405532309628`*^9, 3.946140559546226*^9}, {3.946140616890544*^9, 
   3.9461406220419693`*^9}, {3.946140730643016*^9, 3.9461407339349747`*^9}, {
   3.9533786045839157`*^9, 3.9533789266925707`*^9}, {3.953379646835949*^9, 
   3.953379650435631*^9}, {3.9533813724727783`*^9, 3.953381397984192*^9}, {
   3.9533828045999517`*^9, 3.953382805840164*^9}, {3.95338295850062*^9, 
   3.953382960415975*^9}, {3.9533830294485693`*^9, 3.95338304008957*^9}, {
   3.953383104504438*^9, 3.953383130032289*^9}, {3.953383485072506*^9, 
   3.953383492117036*^9}, {3.953383528289494*^9, 3.953383542220173*^9}, {
   3.953383646598687*^9, 3.953383658900831*^9}, {3.953384752485641*^9, 
   3.9533847557605553`*^9}, {3.953384807701336*^9, 3.9533848133653603`*^9}, {
   3.953385292864338*^9, 3.953385304388358*^9}, {3.953385443597097*^9, 
   3.9533854970373383`*^9}},ExpressionUUID->"78f3c9b2-0d02-4f66-a3ed-\
0f1df4a47e07"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel integrator creation", "Subsection",
 CellChangeTimes->{{3.916559983910474*^9, 3.916559989385697*^9}, {
  3.917169856535161*^9, 3.917169861537467*^9}, {3.9197511605353403`*^9, 
  3.919751162212285*^9}},ExpressionUUID->"d54528b8-9b38-43bf-b3a0-\
0dccee03210a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeIntegratorTypes", "[", "kernel_Association", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "computeType", ",", "kernelName", ",", "suffix", ",", "integrator", ",",
        "integratorAD"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid kernel!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kernelName", "=", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "]"}], "<>", 
        "\"\<_kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"suffix", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<QMC\>\"", ",", "\"\<QMC\>\"", ",", 
         "\[IndentingNewLine]", "\"\<Constant\>\"", ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "=!=", "0"}], 
            ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Constant integrator cannot have angles!\>\"", 
              "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          "\"\<Constant\>\""}], ",", "\[IndentingNewLine]", 
         "\"\<Quadrature\>\"", ",", 
         RowBox[{"DeviceChoice", "[", 
          RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\<CartesianQuadrature\>\"", ",", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "=!=", "0"}], 
            ",", 
            RowBox[{
             RowBox[{
             "Print", "[", "\"\<Cartesian integrator cannot have angles!\>\"",
               "]"}], ";", 
             RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
          RowBox[{"\"\<Cartesian\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}]}]}], ",", 
         "\[IndentingNewLine]", "_", ",", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{"\"\<Unknown integration type \>\"", "<>", 
            RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "<>", "\"\<!\>\""}],
            "]"}], ";", 
          RowBox[{"Abort", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "==", 
         "\"\<CartesianQuadrature\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::Integrator\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<D\>\"", "<>", "suffix", "<>", "\"\<<\>\"", "<>", 
           "computeType", "<>", "\"\<, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::Integrator\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<D\>\"", "<>", "suffix", "<>", "\"\<<\>\"", "<>", 
           "\"\<autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}], " ", ",", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Switch", "[", 
          RowBox[{
           RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], ",", 
           "\[IndentingNewLine]", "0", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"integrator", "=", 
             RowBox[{
             "\"\<DiFfRG::Integrator\>\"", "<>", "suffix", "<>", "\"\<<\>\"", 
              "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
              "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
              "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
            "\[IndentingNewLine]", 
            RowBox[{"integratorAD", "=", 
             RowBox[{
             "\"\<DiFfRG::Integrator\>\"", "<>", "suffix", "<>", "\"\<<\>\"", 
              "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
              "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
              "\"\<<__REGULATOR__>>\>\""}]}]}], " ", ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "1", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"integrator", "=", 
             RowBox[{
             "\"\<DiFfRG::IntegratorAngle\>\"", "<>", "suffix", "<>", 
              "\"\<<\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
              "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
              "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
            "\[IndentingNewLine]", 
            RowBox[{"integratorAD", "=", 
             RowBox[{
             "\"\<DiFfRG::IntegratorAngle\>\"", "<>", "suffix", "<>", 
              "\"\<<\>\"", "<>", 
              RowBox[{"ToString", "[", 
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
              "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
              "\"\<<__REGULATOR__>>\>\""}]}]}], " ", ",", 
           "\[IndentingNewLine]", "\[IndentingNewLine]", "2", ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "3"}], "&&", 
               
               RowBox[{
                RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "4"}]}], ",", 
              RowBox[{
               RowBox[{
               "Print", "[", "\"\<Inconsistent dimensions!\>\"", "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "==", "3"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"integrator", "=", 
                RowBox[{
                "\"\<DiFfRG::Integrator3D\>\"", "<>", "suffix", "<>", 
                 "\"\<<\>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
                 "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";",
                "\[IndentingNewLine]", 
               RowBox[{"integratorAD", "=", 
                RowBox[{
                "\"\<DiFfRG::Integrator3D\>\"", "<>", "suffix", "<>", 
                 "\"\<<autodiff::real, \>\"", "<>", "kernelName", "<>", 
                 "\"\<<__REGULATOR__>>\>\""}]}], " ", ";"}], 
              "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"integrator", "=", 
                RowBox[{
                "\"\<DiFfRG::Integrator4D2Ang\>\"", "<>", "suffix", "<>", 
                 "\"\<<\>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
                 "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";",
                "\[IndentingNewLine]", 
               RowBox[{"integratorAD", "=", 
                RowBox[{
                "\"\<DiFfRG::Integrator4D2Ang\>\"", "<>", "suffix", "<>", 
                 "\"\<<autodiff::real, \>\"", "<>", "kernelName", "<>", 
                 "\"\<<__REGULATOR__>>\>\""}]}], " ", ";"}]}], 
             "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", "3", ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "4"}], ",", 
              RowBox[{
               RowBox[{
               "Print", "[", "\"\<Inconsistent dimensions!\>\"", "]"}], ";", 
               RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"integrator", "=", 
             RowBox[{
             "\"\<DiFfRG::Integrator4D\>\"", "<>", "suffix", "<>", 
              "\"\<<\>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
              "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
            "\[IndentingNewLine]", 
            RowBox[{"integratorAD", "=", 
             RowBox[{
             "\"\<DiFfRG::Integrator4D\>\"", "<>", "suffix", "<>", 
              "\"\<<autodiff::real, \>\"", "<>", "kernelName", "<>", 
              "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"integrator", ",", "integratorAD"}], "}"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.928501196225491*^9, 3.928501265660604*^9}, {
   3.928501306959908*^9, 3.928501308036629*^9}, {3.928501380498682*^9, 
   3.928501460163002*^9}, {3.928501498345906*^9, 3.928501507576914*^9}, {
   3.928501542870242*^9, 3.9285016041697617`*^9}, {3.928502611050695*^9, 
   3.9285026166742773`*^9}, {3.9366880699946012`*^9, 3.936688198983109*^9}, {
   3.936688258575965*^9, 3.9366882866602077`*^9}, {3.936688317228243*^9, 
   3.936688393388735*^9}, {3.936688551298007*^9, 3.9366885573416224`*^9}, {
   3.936688613058464*^9, 3.936688622106832*^9}, 3.936688655857829*^9, 
   3.938783725229727*^9, {3.93878381194477*^9, 3.938783826785656*^9}, {
   3.93878621123248*^9, 3.9387862166924553`*^9}, {3.946138518141521*^9, 
   3.9461385477744017`*^9}, {3.946138738338314*^9, 3.9461387477370777`*^9}, {
   3.946138940817987*^9, 3.9461389438657227`*^9}, {3.946139056877941*^9, 
   3.9461391904420757`*^9}, {3.946139268110026*^9, 3.9461392684859343`*^9}, 
   3.9461419801784163`*^9},ExpressionUUID->"da14ce31-034e-4146-8d7e-\
2340b570b679"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelIntegrator", "[", 
    RowBox[{"kernel_Association", ",", "parameterList_List"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "computeType", ",", "kernelName", ",", "className", ",", "integrator", 
       ",", "integratorAD", ",", "gridSizes", ",", "argList", ",", 
       "paramList", ",", "paramListAD", ",", "kernelFile", ",", "hhFile", ",",
        "ccFile", ",", "cuFile", ",", "hh", ",", "cc", ",", "cu"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid kernel!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{"Print", "[", "\"\<Invalid parameter List!\>\"", "]"}], ";", 
         
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kernelName", "=", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "]"}], "<>", 
        "\"\<_kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"className", "=", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "]"}], "<>", 
        "\"\<_integrator\>\""}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"integrator", ",", "integratorAD"}], "}"}], "=", 
       RowBox[{"MakeIntegratorTypes", "[", "kernel", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"gridSizes", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "=!=", 
          "\"\<CartesianQuadrature\>\""}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"kernel", "[", "\"\<d\>\"", "]"}]}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"argList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<const \>\"", "<>", 
             RowBox[{
              RowBox[{"CppType", "[", "computeType", "]"}], "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", 
             RowBox[{"ArgType", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", "\"\< \>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramListAD", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"KeyExistsQ", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<AD\>\""}], "]"}], 
               "&&", 
               RowBox[{
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<AD\>\"", "]"}], "==",
                 "True"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppTypeAD", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppType", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}]}], "]"}], "\[IndentingNewLine]", 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", "\n", 
      RowBox[{"kernelFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<.kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hhFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"ccFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cc\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"cuFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cu\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"hh", "=", 
       RowBox[{
       "\"\<#pragma once\n\ntemplate <typename REG> class \>\"", "<>", 
        "kernelName", "<>", 
        "\"\<;\n#include \\\"../def.hh\\\"\n\n#include <memory>\n#include \
<future>\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    class \>\"", "<>",
         "className", "<>", "\"\<\n    {\n    public:\n      \>\"", "<>", 
        "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", "gridSizes", "]"}], "<>", 
        "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const JSONValue& json);\n      \>\"", "<>", 
        "className", "<>", "\"\<(const \>\"", "<>", "className", "<>", 
        "\"\<& other);\n      ~\>\"", "<>", "className", "<>", 
        "\"\<();\n\n      template<typename NT, typename... T>\n      \
std::future<NT> request(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return request_CT(std::forward<T>(t)...);\n     \
   else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
request_AD(std::forward<T>(t)...);\>\""}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<>, \\\"Unknown type requested of \>\"", "<>",
            "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return \
request_CT(std::forward<T>(t)...);\>\""}]}], "\[IndentingNewLine]", "]"}], 
        "<>", "\"\<\n      }\n\n      template<typename NT, typename... T>\n  \
    NT get(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\n        \
else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
get_AD(std::forward<T>(t)...);\>\""}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<>, \\\"Unknown type requested of \>\"", "<>",
            "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\>\""}]}], 
         "\[IndentingNewLine]", "]"}], "<>", 
        "\"\<\n      }\n\n    private:\n      std::future<\>\"", "<>", 
        "computeType", "<>", "\"\<> request_CT(const \>\"", "<>", 
        "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<);\n      \>\"", "<>", "computeType", "<>", 
        "\"\< get_CT(const \>\"", "<>", "computeType", "<>", "\"\< k, \>\"", "<>",
         "paramList", "<>", "\"\<);\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::future<autodiff::real> request_AD(const \>\"", "<>",
            "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\n      autodiff::real get_AD(const \>\"", "<>", 
           "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}], 
         "\[IndentingNewLine]", "]"}], "<>", 
        "\"\<\n\n      QuadratureProvider& quadrature_provider;\n      const \
std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", "gridSizes", "]"}], "<>", 
        "\"\<> grid_sizes;\n      std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", "gridSizes", "]"}], "<>", 
        "\"\<> jac_grid_sizes;\n      const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent;\n      const \>\"", "<>", "computeType", "<>", 
        "\"\< jacobian_quadrature_factor;\n\t  const JSONValue json;\n\n      \
std::unique_ptr<\>\"", "<>", "integrator", "<>", "\"\<> integrator;\>\"", "<>",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::unique_ptr<\>\"", "<>", "integratorAD", "<>", 
           "\"\<> integrator_AD;\>\""}], ",", "\[IndentingNewLine]", 
          "\"\<\>\""}], "\[IndentingNewLine]", "]"}], "<>", 
        "\"\<\n    };\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cc", "=", 
       RowBox[{
       "\"\<#include \\\"\>\"", "<>", "cuFile", "<>", "\"\<\\\"\>\""}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"cu", "=", 
       RowBox[{
       "\"\<#define FLOW_CODE\n\n#include \\\"\>\"", "<>", "hhFile", "<>", 
        "\"\<\\\"\n#include \\\"\>\"", "<>", "kernelFile", "<>", 
        "\"\<\\\"\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    \>\"", "<>",
         "className", "<>", "\"\<::\>\"", "<>", "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", "gridSizes", "]"}], "<>", 
        "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const JSONValue& json)\n        : \
quadrature_provider(quadrature_provider), grid_sizes(grid_sizes), \
x_extent(x_extent), \
jacobian_quadrature_factor(json.get_double(\\\"/integration/jacobian_\
quadrature_factor\\\")), json(json)\n    {\n      integrator = \
std::make_unique<\>\"", "<>", "integrator", "<>", 
        "\"\<>(quadrature_provider, grid_sizes, x_extent, json);\>\"", "<>", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{"\"\<\n      for(uint i = 0; i < \>\"", "<>", 
           RowBox[{"ToString", "[", "gridSizes", "]"}], "<>", 
           "\"\<; ++i)\n        jac_grid_sizes[i] = \
uint(jacobian_quadrature_factor * grid_sizes[i]);\n      integrator_AD = \
std::make_unique<\>\"", "<>", "integratorAD", "<>", 
           "\"\<>(quadrature_provider, jac_grid_sizes, x_extent, \
json);\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}], 
         "\[IndentingNewLine]", "]"}], "<>", "\"\<\n    }\n\n    \>\"", "<>", 
        "className", "<>", "\"\<::\>\"", "<>", "className", "<>", 
        "\"\<(const \>\"", "<>", "className", "<>", 
        "\"\<& other)\n        : \
quadrature_provider(other.quadrature_provider), grid_sizes(other.grid_sizes), \
jac_grid_sizes(other.jac_grid_sizes), x_extent(other.x_extent), \n          \
jacobian_quadrature_factor(other.jacobian_quadrature_factor), \
json(other.json),\n          integrator(std::make_unique<\>\"", "<>", 
        "integrator", "<>", 
        "\"\<>(other.quadrature_provider, other.grid_sizes, other.x_extent, \
other.json))\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<,\n          integrator_AD(std::make_unique<\>\"", "<>", 
           "integratorAD", "<>", 
           "\"\<>(other.quadrature_provider, other.jac_grid_sizes, \
other.x_extent, other.json))\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}],
          "\[IndentingNewLine]", "]"}], "<>", 
        "\"\<\n    {\n    }\n\n    \>\"", "<>", "className", "<>", 
        "\"\<::~\>\"", "<>", "className", "<>", 
        "\"\<() = default;\n\n    std::future<\>\"", "<>", "computeType", 
        "<>", "\"\<> \>\"", "<>", "className", "<>", 
        "\"\<::request_CT(const \>\"", "<>", "computeType", "<>", 
        "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->request(k, \>\"", "<>", 
        "argList", "<>", "\"\<);\n    }\n\n    \>\"", "<>", "computeType", 
        "<>", "\"\< \>\"", "<>", "className", "<>", "\"\<::get_CT(const \>\"",
         "<>", "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->get(k, \>\"", "<>", "argList",
         "<>", "\"\<);\n    }\n\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n    std::future<autodiff::real> \>\"", "<>", "className", 
           "<>", "\"\<::request_AD(const \>\"", "<>", "computeType", "<>", 
           "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->request(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\n\n    autodiff::real \>\"", "<>", 
           "className", "<>", "\"\<::get_AD(const \>\"", "<>", "computeType", 
           "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->get(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\>\""}], ",", 
          "\[IndentingNewLine]", "\"\<\>\""}], "\[IndentingNewLine]", "]"}], 
        "<>", "\"\<\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "hhFile"}], ",", "hh"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "ccFile"}], ",", "cc"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "cuFile"}], ",", "cu"}], "]"}], ";"}]}], "\n", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916559998154023*^9, 3.916560106266964*^9}, {
   3.91716520935349*^9, 3.917165246043644*^9}, {3.917165277651051*^9, 
   3.917165297976695*^9}, {3.917165796645993*^9, 3.917165798397508*^9}, {
   3.917165914745461*^9, 3.9171659535684633`*^9}, {3.917167326315914*^9, 
   3.917167491692699*^9}, {3.917167532566827*^9, 3.917167540882275*^9}, {
   3.9171676253035917`*^9, 3.917167632252792*^9}, {3.917167760799676*^9, 
   3.917167781100957*^9}, {3.917169896452955*^9, 3.917169984550014*^9}, {
   3.917170687178689*^9, 3.917170697784842*^9}, {3.917171216891326*^9, 
   3.917171298424814*^9}, {3.917174121976579*^9, 3.917174131892831*^9}, {
   3.917351596746902*^9, 3.917351650569015*^9}, {3.917352265784533*^9, 
   3.917352268142814*^9}, {3.917352325741211*^9, 3.917352327711615*^9}, {
   3.918318506459937*^9, 3.918318620968598*^9}, {3.91831866285228*^9, 
   3.918318666158856*^9}, {3.9183187553030376`*^9, 3.918318951802873*^9}, {
   3.918569649940837*^9, 3.91856965527144*^9}, {3.918622819823476*^9, 
   3.918622841141554*^9}, {3.919102863918349*^9, 3.919102868487087*^9}, {
   3.919154272651067*^9, 3.91915428775537*^9}, {3.91974895474988*^9, 
   3.919748959897964*^9}, 3.919751171004863*^9, {3.919751216201344*^9, 
   3.919751287585574*^9}, {3.919752120816072*^9, 3.919752169959304*^9}, {
   3.9197522072649593`*^9, 3.919752391498907*^9}, {3.9197946653541193`*^9, 
   3.919794810926959*^9}, {3.920610988692025*^9, 3.920610991529443*^9}, {
   3.924850698482211*^9, 3.924850720751457*^9}, {3.925272975498078*^9, 
   3.925273003497835*^9}, {3.925273146240754*^9, 3.925273151779772*^9}, {
   3.927261100245158*^9, 3.927261107407052*^9}, {3.927459358507981*^9, 
   3.927459361309004*^9}, {3.927459425695724*^9, 3.927459429824987*^9}, {
   3.927459465717639*^9, 3.927459595197594*^9}, 3.927459963462429*^9, {
   3.928501372005492*^9, 3.928501373688105*^9}, {3.928501470321299*^9, 
   3.928501486716698*^9}, {3.928501840585361*^9, 3.92850196340844*^9}, 
   3.928501998599894*^9, {3.928502043735539*^9, 3.928502058269977*^9}, {
   3.9285021158372717`*^9, 3.928502223718442*^9}, {3.928502256686653*^9, 
   3.928502400494481*^9}, 3.9285026931020203`*^9, {3.933227191347429*^9, 
   3.933227191587709*^9}, {3.933301622342429*^9, 3.933301629309677*^9}, {
   3.938783836549065*^9, 3.9387838450311737`*^9}, {3.938785289927703*^9, 
   3.938785343967744*^9}, {3.946140901048171*^9, 
   3.9461410243956413`*^9}},ExpressionUUID->"8bba18f0-70fd-41ef-a392-\
7beb10564454"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel methods and classes for finite T", "Section",
 CellChangeTimes->{{3.9165599443625517`*^9, 3.916559949616405*^9}, {
  3.916560132935689*^9, 3.916560134041703*^9}, {3.918570542350849*^9, 
  3.918570543476509*^9}},ExpressionUUID->"03e96b37-b52f-4974-83b1-\
695c05f14530"],

Cell[CellGroupData[{

Cell["Kernel Class creation", "Subsection",
 CellChangeTimes->{{3.916559983910474*^9, 3.916559989385697*^9}, {
  3.91914387226638*^9, 
  3.919143872502099*^9}},ExpressionUUID->"603ba85b-8322-4460-bc76-\
e0fcaaeb2244"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelClassFiniteT", "[", 
    RowBox[{
    "kernel_Association", ",", "parameterList_List", ",", "integrandFlow_", 
     ",", "constantFlow_", ",", "integrandDefinitions_String", ",", 
     "constantDefinitions_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"computeType", ",", "integrationVariables"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClassFiniteT: Invalid \
kernel!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClassFiniteT: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "<", "0"}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClassFiniteT: finite T kernel \
cannot have < 0 angles!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "0"}], ",", 
        RowBox[{"integrationVariables", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<q\>\"", ",", "\"\<q0\>\""}], "}"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "1"}], ",", 
        RowBox[{"integrationVariables", "=", 
         RowBox[{"{", 
          RowBox[{"\"\<q\>\"", ",", "\"\<cos1\>\"", ",", "\"\<q0\>\""}], 
          "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "2"}], ",", 
        RowBox[{"integrationVariables", "=", 
         RowBox[{"{", 
          RowBox[{
          "\"\<q\>\"", ",", "\"\<cos1\>\"", ",", "\"\<phi\>\"", ",", 
           "\"\<q0\>\""}], "}"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], ">", "2"}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelClassFiniteT: finite T kernel \
cannot have > 2 angles!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
         "\"\<.kernel\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{"CreateKernelClass", "[", 
         RowBox[{
          RowBox[{"ToString", "[", 
           RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "]"}], ",", 
          "integrandFlow", ",", "constantFlow", ",", 
          RowBox[{"\"\<body\>\"", "->", "integrandDefinitions"}], ",", 
          RowBox[{
          "\"\<integrationVariables\>\"", "->", "integrationVariables"}], ",", 
          RowBox[{"\"\<parameters\>\"", "->", "parameterList"}], ",", 
          RowBox[{"\"\<CodeParser\>\"", "->", "$codeParser"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";"}]}], "\n", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.9165601783062162`*^9, 3.916560198189099*^9}, {
   3.916560320819687*^9, 3.916560326159466*^9}, {3.917352171107238*^9, 
   3.917352242496072*^9}, 3.917353306461787*^9, 3.9183816769392653`*^9, {
   3.918381900161125*^9, 3.918381902904733*^9}, {3.918569674268691*^9, 
   3.918569676355742*^9}, {3.918622863013516*^9, 3.918622868423399*^9}, {
   3.919102811616469*^9, 3.919102828445014*^9}, {3.919138689043104*^9, 
   3.919138783256471*^9}, {3.919146988971302*^9, 3.919147041965082*^9}, {
   3.919748960884612*^9, 3.91974896105462*^9}, 3.9199958383361263`*^9, {
   3.925710313493471*^9, 3.9257104264619083`*^9}, {3.927261112767771*^9, 
   3.927261115296638*^9}, 3.93322668388476*^9, 3.9333016355877857`*^9, {
   3.938499724594277*^9, 3.9384997359915113`*^9}, {3.9387860820960817`*^9, 
   3.938786099700395*^9}, {3.953381439599925*^9, 3.953381442039784*^9}, {
   3.953381531113062*^9, 3.9533816006918917`*^9}, 
   3.953382811166594*^9},ExpressionUUID->"90778445-d71e-4d13-b03a-\
7313cb6faf0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Kernel integrator creation", "Subsection",
 CellChangeTimes->{{3.916559983910474*^9, 3.916559989385697*^9}, {
  3.917169856535161*^9, 3.917169861537467*^9}, {3.9197511605353403`*^9, 
  3.919751162212285*^9}},ExpressionUUID->"14dced2c-440b-4ab2-acc6-\
6e5d0c8a7c99"],

Cell[CellGroupData[{

Cell["x0", "Subsubsection",
 CellChangeTimes->{{3.919146327450057*^9, 
  3.919146329372212*^9}},ExpressionUUID->"d2cff38d-c13c-4061-b3c7-\
4409245852c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelIntegratorFiniteTx0", "[", 
    RowBox[{"kernel_Association", ",", "parameterList_List"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"computeType", ".", "kernelName"}], ",", "className", ",", 
       "integrator", ",", "integratorAD", ",", "argList", ",", "paramList", 
       ",", "paramListAD", ",", "kernelFile", ",", "hhFile", ",", "ccFile", 
       ",", "cuFile", ",", "hh", ",", "cc", ",", "cu"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelIntegratorFiniteTx0: Invalid \
kernel!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelIntegratorFiniteTx0: Invalid \
parameter List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kernelName", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<_kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"className", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<_integrator\>\""}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorAngleFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorAngleFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "2"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "4"}], ",", 
           RowBox[{
            RowBox[{"Print", "[", "\"\<Inconsistent dimensions!\>\"", "]"}], 
            ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::Integrator4DFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::Integrator4DFiniteTx0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\n", "\[IndentingNewLine]", 
      RowBox[{"argList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<const \>\"", "<>", 
             RowBox[{
              RowBox[{"CppType", "[", "computeType", "]"}], "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", 
             RowBox[{"ArgType", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", "\"\< \>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramListAD", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"KeyExistsQ", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<AD\>\""}], "]"}], 
               "&&", 
               RowBox[{
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<AD\>\"", "]"}], "==",
                 "True"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppTypeAD", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppType", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}]}], "]"}], "\[IndentingNewLine]", 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\n", "\[IndentingNewLine]", 
      RowBox[{"kernelFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<.kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hhFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"ccFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cc\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"cuFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cu\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"hh", "=", 
       RowBox[{
       "\"\<#pragma once\n\ntemplate <typename REG> class \>\"", "<>", 
        "kernelName", "<>", 
        "\"\<;\n#include \\\"../def.hh\\\"\n\n#include <memory>\n#include \
<future>\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    class \>\"", "<>",
         "className", "<>", "\"\<\n    {\n    public:\n      \>\"", "<>", 
        "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "2"}], "]"}], 
        "<>", "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const \>\"", "<>", "computeType", "<>", 
        "\"\< x0_extent, const uint x0_summands, const JSONValue& json, const \
uint max_block_size = 256);\n      \>\"", "<>", "className", "<>", 
        "\"\<(const \>\"", "<>", "className", "<>", 
        "\"\<& other);\n      ~\>\"", "<>", "className", "<>", 
        "\"\<();\n\n      template<typename NT, typename... T>\n      \
std::future<NT> request(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return request_CT(std::forward<T>(t)...);\n     \
   else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
request_AD(std::forward<T>(t)...);\>\""}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<> , \\\"Unknown type requested of \>\"", 
           "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return \
request_CT(std::forward<T>(t)...);\>\""}]}], "\[IndentingNewLine]", "]"}], 
        "<>", "\"\<\n      }\n\n      template<typename NT, typename... T>\n  \
    NT get(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\n        \
else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
get_AD(std::forward<T>(t)...);\>\""}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<>, \\\"Unknown type requested of \>\"", "<>",
            "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\>\""}]}], 
         "\[IndentingNewLine]", "]"}], "<>", 
        "\"\<\n      }\n\n      void set_T(const \>\"", "<>", "computeType", 
        "<>", "\"\< value);\n      void set_x0_extent(const \>\"", "<>", 
        "computeType", "<>", 
        "\"\< value);\n\n    private:\n      std::future<\>\"", "<>", 
        "computeType", "<>", "\"\<> request_CT(const \>\"", "<>", 
        "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<);\n      \>\"", "<>", "computeType", "<>", 
        "\"\< get_CT(const \>\"", "<>", "computeType", "<>", "\"\< k, \>\"", "<>",
         "paramList", "<>", "\"\<);\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::future<autodiff::real> request_AD(const \>\"", "<>",
            "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\n      autodiff::real get_AD(const \>\"", "<>", 
           "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}], "]"}], 
        "<>", "\"\<\n\n      QuadratureProvider& quadrature_provider;\n      \
const std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "2"}], "]"}], 
        "<>", "\"\<> grid_sizes;\n      std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "2"}], "]"}], 
        "<>", "\"\<> jac_grid_sizes;\n      const \>\"", "<>", "computeType", 
        "<>", "\"\< x_extent;\n      const \>\"", "<>", "computeType", "<>", 
        "\"\< x0_extent;\n      const uint x0_summands;\n      const \>\"", "<>",
         "computeType", "<>", "\"\< m_T;\n      const \>\"", "<>", 
        "computeType", "<>", 
        "\"\< jacobian_quadrature_factor;\n\t  const JSONValue json;\n\n      \
std::unique_ptr<\>\"", "<>", "integrator", "<>", "\"\<> integrator;\>\"", "<>",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::unique_ptr<\>\"", "<>", "integratorAD", "<>", 
           "\"\<> integrator_AD;\>\""}], ",", "\[IndentingNewLine]", 
          "\"\<\>\""}], "]"}], "<>", 
        "\"\<\n    };\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cc", "=", 
       RowBox[{
       "\"\<#include \\\"\>\"", "<>", "cuFile", "<>", "\"\<\\\"\>\""}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"cu", "=", 
       RowBox[{
       "\"\<#define FLOW_CODE\n\n#include \\\"\>\"", "<>", "hhFile", "<>", 
        "\"\<\\\"\n#include \\\"\>\"", "<>", "kernelFile", "<>", 
        "\"\<\\\"\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    \>\"", "<>",
         "className", "<>", "\"\<::\>\"", "<>", "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "2"}], "]"}], 
        "<>", "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const \>\"", "<>", "computeType", "<>", 
        "\"\< x0_extent, const uint x0_summands, const JSONValue& json)\n     \
   : quadrature_provider(quadrature_provider), grid_sizes(grid_sizes), \
x_extent(x_extent), \n          x0_extent(x0_extent), \
x0_summands(x0_summands), \
jacobian_quadrature_factor(json.get_double(\\\"/integration/jacobian_\
quadrature_factor\\\")), json(json)\>\"", "<>", 
        "\"\<\n    {\n      integrator = std::make_unique<\>\"", "<>", 
        "integrator", "<>", 
        "\"\<>(quadrature_provider, grid_sizes, x_extent, x0_extent, \
x0_summands, json);\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{"\"\<\n      for(uint i = 0; i < \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{
             RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "2"}], 
            "]"}], "<>", 
           "\"\<; ++i)\n        jac_grid_sizes[i] = \
uint(jacobian_quadrature_factor * grid_sizes[i]);\n      integrator_AD = \
std::make_unique<\>\"", "<>", "integratorAD", "<>", 
           "\"\<>(quadrature_provider, jac_grid_sizes, x_extent, x0_extent, \
x0_summands, json);\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}], "]"}], 
        "<>", "\"\<\n    }\n\n    \>\"", "<>", "className", "<>", 
        "\"\<::\>\"", "<>", "className", "<>", "\"\<(const \>\"", "<>", 
        "className", "<>", 
        "\"\<& other)\n        : \
quadrature_provider(other.quadrature_provider), grid_sizes(other.grid_sizes), \
jac_grid_sizes(other.jac_grid_sizes), x_extent(other.x_extent), \n          \
x0_extent(other.x0_extent), x0_summands(other.x0_summands), \
jacobian_quadrature_factor(other.jacobian_quadrature_factor), \
json(other.json),\n          integrator(std::make_unique<\>\"", "<>", 
        "integrator", "<>", 
        "\"\<>(other.quadrature_provider, other.grid_sizes, \n            \
other.x_extent, other.x0_extent, other.x0_summands, other.json))\>\"", "<>", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<,\n          integrator_AD(std::make_unique<\>\"", "<>", 
           "integratorAD", "<>", 
           "\"\<>(other.quadrature_provider, other.jac_grid_sizes, \n         \
   other.x_extent, other.x0_extent, other.x0_summands, other.json))\>\""}], 
          ",", "\[IndentingNewLine]", "\"\<\>\""}], "]"}], "<>", 
        "\"\<\n    {\n    }\n\n    void  \>\"", "<>", "className", "<>", 
        "\"\<::set_T(const \>\"", "<>", "computeType", "<>", 
        "\"\< value)\n    {\n      integrator->set_T(value);\>\"", "<>", "\n",
         "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          "\"\<\n      integrator_AD->set_T(value);\>\"", ",", "\"\<\>\""}], 
         "]"}], "<>", "\"\<\n    }\n    void  \>\"", "<>", "className", "<>", 
        "\"\<::set_x0_extent(const \>\"", "<>", "computeType", "<>", 
        "\"\< value)\n    {\n      integrator->set_x0_extent(value);\>\"", "<>",
         "\n", "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          "\"\<\n      integrator_AD->set_x0_extent(value);\>\"", ",", 
          "\"\<\>\""}], "]"}], "<>", "\"\<\n    }\n\n    \>\"", "<>", 
        "className", "<>", "\"\<::~\>\"", "<>", "className", "<>", 
        "\"\<() = default;\n\n    std::future<\>\"", "<>", "computeType", 
        "<>", "\"\<> \>\"", "<>", "className", "<>", 
        "\"\<::request_CT(const \>\"", "<>", "computeType", "<>", 
        "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->request(k, \>\"", "<>", 
        "argList", "<>", "\"\<);\n    }\n\n    \>\"", "<>", "computeType", 
        "<>", "\"\< \>\"", "<>", "className", "<>", "\"\<::get_CT(const \>\"",
         "<>", "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->get(k, \>\"", "<>", "argList",
         "<>", "\"\<);\n    }\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n\n    std::future<autodiff::real> \>\"", "<>", "className", 
           "<>", "\"\<::request_AD(const \>\"", "<>", "computeType", "<>", 
           "\"\< k, const \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->request(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\n\n    autodiff::real \>\"", "<>", 
           "className", "<>", "\"\<::get_AD(const \>\"", "<>", "computeType", 
           "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->get(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\>\""}], ",", 
          "\[IndentingNewLine]", "\"\<\>\""}], "]"}], "<>", 
        "\"\<\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}], ";", 
      "\n", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "hhFile"}], ",", "hh"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "ccFile"}], ",", "cc"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "cuFile"}], ",", "cu"}], "]"}], ";"}]}], "\n", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.919748961234236*^9, 3.919748962154007*^9}, {
   3.919752428531228*^9, 3.91975264372303*^9}, {3.919794820312089*^9, 
   3.919794866537879*^9}, {3.9248507277731743`*^9, 3.924850733342867*^9}, {
   3.925273044458791*^9, 3.925273081645796*^9}, 3.925273156061061*^9, {
   3.925710448062304*^9, 3.925710455449523*^9}, {3.927261119696328*^9, 
   3.927261126364409*^9}, {3.927702603529394*^9, 3.927702681083766*^9}, {
   3.927703431217563*^9, 3.927703434627574*^9}, {3.930661110220089*^9, 
   3.930661115464098*^9}, {3.930661220232263*^9, 3.93066129292456*^9}, {
   3.9306613656720657`*^9, 3.930661468591651*^9}, {3.930661589816325*^9, 
   3.930661592346637*^9}, {3.930665543845352*^9, 3.930665685736877*^9}, {
   3.93322724221077*^9, 3.933227242636718*^9}, 3.933301640543181*^9, {
   3.938785347004244*^9, 3.93878535411602*^9}, {3.9387853881082153`*^9, 
   3.9387853914239893`*^9}, {3.938785570223647*^9, 3.938785580591526*^9}, {
   3.938786122430793*^9, 3.9387861230628777`*^9}, {3.938786239261877*^9, 
   3.938786256346414*^9}},ExpressionUUID->"e9663e6c-dbd3-4d06-b4b4-\
493a2a25aa69"]
}, Closed]],

Cell[CellGroupData[{

Cell["q0", "Subsubsection",
 CellChangeTimes->{{3.919146327450057*^9, 3.919146351393811*^9}, 
   3.919927824756434*^9, 
   3.919928294332721*^9},ExpressionUUID->"ffdd5553-b19d-4f0e-9d22-\
641bc500d1c8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelIntegratorFiniteTq0", "[", 
    RowBox[{"kernel_Association", ",", "parameterList_List"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "computeType", ",", "kernelName", ",", "className", ",", "integrator", 
       ",", "integratorAD", ",", "argList", ",", "paramList", ",", 
       "paramListAD", ",", "kernelFile", ",", "hhFile", ",", "ccFile", ",", 
       "cuFile", ",", "hh", ",", "cc", ",", "cu"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpec", "[", "kernel", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelIntegratorFiniteTq0: Invalid \
kernel!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelIntegratorFiniteTq0: Invalid \
parameter List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"computeType", "=", 
       RowBox[{"kernel", "[", "\"\<ctype\>\"", "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"kernelName", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<_kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"className", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<_integrator\>\""}]}], ";", " ", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "0"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "1"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorAngleFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, \>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::IntegratorAngleFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "]"}], "<>", 
           "\"\<, autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "==", "2"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"kernel", "[", "\"\<d\>\"", "]"}], "!=", "4"}], ",", 
           RowBox[{
            RowBox[{"Print", "[", "\"\<Inconsistent dimensions!\>\"", "]"}], 
            ";", 
            RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integrator", "=", 
          RowBox[{"\"\<DiFfRG::Integrator4DFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<\>\"", "<>", "computeType", "<>", "\"\<, \>\"", "<>", 
           "kernelName", "<>", "\"\<<__REGULATOR__>>\>\""}]}], " ", ";", 
         "\[IndentingNewLine]", 
         RowBox[{"integratorAD", "=", 
          RowBox[{"\"\<DiFfRG::Integrator4DFiniteTq0\>\"", "<>", 
           RowBox[{"DeviceChoice", "[", 
            RowBox[{"kernel", "[", "\"\<Device\>\"", "]"}], "]"}], "<>", 
           "\"\<<autodiff::real, \>\"", "<>", "kernelName", "<>", 
           "\"\<<__REGULATOR__>>\>\""}]}]}]}], " ", "\[IndentingNewLine]", 
       "]"}], ";", "\n", "\[IndentingNewLine]", 
      RowBox[{"argList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<\>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramList", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"\"\<const \>\"", "<>", 
             RowBox[{
              RowBox[{"CppType", "[", "computeType", "]"}], "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", 
             RowBox[{"ArgType", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
              "]"}], "<>", "\"\< \>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{
               RowBox[{"parameterList", "[", 
                RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
              "]"}], "<>", "\"\<, \>\""}], ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], "]"}],
           "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"paramListAD", "=", 
       RowBox[{"StringDrop", "[", 
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"If", "[", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"KeyExistsQ", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", "\"\<AD\>\""}], "]"}], 
               "&&", 
               RowBox[{
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<AD\>\"", "]"}], "==",
                 "True"}]}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppTypeAD", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}], ",", "\[IndentingNewLine]", 
              RowBox[{"\"\<const \>\"", "<>", 
               RowBox[{
                RowBox[{"CppType", "[", "computeType", "]"}], "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", 
               RowBox[{"ArgType", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Type\>\"", "]"}], 
                "]"}], "<>", "\"\< \>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{
                 RowBox[{"parameterList", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Name\>\"", "]"}], 
                "]"}], "<>", "\"\<, \>\""}]}], "]"}], "\[IndentingNewLine]", 
            ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", "1", ",", 
              RowBox[{"Length", "[", "parameterList", "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "]"}], "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\n", "\[IndentingNewLine]", 
      RowBox[{"kernelFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", 
        "\"\<.kernel\>\""}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"hhFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.hh\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"ccFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cc\>\""}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"cuFile", "=", 
       RowBox[{
        RowBox[{"kernel", "[", "\"\<Name\>\"", "]"}], "<>", "\"\<.cu\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"hh", "=", 
       RowBox[{
       "\"\<#pragma once\n\ntemplate <typename REG> class \>\"", "<>", 
        "kernelName", "<>", 
        "\"\<;\n#include \\\"../def.hh\\\"\n\n#include <memory>\n#include \
<future>\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    class \>\"", "<>",
         "className", "<>", "\"\<\n    {\n    public:\n      \>\"", "<>", 
        "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], "]"}], 
        "<>", "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const JSONValue& json);\n      \>\"", "<>", 
        "className", "<>", "\"\<(const \>\"", "<>", "className", "<>", 
        "\"\<& other);\n      ~\>\"", "<>", "className", "<>", 
        "\"\<();\n\n      template<typename NT, typename... T>\n      \
std::future<NT> request(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return request_CT(std::forward<T>(t)...);\n     \
   else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
request_AD(std::forward<T>(t)...);\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<>, \\\"Unknown type requested of \>\"", "<>",
            "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return \
request_CT(std::forward<T>(t)...);\>\""}]}], "]"}], "<>", 
        "\"\<\n      }\n\n      template<typename NT, typename... T>\n      \
NT get(T&&... t)\n      {\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", 
           "\"\<> || std::is_same_v<NT, autodiff::real>, \\\"Unknown type \
requested of \>\"", "<>", "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\n        \
else if constexpr(std::is_same_v<NT, autodiff::real>)\n          return \
get_AD(std::forward<T>(t)...);\>\""}], ",", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<\n        static_assert(std::is_same_v<NT, \>\"", "<>", 
           "computeType", "<>", "\"\<>, \\\"Unknown type requested of \>\"", "<>",
            "className", "<>", 
           "\"\<::request\\\");\n        if constexpr(std::is_same_v<NT, \
\>\"", "<>", "computeType", "<>", 
           "\"\<>)\n          return get_CT(std::forward<T>(t)...);\>\""}]}], 
         "]"}], "<>", "\"\<\n      }\n\n      void set_T(const \>\"", "<>", 
        "computeType", "<>", "\"\< T, const \>\"", "<>", "computeType", "<>", 
        "\"\< E = 0);\n\n    private:\n      std::future<\>\"", "<>", 
        "computeType", "<>", "\"\<> request_CT(const \>\"", "<>", 
        "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<);\n      \>\"", "<>", "computeType", "<>", 
        "\"\< get_CT(const \>\"", "<>", "computeType", "<>", "\"\< k, \>\"", "<>",
         "paramList", "<>", "\"\<);\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::future<autodiff::real> request_AD(const \>\"", "<>",
            "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\n      autodiff::real get_AD(const \>\"", "<>", 
           "computeType", "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<);\>\""}], ",", "\[IndentingNewLine]", "\"\<\>\""}], "]"}], 
        "<>", "\"\<\n\n      QuadratureProvider& quadrature_provider;\n      \
const std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], "]"}], 
        "<>", "\"\<> grid_sizes;\n      std::array<uint, \>\"", "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], "]"}], 
        "<>", "\"\<> jac_grid_sizes;\n      const \>\"", "<>", "computeType", 
        "<>", "\"\< x_extent;\n      const \>\"", "<>", "computeType", "<>", 
        "\"\< jacobian_quadrature_factor;\n      const JSONValue json;\n\n    \
  std::unique_ptr<\>\"", "<>", "integrator", "<>", "\"\<> integrator;\>\"", "<>",
         "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n      std::unique_ptr<\>\"", "<>", "integratorAD", "<>", 
           "\"\<> integrator_AD;\>\""}], ",", "\[IndentingNewLine]", 
          "\"\<\>\""}], "]"}], "<>", 
        "\"\<\n    };\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}],
       ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"cc", "=", 
       RowBox[{
       "\"\<#include \\\"\>\"", "<>", "cuFile", "<>", "\"\<\\\"\>\""}]}], ";",
       "\[IndentingNewLine]", 
      RowBox[{"cu", "=", 
       RowBox[{
       "\"\<#define FLOW_CODE\n\n#include \\\"\>\"", "<>", "hhFile", "<>", 
        "\"\<\\\"\n#include \\\"\>\"", "<>", "kernelFile", "<>", 
        "\"\<\\\"\n\nnamespace DiFfRG\n{\n  namespace Flows\n  {\n    \>\"", "<>",
         "className", "<>", "\"\<::\>\"", "<>", "className", "<>", 
        "\"\<(QuadratureProvider &quadrature_provider, std::array<uint, \>\"",
         "<>", 
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], "]"}], 
        "<>", "\"\<> grid_sizes, const \>\"", "<>", "computeType", "<>", 
        "\"\< x_extent, const JSONValue& json)\n        : \
quadrature_provider(quadrature_provider), grid_sizes(grid_sizes), \
x_extent(x_extent), \n          jacobian_quadrature_factor(json.get_double(\\\
\"/integration/jacobian_quadrature_factor\\\")), json(json)\>\"", "<>", 
        "\"\<\n    {\n      integrator = std::make_unique<\>\"", "<>", 
        "integrator", "<>", 
        "\"\<>(quadrature_provider, grid_sizes, x_extent, json);\>\"", "<>", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{"\"\<\n      for(uint i = 0; i < \>\"", "<>", 
           RowBox[{"ToString", "[", 
            RowBox[{
             RowBox[{"kernel", "[", "\"\<Angles\>\"", "]"}], "+", "1"}], 
            "]"}], "<>", 
           "\"\<; ++i)\n        jac_grid_sizes[i] = \
uint(jacobian_quadrature_factor * grid_sizes[i]);\n      integrator_AD = \
std::make_unique<\>\"", "<>", "integratorAD", "<>", 
           "\"\<>(quadrature_provider, jac_grid_sizes, x_extent, \
json);\>\""}], ",", "\"\<\>\""}], "]"}], "<>", "\"\<\n    }\n\n    \>\"", "<>",
         "className", "<>", "\"\<::\>\"", "<>", "className", "<>", 
        "\"\<(const \>\"", "<>", "className", "<>", 
        "\"\<& other)\n        : \
quadrature_provider(other.quadrature_provider), grid_sizes(other.grid_sizes), \
jac_grid_sizes(other.jac_grid_sizes), x_extent(other.x_extent), \n          \
jacobian_quadrature_factor(other.jacobian_quadrature_factor), \
json(other.json),\n          integrator(std::make_unique<\>\"", "<>", 
        "integrator", "<>", 
        "\"\<>(other.quadrature_provider, other.grid_sizes, \n            \
other.x_extent, other.json))\>\"", "<>", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<,\n          integrator_AD(std::make_unique<\>\"", "<>", 
           "integratorAD", "<>", 
           "\"\<>(other.quadrature_provider, other.jac_grid_sizes, \n         \
   other.x_extent, other.json))\>\""}], ",", "\"\<\>\""}], "]"}], "<>", 
        "\"\<\n    {\n    }\n\n    \>\"", "<>", "className", "<>", 
        "\"\<::~\>\"", "<>", "className", "<>", 
        "\"\<() = default;\n\n    void  \>\"", "<>", "className", "<>", 
        "\"\<::set_T(const \>\"", "<>", "computeType", "<>", 
        "\"\< T, const \>\"", "<>", "computeType", "<>", 
        "\"\< E)\n    {\n      integrator->set_T(T, E);\>\"", "<>", "\n", 
        "      ", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          "\"\<\n      integrator_AD->set_T(T, E);\>\"", ",", "\"\<\>\""}], 
         "]"}], "<>", "\"\<\n    }\n\n    std::future<\>\"", "<>", 
        "computeType", "<>", "\"\<> \>\"", "<>", "className", "<>", 
        "\"\<::request_CT(const \>\"", "<>", "computeType", "<>", 
        "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->request(k, \>\"", "<>", 
        "argList", "<>", "\"\<);\n    }\n\n    \>\"", "<>", "computeType", 
        "<>", "\"\< \>\"", "<>", "className", "<>", "\"\<::get_CT(const \>\"",
         "<>", "computeType", "<>", "\"\< k, \>\"", "<>", "paramList", "<>", 
        "\"\<)\n    {\n      return integrator->get(k, \>\"", "<>", "argList",
         "<>", "\"\<);\n    }\n\>\"", "<>", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"kernel", "[", "\"\<AD\>\"", "]"}], ",", 
          RowBox[{
          "\"\<\n    std::future<autodiff::real> \>\"", "<>", "className", 
           "<>", "\"\<::request_AD(const \>\"", "<>", "computeType", "<>", 
           "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->request(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\n\n    autodiff::real \>\"", "<>", 
           "className", "<>", "\"\<::get_AD(const \>\"", "<>", "computeType", 
           "<>", "\"\< k, \>\"", "<>", "paramListAD", "<>", 
           "\"\<)\n    {\n      return integrator_AD->get(k, \>\"", "<>", 
           "argList", "<>", "\"\<);\n    }\>\""}], ",", "\"\<\>\""}], "]"}], 
        "<>", "\"\<\n  } // namespace Flows\n} // namespace DiFfRG\>\""}]}], 
      ";", "\n", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "hhFile"}], ",", "hh"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "ccFile"}], ",", "cc"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"ExportCode", "[", 
       RowBox[{
        RowBox[{"flowDir", "<>", "\"\<\>\"", "<>", 
         RowBox[{"kernel", "[", "\"\<Path\>\"", "]"}], "<>", "\"\</\>\"", "<>",
          "cuFile"}], ",", "cu"}], "]"}], ";"}]}], "\n", "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.919146353920842*^9, {3.919146415812554*^9, 3.91914649968346*^9}, {
   3.919748962347113*^9, 3.919748963291685*^9}, {3.919752663936022*^9, 
   3.919752828205908*^9}, 3.919753606491843*^9, 3.919754247260838*^9, {
   3.919794887984629*^9, 3.9197949009064493`*^9}, {3.924850739857435*^9, 
   3.924850742445471*^9}, {3.925273086546245*^9, 3.925273124967252*^9}, {
   3.925710468051388*^9, 3.925710473788418*^9}, {3.927261129620159*^9, 
   3.9272611382080317`*^9}, {3.927702695111587*^9, 3.927702757109434*^9}, {
   3.927703418566399*^9, 3.927703421433805*^9}, {3.93066149521805*^9, 
   3.930661576663293*^9}, {3.930661625394331*^9, 3.930661679675108*^9}, {
   3.930662088914027*^9, 3.930662141832258*^9}, {3.930665491005419*^9, 
   3.930665534734034*^9}, {3.930665700315783*^9, 3.930665707026491*^9}, {
   3.933227251058378*^9, 3.933227251274037*^9}, 3.933301646574675*^9, {
   3.938785396633258*^9, 3.93878540656771*^9}, {3.938785580800716*^9, 
   3.938785589751072*^9}, {3.9387861263503323`*^9, 3.93878612973402*^9}, {
   3.938786260966344*^9, 3.938786274846426*^9}, {3.948710759570538*^9, 
   3.948710892815189*^9}, 3.948717980834038*^9, {3.948718260110358*^9, 
   3.9487182770819883`*^9}},ExpressionUUID->"90c440bd-8851-4d99-8b6a-\
87f8d45c9c8b"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finite T Kernel Setup", "Subsection",
 CellChangeTimes->{{3.916559983910474*^9, 3.916559989385697*^9}, {
   3.91914387226638*^9, 3.919143872502099*^9}, 3.919753674804404*^9, {
   3.9433560693712797`*^9, 
   3.943356070359263*^9}},ExpressionUUID->"6ea80819-2f04-4cf3-9d12-\
6071a959cc79"],

Cell[CellGroupData[{

Cell["x0", "Subsubsection",
 CellChangeTimes->{{3.919146327450057*^9, 3.919146351393811*^9}, 
   3.919753650027888*^9},ExpressionUUID->"b820afee-780d-4038-9cff-\
988452aa73bd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelFiniteTx0", "[", 
    RowBox[{
    "kernel_Association", ",", " ", "parameterList_List", ",", 
     "integrandFlow_", ",", " ", 
     RowBox[{"constantFlow_", ":", "0."}], ",", " ", 
     RowBox[{"integrandDefinitions_String", ":", "\"\<\>\""}], ",", " ", 
     RowBox[{"constantDefinitions_String", ":", "\"\<\>\""}]}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelFiniteTx0: Invalid kernels \
list!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelFiniteTx0: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"MakeKernelClassFiniteT", "[", 
       RowBox[{
       "kernel", ",", "parameterList", ",", "integrandFlow", ",", 
        "constantFlow", ",", "integrandDefinitions", ",", 
        "constantDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MakeKernelIntegratorFiniteTx0", "[", 
       RowBox[{"kernel", ",", "parameterList"}], "]"}], ";"}]}], "\n", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.91915430555751*^9, 3.919154317096712*^9}, 
   3.919927842174363*^9, {3.919928117736559*^9, 3.919928118274671*^9}, 
   3.925710485322368*^9, {3.925710517094322*^9, 3.92571055338089*^9}, {
   3.9384996829749193`*^9, 
   3.938499687430931*^9}},ExpressionUUID->"680e463c-392c-444d-8a5c-\
f57a6d753dd9"]
}, Closed]],

Cell[CellGroupData[{

Cell["q0", "Subsubsection",
 CellChangeTimes->{{3.919146327450057*^9, 
  3.919146351393811*^9}},ExpressionUUID->"f4f6219d-714c-4a07-86fa-\
614b099b6a7d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernelFiniteTq0", "[", 
    RowBox[{
    "kernel_Association", ",", " ", "parameterList_List", ",", 
     "integrandFlow_", ",", " ", 
     RowBox[{"constantFlow_", ":", "0."}], ",", " ", 
     RowBox[{"integrandDefinitions_String", ":", "\"\<\>\""}], ",", " ", 
     RowBox[{"constantDefinitions_String", ":", "\"\<\>\""}]}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelFiniteTq0: Invalid kernels \
list!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernelFiniteTq0: Invalid parameter \
List!\>\"", "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"MakeKernelClassFiniteT", "[", 
       RowBox[{
       "kernel", ",", "parameterList", ",", "integrandFlow", ",", 
        "constantFlow", ",", "integrandDefinitions", ",", 
        "constantDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"MakeKernelIntegratorFiniteTq0", "[", 
       RowBox[{"kernel", ",", "parameterList"}], "]"}], ";"}]}], "\n", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.916559998154023*^9, 3.916560106266964*^9}, {
   3.916560157598077*^9, 3.916560166111186*^9}, {3.916560335926809*^9, 
   3.916560394895805*^9}, {3.916560918241396*^9, 3.916561182786134*^9}, {
   3.916644733853963*^9, 3.916644740209691*^9}, {3.917165075507038*^9, 
   3.917165184352631*^9}, {3.9171652602347717`*^9, 3.917165264767161*^9}, 
   3.917165814501603*^9, {3.917165969415968*^9, 3.917165979995262*^9}, {
   3.9173516781783657`*^9, 3.917351717198858*^9}, {3.9173521075717077`*^9, 
   3.917352109560954*^9}, {3.917353263080008*^9, 3.917353270826487*^9}, {
   3.91735332744447*^9, 3.917353332080154*^9}, {3.917353401311354*^9, 
   3.917353403889996*^9}, {3.917353441007303*^9, 3.917353461100974*^9}, {
   3.917353502574566*^9, 3.917353540091761*^9}, {3.9173536042226977`*^9, 
   3.917353622616817*^9}, {3.917353742619902*^9, 3.917353832769453*^9}, {
   3.918318971460712*^9, 3.918319004594531*^9}, {3.918319037200316*^9, 
   3.918319044399308*^9}, {3.91831907901307*^9, 3.918319128516838*^9}, {
   3.9185696787568617`*^9, 3.918569682756003*^9}, {3.918622871575116*^9, 
   3.9186228840205708`*^9}, {3.919102792681618*^9, 3.919102801613553*^9}, {
   3.919138628869574*^9, 3.919138674306271*^9}, {3.91913896863898*^9, 
   3.919138968744511*^9}, 3.919139617119072*^9, 3.919143891638682*^9, {
   3.9191462593939943`*^9, 3.919146311179145*^9}, {3.919146361708034*^9, 
   3.9191463627254257`*^9}, {3.919154329285673*^9, 3.9191543439527903`*^9}, {
   3.919927849185354*^9, 3.919927849810981*^9}, {3.925710561243928*^9, 
   3.925710589471081*^9}, {3.938499677822348*^9, 
   3.938499691754837*^9}},ExpressionUUID->"e3e4e5d4-de8d-499b-9e24-\
01bf02de9488"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Full Kernel Setup", "Section",
 CellChangeTimes->{{3.919751415976694*^9, 
  3.919751426731379*^9}},ExpressionUUID->"b0ca16fa-d1ce-49c2-8007-\
a99748c5bfcf"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"QuadTypes", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<QMC\>\"", ",", "\"\<Constant\>\"", ",", "\"\<Quadrature\>\"", ",", 
     "\"\<CartesianQuadrature\>\""}], "}"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MakeKernel", "[", 
    RowBox[{
    "kernel_Association", ",", " ", "parameterList_List", ",", 
     "integrandFlow_", ",", " ", 
     RowBox[{"constantFlow_", ":", "0."}], ",", " ", 
     RowBox[{"integrandDefinitions_String", ":", "\"\<\>\""}], ",", " ", 
     RowBox[{"constantDefinitions_String", ":", "\"\<\>\""}]}], "]"}], " ", ":=",
    " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidKernelSpecList", "[", "kernels", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernel: Invalid kernels list!\>\"", 
          "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"IsValidParameterList", "[", "parameterList", "]"}]}], ",", 
        RowBox[{
         RowBox[{
         "Print", "[", 
          "\"\<DiFfRG::CodeTools::MakeKernel: Invalid parameter List!\>\"", 
          "]"}], ";", 
         RowBox[{"Abort", "[", "]"}]}]}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"QuadTypes", ",", 
          RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MakeKernelClass", "[", 
          RowBox[{
          "kernel", ",", "parameterList", ",", "integrandFlow", ",", 
           "constantFlow", ",", "integrandDefinitions", ",", 
           "constantDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"MakeKernelIntegrator", "[", 
          RowBox[{"kernel", ",", "parameterList"}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "==", 
         "\"\<Quadraturex0\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MakeKernelFiniteTx0", "[", 
          RowBox[{
          "kernel", ",", " ", "parameterList", ",", "integrandFlow", ",", " ",
            "constantFlow", ",", " ", "integrandDefinitions", ",", " ", 
           "constantDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "==", 
         "\"\<Quadratureq0\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"MakeKernelFiniteTq0", "[", 
          RowBox[{
          "kernel", ",", " ", "parameterList", ",", "integrandFlow", ",", " ",
            "constantFlow", ",", " ", "integrandDefinitions", ",", " ", 
           "constantDefinitions"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"Return", "[", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{"\"\<Error: Unknown integrator type \\\"\>\"", "<>", 
        RowBox[{"kernel", "[", "\"\<Type\>\"", "]"}], "<>", "\"\<\\\"!\>\""}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Abort", "[", "]"}], ";"}]}], "\n", "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.919751429560662*^9, 3.919751430605227*^9}, {
  3.919927858152409*^9, 3.91992785880064*^9}, {3.925708828879931*^9, 
  3.925708886960339*^9}, {3.936718551696473*^9, 3.936718571385104*^9}, {
  3.9433558415384693`*^9, 3.9433558459622183`*^9}, {3.943355893491996*^9, 
  3.943356047164219*^9}, {3.9461394551536827`*^9, 3.946139461113196*^9}, {
  3.946140260473531*^9, 3.946140270553466*^9}, {3.946141780514419*^9, 
  3.946141783209301*^9}},ExpressionUUID->"acd711e6-eb37-47c3-88e1-\
92ee78df7635"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Finishing package", "Chapter",
 CellChangeTimes->{{3.919139867121632*^9, 
  3.919139874722487*^9}},ExpressionUUID->"e8c3cc19-732d-4100-ba41-\
4f741977ed46"],

Cell[BoxData[
 RowBox[{
  RowBox[{"Protect", "[", "\"\<DiFfRG`CodeTools`*\>\"", "]"}], ";"}]], "Input",\

 CellChangeTimes->{{3.932041570050847*^9, 
  3.932041572308077*^9}},ExpressionUUID->"9b9ea4fc-21b7-44a7-a56c-\
9624eb86aa03"],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}]], "Code",
 CellLabel->
  "In[231]:=",ExpressionUUID->"404ab529-fa01-4a17-8d30-d78a744d6275"],

Cell[BoxData[
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]], "Code",
 CellLabel->
  "In[232]:=",ExpressionUUID->"71cbb145-c03b-495b-a560-6fe322da1f14"]
}, Closed]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
InitializationCellEvaluation->False,
InitializationCellWarning->False,
WindowSize->{1200, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
Magnification:>0.7 Inherited,
FrontEndVersion->"14.1 for Linux x86 (64-bit) (July 16, 2024)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData["Input"], InitializationCell -> True]}, Visible -> False, 
  FrontEndVersion -> "14.1 for Linux x86 (64-bit) (July 16, 2024)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"3149dff9-433b-4831-b0e6-7a8267329937"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 169, 3, 67, "Title",ExpressionUUID->"255990ba-0600-4517-a841-3b30ef1076f1"],
Cell[CellGroupData[{
Cell[774, 29, 158, 3, 47, "Chapter",ExpressionUUID->"2d5f9f27-5490-4bea-8ecf-1b321b723da0"],
Cell[CellGroupData[{
Cell[957, 36, 161, 3, 46, "Section",ExpressionUUID->"61eae6f8-8864-4150-9158-1ce7d9f393be"],
Cell[1121, 41, 611, 15, 80, "Code",ExpressionUUID->"61eeed29-b199-412c-9a91-f659c54d031c"],
Cell[1735, 58, 12644, 261, 1565, "Code",ExpressionUUID->"e967b969-bd44-41d7-8598-8812e1394d8a"],
Cell[14382, 321, 245, 6, 37, "Code",ExpressionUUID->"334e210a-0008-4f8a-aa82-905e18a840c0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14676, 333, 270, 4, 47, "Chapter",ExpressionUUID->"337028bb-22a5-4c7a-abf1-dfc7beb47d0a"],
Cell[CellGroupData[{
Cell[14971, 341, 162, 3, 37, "Subsection",ExpressionUUID->"34fe5e06-f143-4bae-9984-5a15e1d8db32"],
Cell[15136, 346, 23620, 564, 1604, "Code",ExpressionUUID->"f7ee6a73-23f9-402d-9c49-abbbd26f22a2"]
}, Closed]],
Cell[CellGroupData[{
Cell[38793, 915, 200, 3, 27, "Subsection",ExpressionUUID->"948177c6-784c-493a-a7ca-2aa9f473b46c"],
Cell[38996, 920, 6528, 178, 199, "Code",ExpressionUUID->"d9f5e016-4e8a-496b-b503-a2aecdf57df3"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[45573, 1104, 187, 3, 47, "Chapter",ExpressionUUID->"e84729ed-8582-435d-b0b5-b57d953a283a"],
Cell[CellGroupData[{
Cell[45785, 1111, 161, 3, 46, "Section",ExpressionUUID->"fe336611-c5eb-4640-8785-3416a0106c98"],
Cell[45949, 1116, 14061, 320, 2018, "Input",ExpressionUUID->"e0865668-fd95-406e-8d16-597ffc83cce7",
 InitializationCell->True],
Cell[60013, 1438, 3041, 69, 404, "Input",ExpressionUUID->"f45f2f7c-00b0-422c-b938-377d2da7520e"]
}, Closed]],
Cell[CellGroupData[{
Cell[63091, 1512, 157, 3, 37, "Section",ExpressionUUID->"e3370f84-23df-49af-8ad2-b13a8cd01695"],
Cell[CellGroupData[{
Cell[63273, 1519, 1214, 29, 94, "Input",ExpressionUUID->"bd614719-a216-4b2c-9de9-a8b815cc9ea5",
 InitializationCell->True],
Cell[64490, 1550, 289, 6, 17, "Print",ExpressionUUID->"65d59a2b-50e4-43c5-9ad1-e9e34093a585"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[64828, 1562, 156, 3, 37, "Section",ExpressionUUID->"44bbcb70-c7f7-442b-8def-82fff8bd0ea7"],
Cell[64987, 1567, 3751, 86, 412, "Input",ExpressionUUID->"fcb4101e-cf09-4b05-8515-2708e798aaeb",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[68775, 1658, 159, 3, 37, "Section",ExpressionUUID->"a0be1f2b-f273-4a1e-8a34-31c5569270ec"],
Cell[68937, 1663, 1209, 30, 111, "Input",ExpressionUUID->"4651bebd-71bd-4a97-92b5-5351611f6050"],
Cell[70149, 1695, 3750, 96, 411, "Input",ExpressionUUID->"2ea8b7a0-b679-4c15-8bdc-98e6abdfdf6f"],
Cell[73902, 1793, 3132, 69, 296, "Input",ExpressionUUID->"281add74-3e82-4da2-b304-04fcb894fbc5",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[77059, 1866, 993, 25, 80, "Input",ExpressionUUID->"a02f1dce-8481-4dda-a767-41c3938ad776"],
Cell[78055, 1893, 176, 2, 23, "Output",ExpressionUUID->"0cc19047-5efd-446b-b394-e1fec94a1c13"]
}, Open  ]],
Cell[78246, 1898, 2405, 58, 319, "Input",ExpressionUUID->"abcfc1d3-2e59-4f0a-89d2-0541b475bac8",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[80688, 1961, 241, 4, 37, "Section",ExpressionUUID->"c33c8252-d769-4f2c-a755-55e259430a36"],
Cell[CellGroupData[{
Cell[80954, 1969, 247, 4, 37, "Subsection",ExpressionUUID->"3055f86e-1202-4f7c-82d7-f4a1322b935a"],
Cell[81204, 1975, 5965, 132, 354, "Input",ExpressionUUID->"c4e780f8-15b6-40cb-8a1d-2bd5bf49ac16"],
Cell[87172, 2109, 8188, 188, 416, "Input",ExpressionUUID->"a0d59af2-759a-487a-b63e-d2d14b73cd1d",
 InitializationCell->True],
Cell[95363, 2299, 6255, 146, 384, "Input",ExpressionUUID->"7f2c99fd-a79f-46c2-854f-98e61ebec777"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101655, 2450, 249, 4, 37, "Subsection",ExpressionUUID->"b9fc50c2-dc66-4696-839b-23e9ccbcf6cb"],
Cell[101907, 2456, 6830, 154, 387, "Input",ExpressionUUID->"02076b1d-a114-4058-b10c-0074b1c0bf44",
 InitializationCell->True],
Cell[108740, 2612, 6863, 163, 419, "Input",ExpressionUUID->"3f57e62b-c21b-46a5-aac5-5e869eaa87ee"]
}, Closed]],
Cell[CellGroupData[{
Cell[115640, 2780, 275, 5, 27, "Subsection",ExpressionUUID->"81cfd11a-63a8-4205-8e64-8f4881ece817"],
Cell[115918, 2787, 6065, 135, 387, "Input",ExpressionUUID->"a7b5ee41-8585-4441-b62c-89d022f47a1c",
 InitializationCell->True],
Cell[121986, 2924, 5248, 120, 377, "Input",ExpressionUUID->"3329a8ad-9322-4b94-9584-392b163bb430"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[127283, 3050, 231, 4, 37, "Section",ExpressionUUID->"5a9c695d-a2e4-42c7-b625-3ac877f31cbd"],
Cell[127517, 3056, 410, 8, 32, "Input",ExpressionUUID->"b02fa6fa-1e5a-47f7-ac5f-07bf58b8badf",
 InitializationCell->True],
Cell[127930, 3066, 1720, 42, 203, "Input",ExpressionUUID->"5f8052cc-3463-4c0e-bb13-e8dfd09bc056"],
Cell[129653, 3110, 691, 19, 62, "Input",ExpressionUUID->"10cdcfac-f1bb-4dd7-b72a-645465a2bbed"],
Cell[130347, 3131, 736, 22, 64, "Input",ExpressionUUID->"d9615112-8698-41b1-a04a-431fb17c1340"],
Cell[131086, 3155, 14922, 344, 1141, "Input",ExpressionUUID->"5d6c55e3-f445-4d4a-86cc-4fd8d11ac6db"],
Cell[146011, 3501, 829, 22, 32, "Input",ExpressionUUID->"7660f901-71c0-46ff-a682-2ff9c7d62cb3"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[146889, 3529, 163, 3, 47, "Chapter",ExpressionUUID->"b45359a4-435a-48f5-938f-6624251f7dc8"],
Cell[CellGroupData[{
Cell[147077, 3536, 205, 4, 46, "Section",ExpressionUUID->"97b4fbb0-92d9-4885-b408-2eee17007491"],
Cell[147285, 3542, 2094, 43, 283, "Input",ExpressionUUID->"f5928534-0655-4f1b-bfed-3dd38a332088"],
Cell[CellGroupData[{
Cell[149404, 3589, 152, 3, 37, "Subsection",ExpressionUUID->"30a15baf-c80b-4b54-9185-3459472d17b7"],
Cell[149559, 3594, 11541, 216, 1178, "Input",ExpressionUUID->"343ea549-3ec9-4b86-9bc0-73c18f46ff9e",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[161137, 3815, 158, 3, 27, "Subsection",ExpressionUUID->"4444b3ad-10a7-4edc-b924-bcbc2ab9b259"],
Cell[161298, 3820, 15947, 300, 1469, "Input",ExpressionUUID->"1ef8a59a-d834-40ef-86a8-99dc4a1d5a67",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[177294, 4126, 232, 4, 46, "Section",ExpressionUUID->"e1a8482c-beb3-4c41-b9f2-3acff2f366ec"],
Cell[177529, 4132, 434, 10, 47, "Input",ExpressionUUID->"7834af40-4bf8-4a04-b1ca-9ec04bb3d613"],
Cell[CellGroupData[{
Cell[177988, 4146, 218, 4, 37, "Subsection",ExpressionUUID->"2a678e8d-3220-4dc3-80ad-773d02937bfb"],
Cell[178209, 4152, 10073, 219, 543, "Input",ExpressionUUID->"78f3c9b2-0d02-4f66-a3ed-0f1df4a47e07",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[188319, 4376, 271, 4, 37, "Subsection",ExpressionUUID->"d54528b8-9b38-43bf-b3a0-0dccee03210a"],
Cell[188593, 4382, 10731, 224, 724, "Input",ExpressionUUID->"da14ce31-034e-4146-8d7e-2340b570b679"],
Cell[199327, 4608, 21150, 410, 2500, "Input",ExpressionUUID->"8bba18f0-70fd-41ef-a392-7beb10564454",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[220526, 5024, 281, 4, 46, "Section",ExpressionUUID->"03e96b37-b52f-4974-83b1-695c05f14530"],
Cell[CellGroupData[{
Cell[220832, 5032, 217, 4, 37, "Subsection",ExpressionUUID->"603ba85b-8322-4460-bc76-e0fcaaeb2244"],
Cell[221052, 5038, 5205, 116, 296, "Input",ExpressionUUID->"90778445-d71e-4d13-b03a-7313cb6faf0a",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[226294, 5159, 271, 4, 37, "Subsection",ExpressionUUID->"14dced2c-440b-4ab2-acc6-6e5d0c8a7c99"],
Cell[CellGroupData[{
Cell[226590, 5167, 153, 3, 30, "Subsubsection",ExpressionUUID->"d2cff38d-c13c-4061-b3c7-4409245852c9"],
Cell[226746, 5172, 25001, 498, 2917, "Input",ExpressionUUID->"e9663e6c-dbd3-4d06-b4b4-493a2a25aa69",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[251784, 5675, 202, 4, 26, "Subsubsection",ExpressionUUID->"ffdd5553-b19d-4f0e-9d22-641bc500d1c8"],
Cell[251989, 5681, 23952, 479, 2715, "Input",ExpressionUUID->"90c440bd-8851-4d99-8b6a-87f8d45c9c8b",
 InitializationCell->True]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[275990, 6166, 293, 5, 37, "Subsection",ExpressionUUID->"6ea80819-2f04-4cf3-9d12-6071a959cc79"],
Cell[CellGroupData[{
Cell[276308, 6175, 176, 3, 30, "Subsubsection",ExpressionUUID->"b820afee-780d-4038-9cff-988452aa73bd"],
Cell[276487, 6180, 2068, 50, 127, "Input",ExpressionUUID->"680e463c-392c-444d-8a5c-f57a6d753dd9",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[278592, 6235, 153, 3, 26, "Subsubsection",ExpressionUUID->"f4f6219d-714c-4a07-86fa-614b099b6a7d"],
Cell[278748, 6240, 3419, 68, 125, "Input",ExpressionUUID->"e3e4e5d4-de8d-499b-9e24-01bf02de9488",
 InitializationCell->True]
}, Closed]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[282228, 6315, 162, 3, 46, "Section",ExpressionUUID->"b0ca16fa-d1ce-49c2-8007-a99748c5bfcf"],
Cell[282393, 6320, 4391, 98, 396, "Input",ExpressionUUID->"acd711e6-eb37-47c3-88e1-92ee78df7635"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[286833, 6424, 162, 3, 47, "Chapter",ExpressionUUID->"e8c3cc19-732d-4100-ba41-4f741977ed46"],
Cell[286998, 6429, 231, 6, 32, "Input",ExpressionUUID->"9b9ea4fc-21b7-44a7-a56c-9624eb86aa03"],
Cell[287232, 6437, 151, 4, 35, "Code",ExpressionUUID->"404ab529-fa01-4a17-8d30-d78a744d6275"],
Cell[287386, 6443, 158, 4, 35, "Code",ExpressionUUID->"71cbb145-c03b-495b-a560-6fe322da1f14"]
}, Closed]]
}, Open  ]]
}
]
*)

