#pragma once

template <typename REG> class Zc_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10, typename T11, typename T12>
  static __host__ __device__ auto kernel(const T1 q, const T2 cos1, const T3 k, const T4 p, const T5 &ZA3,
                                         const T6 &ZAcbc, const T7 &ZA4, const T8 &dtZc, const T9 &Zc, const T10 &dtZA,
                                         const T11 &ZA, const T12 m2A)
  {
    const auto _repl1 = ZA(pow(1 + powr<6>(k), 0.16666666666666666));
    const auto _repl2 = RB(powr<2>(k), powr<2>(q));
    const auto _repl3 = ZA(q);
    const auto _repl4 = Zc(k);
    const auto _repl5 = RB(powr<2>(k), 2 * cos1 * p * q + powr<2>(p) + powr<2>(q));
    return -3 * (-1 + powr<2>(cos1)) * powr<-2>(_repl1 * _repl2 + _repl3 * powr<2>(q)) *
               powr<2>(ZAcbc((sqrt(0.6666666666666666)) * (sqrt(-(cos1 * p * q) + powr<2>(p) + powr<2>(q))))) *
               powr<-1>(_repl4 * RB(powr<2>(k), -2 * cos1 * p * q + powr<2>(p) + powr<2>(q)) +
                        (-2 * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                            Zc((sqrt(-2 * cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
               (_repl1 * RBdot(powr<2>(k), powr<2>(q)) +
                _repl2 * (dtZA(pow(1 + powr<6>(k), 0.16666666666666666)) +
                          50. * powr<6>(k) * powr<-1>(1 + powr<6>(k)) *
                              (-_repl1 + ZA(1.02 * pow(1 + powr<6>(k), 0.16666666666666666))))) -
           3 * (-1 + powr<2>(cos1)) * powr<-1>(_repl1 * _repl2 + _repl3 * powr<2>(q)) *
               powr<2>(ZAcbc((sqrt(0.6666666666666666)) * (sqrt(cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
               powr<-2>(_repl4 * _repl5 + (2 * cos1 * p * q + powr<2>(p) + powr<2>(q)) *
                                              Zc((sqrt(2 * cos1 * p * q + powr<2>(p) + powr<2>(q))))) *
               (_repl4 * RBdot(powr<2>(k), 2 * cos1 * p * q + powr<2>(p) + powr<2>(q)) +
                _repl5 * (-50. * _repl4 + dtZc(k) + 50. * Zc(1.02 * k)));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10>
  static __host__ __device__ auto constant(const T1 k, const T2 p, const T3 &ZA3, const T4 &ZAcbc, const T5 &ZA4,
                                           const T6 &dtZc, const T7 &Zc, const T8 &dtZA, const T9 &ZA, const T10 m2A)
  {
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};