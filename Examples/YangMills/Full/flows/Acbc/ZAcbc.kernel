template <typename REG> class ZAcbc_kernel
{
public:
  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10, typename T11, typename T12>
  static __forceinline__ __host__ __device__ auto
  kernel(const double q, const double cos1, const double cos2, const double k, const T1 S0, const T2 S1, const T3 SPhi,
         const T4 &ZA3, const T5 &ZAcbc, const T6 &ZA4SP, const T7 &ZA4tadpole, const T8 &dtZc, const T9 &Zc,
         const T10 &dtZA, const T11 &ZA, const T12 m2A)
  {
    const double cosp1q = cos1;
    const double cosp2q =
        0.7071067811865475 *
        powr<-1>(sqrt(-1. * (-1. + powr<2>(S1) * powr<2>(sin(SPhi))) *
                      (2. + 1.7320508075688772 * S1 * cos(SPhi) + S1 * sin(SPhi)))) *
        (-1. * cos1 * (sqrt(1. + S1 * sin(SPhi))) -
         1.7320508075688772 * cos2 * (sqrt((-1. + powr<2>(cos1)) * (-1. + powr<2>(S1)) * (1. + S1 * sin(SPhi)))) +
         cos1 * S1 * (sqrt(1. + S1 * sin(SPhi))) * (-1.7320508075688772 * cos(SPhi) + sin(SPhi)));
    const double cosp1p2 =
        0.7071067811865475 *
        powr<-1>(sqrt(-1. * (-1. + S1 * sin(SPhi)) * (2. + 1.7320508075688772 * S1 * cos(SPhi) + S1 * sin(SPhi)))) *
        (-1. - 1.7320508075688772 * S1 * cos(SPhi) + S1 * sin(SPhi));
    const double p1 = S0 * (sqrt(1. - 1. * S1 * sin(SPhi)));
    const double p2 = S0 * (sqrt(1. + 0.5 * S1 * (1.7320508075688772 * cos(SPhi) + sin(SPhi))));
    // optimization definitions
    const double DiFfRGREPL1 = dtZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL2 = dtZc(k);
    const double DiFfRGREPL3 = RB(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL4 = RB(powr<2>(k), -2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q));
    const double DiFfRGREPL5 = RB(powr<2>(k), 2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q));
    const double DiFfRGREPL6 = RB(powr<2>(k), 2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q));
    const double DiFfRGREPL7 = RB(powr<2>(k), 2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + 2. * cosp2q * p2 * q +
                                                  powr<2>(p1) + powr<2>(p2) + powr<2>(q));
    const double DiFfRGREPL8 = RBdot(powr<2>(k), -2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q));
    const double DiFfRGREPL9 = RBdot(powr<2>(k), powr<2>(q));
    const double DiFfRGREPL10 = ZA(pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL11 = ZA(q);
    const double DiFfRGREPL12 = ZA((sqrt(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))));
    const double DiFfRGREPL13 = ZA(1.02 * pow(1. + powr<6>(k), 0.16666666666666666));
    const double DiFfRGREPL14 = ZAcbc(
        0.816496580927726 * (sqrt(-1. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))),
        (sqrt((-2. * cosp2q * q * powr<3>(p2) + powr<4>(p2) + (-1. + 4. * powr<2>(cosp2q)) * powr<2>(p2) * powr<2>(q) -
               2. * cosp2q * p2 * powr<3>(q) + powr<4>(q)) *
              powr<-2>(-1. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q)))),
        atan2(-1.7320508075688772 * q * (-2. * cosp2q * p2 + q) *
                  powr<-1>(-1. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q)),
              -1. + 3. * p2 * (p2 - 1. * cosp2q * q) * powr<-1>(-1. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL15 = ZAcbc(
        0.816496580927726 *
            (sqrt(cosp1p2 * p1 * p2 + cosp1q * p1 * q - 1. * cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
        0.5 * (sqrt((3. * powr<2>(2. * cosp1p2 * p1 * p2 + (2. * cosp2q * p2 - 1. * q) * q + powr<2>(p1)) +
                     powr<2>(-2. * cosp1p2 * p1 * p2 + 4. * cosp1q * p1 * q + 2. * cosp2q * p2 * q + powr<2>(p1) -
                             2. * powr<2>(p2) + powr<2>(q))) *
                    powr<-2>(cosp1p2 * p1 * p2 + cosp1q * p1 * q - 1. * cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) +
                             powr<2>(q)))),
        atan2(-1. * (2. * cosp1p2 * p1 * p2 + (2. * cosp2q * p2 - 1. * q) * q + powr<2>(p1)) *
                  (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                  powr<-1>(cosp1p2 * p1 * p2 + cosp1q * p1 * q - 1. * cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) +
                           powr<2>(q)) *
                  powr<-1>(sqrt((2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                                (4. * cosp1p2 * p1 * p2 - 2. * cosp1q * p1 * q - 4. * cosp2q * p2 * q + powr<2>(p1) +
                                 4. * powr<2>(p2) + powr<2>(q)))) *
                  (sqrt(3. + 12. * (cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q + powr<2>(p2)) *
                                 powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
              -1. + (3. * p2 * (cosp1p2 * p1 + p2) - 3. * (cosp1q * p1 + cosp2q * p2) * q) *
                        powr<-1>(cosp1p2 * p1 * p2 + cosp1q * p1 * q - 1. * cosp2q * p2 * q + powr<2>(p1) +
                                 powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL16 = ZAcbc(
        0.816496580927726 * (sqrt(cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))),
        (sqrt(1. + 3. * (-1. + powr<2>(cosp2q)) * powr<2>(p2) * powr<2>(q) *
                       powr<-2>(cosp2q * p2 * q + powr<2>(p2) + powr<2>(q)))),
        atan2(-1.7320508075688772 * q * (2. * cosp2q * p2 + q) * powr<-1>(cosp2q * p2 * q + powr<2>(p2) + powr<2>(q)),
              -1. + 3. * p2 * (p2 + cosp2q * q) * powr<-1>(cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL17 = ZAcbc(
        0.816496580927726 *
            (sqrt(2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
        0.5 * (sqrt(powr<-2>(2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) +
                             powr<2>(q)) *
                    (3. * powr<2>(q) * powr<2>(2. * cosp1q * p1 + 2. * cosp2q * p2 + q) +
                     powr<2>(-2. * (2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                    powr<2>(p2)) +
                             powr<2>(q))))),
        atan2(1.7320508075688772 * q * (2. * cosp1q * p1 + 2. * cosp2q * p2 + q) *
                  powr<-1>(2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2) +
                           powr<2>(q)),
              -1. + 3. * (2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) + powr<2>(p2)) *
                        powr<-1>(2. * cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                 powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL18 = Zc(k);
    const double DiFfRGREPL19 = Zc(1.02 * k);
    const double DiFfRGREPL20 = Zc((sqrt(-2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL21 = Zc((sqrt(2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))));
    const double DiFfRGREPL22 = Zc((sqrt(2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + 2. * cosp2q * p2 * q +
                                         powr<2>(p1) + powr<2>(p2) + powr<2>(q))));

    // flow
    return 1.5 * DiFfRGREPL15 *
               ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19 + DiFfRGREPL2) * DiFfRGREPL4 + DiFfRGREPL18 * DiFfRGREPL8) *
               ((-1. * cosp1p2 * cosp1q + cosp2q) * q + p2 * (-1. + powr<2>(cosp1p2))) *
               (p1 * q * (-2. * cosp1q * p2 + 2. * cosp1p2 * cosp2q * p2 - 1. * cosp1p2 * q + cosp1q * cosp2q * q) +
                ((-1. * cosp1p2 * cosp1q + cosp2q) * q + p2 * (-1. + powr<2>(cosp1p2))) * powr<2>(p1) +
                p2 * (-1. + powr<2>(cosp2q)) * powr<2>(q)) *
               powr<-1>(-1. + powr<2>(cosp1p2)) * powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
               powr<-1>(DiFfRGREPL10 * DiFfRGREPL5 + DiFfRGREPL12 * (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))) *
               powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 +
                        DiFfRGREPL20 * (-2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 *
                            RB(powr<2>(k), -2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q)) +
                        (-2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q + powr<2>(p1) +
                         powr<2>(p2) + powr<2>(q)) *
                            Zc((sqrt(-2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                     powr<2>(p1) + powr<2>(p2) + powr<2>(q))))) *
               ZAcbc(0.816496580927726 * (sqrt(-1. * cosp1p2 * p1 * p2 + cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                     0.5 * (sqrt((3. * powr<2>(p1) * powr<2>(p1 - 2. * cosp1p2 * p2 + 2. * cosp1q * q) +
                                  powr<2>(2. * cosp1p2 * p1 * p2 - 2. * cosp1q * p1 * q + 4. * cosp2q * p2 * q +
                                          powr<2>(p1) - 2. * powr<2>(p2) - 2. * powr<2>(q))) *
                                 powr<-2>(-1. * cosp1p2 * p1 * p2 + cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                          powr<2>(p1) + powr<2>(p2) + powr<2>(q)))),
                     atan2(1.7320508075688772 * p1 * (p1 - 2. * cosp1p2 * p2 + 2. * cosp1q * q) *
                               powr<-1>(-1. * cosp1p2 * p1 * p2 + cosp1q * p1 * q - 2. * cosp2q * p2 * q + powr<2>(p1) +
                                        powr<2>(p2) + powr<2>(q)),
                           2. - 3. * powr<2>(p1) *
                                    powr<-1>(-1. * cosp1p2 * p1 * p2 + cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                             powr<2>(p1) + powr<2>(p2) + powr<2>(q)))) *
               ZAcbc(0.816496580927726 * (sqrt(-1. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 1. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                     0.5 * (sqrt((3. * powr<2>(-2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(q)) +
                                  powr<2>(2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + 2. * cosp2q * p2 * q +
                                          powr<2>(p1) - 2. * powr<2>(p2) + powr<2>(q))) *
                                 powr<-2>(-1. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 1. * cosp2q * p2 * q +
                                          powr<2>(p1) + powr<2>(p2) + powr<2>(q)))),
                     atan2(-1. * (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                               (-2. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q + powr<2>(p1) +
                                powr<2>(q)) *
                               powr<-1>(-1. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 1. * cosp2q * p2 * q +
                                        powr<2>(p1) + powr<2>(p2) + powr<2>(q)) *
                               powr<-1>(sqrt((2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                                             (-4. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 4. * cosp2q * p2 * q +
                                              powr<2>(p1) + 4. * powr<2>(p2) + powr<2>(q)))) *
                               (sqrt(3. + 12. * p2 * (-1. * cosp1p2 * p1 + p2 - 1. * cosp2q * q) *
                                              powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
                           -1. + 3. * p2 * (-1. * cosp1p2 * p1 + p2 - 1. * cosp2q * q) *
                                     powr<-1>(-1. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q - 1. * cosp2q * p2 * q +
                                              powr<2>(p1) + powr<2>(p2) + powr<2>(q)))) +
           3. * DiFfRGREPL16 *
               (p1 * (-1. * p1 + cosp1q * q) * (cosp1q * p1 * (cosp2q * p2 - 1. * q) + q * (cosp2q * p2 + q)) *
                    powr<2>(cosp1p2) +
                p2 * (p1 - 1. * cosp1q * q) * powr<3>(cosp1p2) * powr<2>(p1) -
                1. * q * powr<2>(cosp1q) * (2. * cosp2q * p2 + q + q * powr<2>(cosp2q)) * powr<2>(p1) +
                (-1. + powr<2>(cosp2q)) * (cosp2q * p2 * q - 1. * powr<2>(p1)) * powr<2>(q) +
                cosp1q * cosp2q * p1 *
                    ((p2 + cosp2q * q) * powr<2>(p1) +
                     (2. * p2 + cosp2q * q - 1. * p2 * powr<2>(cosp2q)) * powr<2>(q)) -
                1. * cosp1p2 *
                    (-1. * cosp1q * q * (cosp2q * q * (3. + powr<2>(cosp1q)) + p2 * (2. + powr<2>(cosp2q))) *
                         powr<2>(p1) +
                     (p2 + cosp2q * q * (1. + powr<2>(cosp1q))) * powr<3>(p1) +
                     p1 *
                         (cosp2q * (cosp2q * p2 + q) +
                          powr<2>(cosp1q) * (2. * p2 + cosp2q * q - 1. * p2 * powr<2>(cosp2q))) *
                         powr<2>(q) +
                     cosp1q * p2 * (-1. + powr<2>(cosp2q)) * powr<3>(q))) *
               powr<-1>(-1. + powr<2>(cosp1p2)) *
               (DiFfRGREPL10 * DiFfRGREPL9 + DiFfRGREPL3 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL10 + DiFfRGREPL13) *
                                                                              powr<6>(k) * powr<-1>(1. + powr<6>(k)))) *
               powr<-1>(-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
               powr<-2>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL6 + DiFfRGREPL21 * (2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL10 * RB(powr<2>(k), -2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) +
                        (-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                            ZA((sqrt(-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))))) *
               ZA3(0.816496580927726 * (sqrt(-1. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))),
                   (sqrt((-2. * cosp1q * q * powr<3>(p1) + powr<4>(p1) +
                          (-1. + 4. * powr<2>(cosp1q)) * powr<2>(p1) * powr<2>(q) - 2. * cosp1q * p1 * powr<3>(q) +
                          powr<4>(q)) *
                         powr<-2>(-1. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
                   atan2(-1. * (p1 - 1. * q) * (p1 + q) * (-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                             powr<-1>(-1. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                             powr<-1>(sqrt(powr<4>(p1) + 2. * (1. - 2. * powr<2>(cosp1q)) * powr<2>(p1) * powr<2>(q) +
                                           powr<4>(q))) *
                             (sqrt(3. +
                                   12. * cosp1q * p1 * q * powr<-1>(-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
                         -1. + 3. * cosp1q * p1 * q * powr<-1>(-1. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))) *
               ZAcbc(
                   0.816496580927726 * (sqrt(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q + cosp2q * p2 * q +
                                             powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                   0.5 *
                       (sqrt(powr<-2>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                      powr<2>(p2) + powr<2>(q)) *
                             (3. * powr<2>(2. * cosp1p2 * p1 * p2 - 1. * q * (2. * cosp2q * p2 + q) + powr<2>(p1)) +
                              powr<2>(powr<2>(p1) -
                                      2. * (cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p2)) +
                                      powr<2>(q))))),
                   atan2(-1. * (2. * cosp1p2 * p1 * p2 - 1. * q * (2. * cosp2q * p2 + q) + powr<2>(p1)) *
                             (-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                             powr<-1>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                      powr<2>(p2) + powr<2>(q)) *
                             powr<-1>(sqrt((-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                                           (4. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + 4. * cosp2q * p2 * q +
                                            powr<2>(p1) + 4. * powr<2>(p2) + powr<2>(q)))) *
                             (sqrt(3. + 12. * (cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p2)) *
                                            powr<-1>(-2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
                         -1. + 3. * (cosp1p2 * p1 * p2 + cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p2)) *
                                   powr<-1>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                            powr<2>(p2) + powr<2>(q)))) +
           ZA3(0.816496580927726 * (sqrt(cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))),
               (sqrt(1. + 3. * (-1. + powr<2>(cosp1q)) * powr<2>(p1) * powr<2>(q) *
                              powr<-2>(cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
               atan2(1.7320508075688772 * q * (2. * cosp1q * p1 + q) *
                         powr<-1>(cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)),
                     -1. + 3. * p1 * (p1 + cosp1q * q) * powr<-1>(cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))) *
               (3. * DiFfRGREPL14 * DiFfRGREPL15 *
                    ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19 + DiFfRGREPL2) * DiFfRGREPL4 +
                     DiFfRGREPL18 * DiFfRGREPL8) *
                    (-1. * p1 * (p1 + cosp1q * q) * (q * (-1. * cosp2q * p2 + q) + cosp1q * p1 * (cosp2q * p2 + q)) *
                         powr<2>(cosp1p2) +
                     p2 * (p1 + cosp1q * q) * powr<3>(cosp1p2) * powr<2>(p1) -
                     1. * q * powr<2>(cosp1q) * (-2. * cosp2q * p2 + q + q * powr<2>(cosp2q)) * powr<2>(p1) -
                     1. * (-1. + powr<2>(cosp2q)) * (cosp2q * p2 * q + powr<2>(p1)) * powr<2>(q) -
                     1. * cosp1q * cosp2q * p1 *
                         ((-1. * p2 + cosp2q * q) * powr<2>(p1) +
                          (cosp2q * q + p2 * (-2. + powr<2>(cosp2q))) * powr<2>(q)) +
                     cosp1p2 * (cosp1q * q * (cosp2q * q * (3. + powr<2>(cosp1q)) - 1. * p2 * (2. + powr<2>(cosp2q))) *
                                    powr<2>(p1) +
                                (-1. * p2 + cosp2q * q * (1. + powr<2>(cosp1q))) * powr<3>(p1) +
                                p1 *
                                    (cosp2q * (-1. * cosp2q * p2 + q) +
                                     powr<2>(cosp1q) * (cosp2q * q + p2 * (-2. + powr<2>(cosp2q)))) *
                                    powr<2>(q) +
                                cosp1q * p2 * (-1. + powr<2>(cosp2q)) * powr<3>(q))) *
                    powr<-1>(-1. + powr<2>(cosp1p2)) * powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                    powr<-1>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL10 * DiFfRGREPL5 +
                             DiFfRGREPL12 * (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))) *
                    powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 +
                             DiFfRGREPL20 * (-2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))) -
                3. * DiFfRGREPL17 *
                    (q *
                         (-1. * q + cosp1q * p2 * powr<3>(cosp1p2) +
                          powr<2>(cosp1p2) *
                              (q - 2. * q * powr<2>(cosp1q) + cosp2q * (p2 - 1. * p2 * powr<2>(cosp1q))) +
                          powr<2>(cosp1q) * (2. * cosp2q * p2 + q - 1. * q * powr<2>(cosp2q)) +
                          cosp1p2 * cosp1q * (cosp2q * q * (1. + powr<2>(cosp1q)) - 1. * p2 * (2. + powr<2>(cosp2q)))) *
                         powr<2>(p1) +
                     (p2 * powr<3>(cosp1p2) -
                      1. * cosp1q * powr<2>(cosp1p2) * (cosp2q * p2 + q * (-1. + powr<2>(cosp1q))) +
                      cosp1q * (cosp2q * p2 + 2. * q * (-1. + powr<2>(cosp1q))) -
                      1. * cosp1p2 * (p2 + cosp2q * q * (-1. + powr<2>(cosp1q)))) *
                         powr<3>(p1) -
                     1. * (-1. + powr<2>(cosp1p2)) * (-1. + powr<2>(cosp1q)) * powr<4>(p1) +
                     (cosp1p2 * cosp1q - 1. * cosp2q) * p1 *
                         (cosp1p2 * (cosp2q * p2 - 1. * q) + cosp1q * cosp2q * q +
                          cosp1q * p2 * (-2. + powr<2>(cosp2q))) *
                         powr<2>(q) +
                     (cosp1p2 * cosp1q - 1. * cosp2q) * p2 * (-1. + powr<2>(cosp2q)) * powr<3>(q)) *
                    powr<-1>(-1. + powr<2>(cosp1p2)) *
                    (DiFfRGREPL10 * DiFfRGREPL9 +
                     DiFfRGREPL3 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL10 + DiFfRGREPL13) * powr<6>(k) *
                                                      powr<-1>(1. + powr<6>(k)))) *
                    powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                    powr<-2>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * powr<2>(q)) *
                    powr<-1>(DiFfRGREPL10 * DiFfRGREPL5 +
                             DiFfRGREPL12 * (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q))) *
                    powr<-1>(DiFfRGREPL18 * DiFfRGREPL7 +
                             DiFfRGREPL22 * (2. * cosp2q * p2 * q + 2. * p1 * (cosp1p2 * p2 + cosp1q * q) +
                                             powr<2>(p1) + powr<2>(p2) + powr<2>(q))) *
                    ZAcbc(0.816496580927726 * (sqrt(cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + cosp2q * p2 * q +
                                                    powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                          0.5 * (sqrt(powr<-2>(cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q)) *
                                      (3. * powr<2>(q * (2. * cosp2q * p2 + q) + 2. * p1 * (cosp1p2 * p2 + cosp1q * q) +
                                                    powr<2>(p1)) +
                                       powr<2>(powr<2>(p1) -
                                               2. * (cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q + cosp2q * p2 * q +
                                                     powr<2>(p2)) +
                                               powr<2>(q))))),
                          atan2(
                              -1. *
                                  (q * (2. * cosp2q * p2 + q) + 2. * p1 * (cosp1p2 * p2 + cosp1q * q) + powr<2>(p1)) *
                                  (2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                                  powr<-1>(cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + cosp2q * p2 * q + powr<2>(p1) +
                                           powr<2>(p2) + powr<2>(q)) *
                                  powr<-1>(sqrt((2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)) *
                                                (4. * cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + 4. * cosp2q * p2 * q +
                                                 powr<2>(p1) + 4. * powr<2>(p2) + powr<2>(q)))) *
                                  (sqrt(3. + 12. * p2 * (cosp1p2 * p1 + p2 + cosp2q * q) *
                                                 powr<-1>(2. * cosp1q * p1 * q + powr<2>(p1) + powr<2>(q)))),
                              -1. + 3. * p2 * (cosp1p2 * p1 + p2 + cosp2q * q) *
                                        powr<-1>(cosp1p2 * p1 * p2 + 2. * cosp1q * p1 * q + cosp2q * p2 * q +
                                                 powr<2>(p1) + powr<2>(p2) + powr<2>(q))))) -
           1.5 * DiFfRGREPL16 * DiFfRGREPL17 * ((cosp1p2 * cosp1q - 1. * cosp2q) * q + p2 * (-1. + powr<2>(cosp1p2))) *
               (cosp1p2 * p1 - 1. * cosp1q * cosp2q * p1 + p2 - 1. * p2 * powr<2>(cosp2q)) *
               powr<-1>(-1. + powr<2>(cosp1p2)) *
               (DiFfRGREPL10 * DiFfRGREPL9 + DiFfRGREPL3 * (DiFfRGREPL1 + 50. * (-1. * DiFfRGREPL10 + DiFfRGREPL13) *
                                                                              powr<6>(k) * powr<-1>(1. + powr<6>(k)))) *
               powr<-2>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * powr<2>(q)) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL6 + DiFfRGREPL21 * (2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 * DiFfRGREPL7 +
                        DiFfRGREPL22 * (2. * cosp2q * p2 * q + 2. * p1 * (cosp1p2 * p2 + cosp1q * q) + powr<2>(p1) +
                                        powr<2>(p2) + powr<2>(q))) *
               ZAcbc(0.816496580927726 * (sqrt(cosp1p2 * p1 * p2 + cosp1q * p1 * q + 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                     0.5 * (sqrt((3. * powr<2>(p1) * powr<2>(p1 + 2. * cosp1p2 * p2 + 2. * cosp1q * q) +
                                  powr<2>(powr<2>(p1) - 2. * (cosp1p2 * p1 * p2 + 2. * cosp2q * p2 * q +
                                                              q * (cosp1q * p1 + q) + powr<2>(p2)))) *
                                 powr<-2>(cosp1p2 * p1 * p2 + cosp1q * p1 * q + 2. * cosp2q * p2 * q + powr<2>(p1) +
                                          powr<2>(p2) + powr<2>(q)))),
                     atan2(-1.7320508075688772 * p1 * (p1 + 2. * cosp1p2 * p2 + 2. * cosp1q * q) *
                               powr<-1>(cosp1p2 * p1 * p2 + cosp1q * p1 * q + 2. * cosp2q * p2 * q + powr<2>(p1) +
                                        powr<2>(p2) + powr<2>(q)),
                           2. - 3. * powr<2>(p1) *
                                    powr<-1>(cosp1p2 * p1 * p2 + cosp1q * p1 * q + 2. * cosp2q * p2 * q + powr<2>(p1) +
                                             powr<2>(p2) + powr<2>(q)))) -
           1.5 * DiFfRGREPL14 *
               ((-50. * DiFfRGREPL18 + 50. * DiFfRGREPL19 + DiFfRGREPL2) * DiFfRGREPL4 + DiFfRGREPL18 * DiFfRGREPL8) *
               ((-1. * cosp1p2 * cosp1q + cosp2q) * q + p2 * (-1. + powr<2>(cosp1p2))) *
               (cosp1p2 * p1 - 1. * cosp1q * cosp2q * p1 + p2 - 1. * p2 * powr<2>(cosp2q)) *
               powr<-1>(-1. + powr<2>(cosp1p2)) * powr<-1>(DiFfRGREPL10 * DiFfRGREPL3 + DiFfRGREPL11 * powr<2>(q)) *
               powr<-2>(DiFfRGREPL18 * DiFfRGREPL4 +
                        DiFfRGREPL20 * (-2. * cosp2q * p2 * q + powr<2>(p2) + powr<2>(q))) *
               powr<-1>(DiFfRGREPL18 *
                            RB(powr<2>(k), 2. * cosp1p2 * p1 * p2 - 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q)) +
                        (2. * cosp1p2 * p1 * p2 - 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q + powr<2>(p1) +
                         powr<2>(p2) + powr<2>(q)) *
                            Zc((sqrt(2. * cosp1p2 * p1 * p2 - 2. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                     powr<2>(p1) + powr<2>(p2) + powr<2>(q))))) *
               ZAcbc(0.816496580927726 * (sqrt(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                     0.5 * (sqrt((3. * powr<2>(p1) * powr<2>(p1 + 2. * cosp1p2 * p2 - 2. * cosp1q * q) +
                                  powr<2>(powr<2>(p1) - 2. * (cosp1p2 * p1 * p2 - 2. * cosp2q * p2 * q +
                                                              q * (-1. * cosp1q * p1 + q) + powr<2>(p2)))) *
                                 powr<-2>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                          powr<2>(p1) + powr<2>(p2) + powr<2>(q)))),
                     atan2(-1.7320508075688772 * p1 * (p1 + 2. * cosp1p2 * p2 - 2. * cosp1q * q) *
                               powr<-1>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q - 2. * cosp2q * p2 * q + powr<2>(p1) +
                                        powr<2>(p2) + powr<2>(q)),
                           2. - 3. * powr<2>(p1) *
                                    powr<-1>(cosp1p2 * p1 * p2 - 1. * cosp1q * p1 * q - 2. * cosp2q * p2 * q +
                                             powr<2>(p1) + powr<2>(p2) + powr<2>(q)))) *
               ZAcbc(0.816496580927726 * (sqrt(2. * cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q +
                                               powr<2>(p1) + powr<2>(p2) + powr<2>(q))),
                     0.5 * (sqrt(powr<-2>(2. * cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q + powr<2>(p1) +
                                          powr<2>(p2) + powr<2>(q)) *
                                 (3. * powr<2>(q) * powr<2>(-2. * cosp1q * p1 - 2. * cosp2q * p2 + q) +
                                  powr<2>(2. * (cosp1q * p1 + cosp2q * p2) * q -
                                          2. * (2. * cosp1p2 * p1 * p2 + powr<2>(p1) + powr<2>(p2)) + powr<2>(q))))),
                     atan2(1.7320508075688772 * q * (-2. * cosp1q * p1 - 2. * cosp2q * p2 + q) *
                               powr<-1>(2. * cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q + powr<2>(p1) +
                                        powr<2>(p2) + powr<2>(q)),
                           -1. + 3. *
                                     (2. * cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q + powr<2>(p1) +
                                      powr<2>(p2)) *
                                     powr<-1>(2. * cosp1p2 * p1 * p2 - 1. * (cosp1q * p1 + cosp2q * p2) * q +
                                              powr<2>(p1) + powr<2>(p2) + powr<2>(q))));
  }

  template <typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8,
            typename T9, typename T10, typename T11, typename T12>
  static __forceinline__ __host__ __device__ auto
  constant(const double k, const T1 S0, const T2 S1, const T3 SPhi, const T4 &ZA3, const T5 &ZAcbc, const T6 &ZA4SP,
           const T7 &ZA4tadpole, const T8 &dtZc, const T9 &Zc, const T10 &dtZA, const T11 &ZA, const T12 m2A)
  {
    // flow
    return 0.;
  }

private:
  static __forceinline__ __device__ __host__ auto RB(const auto k2, const auto p2) { return REG::RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto RF(const auto k2, const auto p2) { return REG::RF(k2, p2); }

  static __forceinline__ __device__ __host__ auto RBdot(const auto k2, const auto p2) { return REG::RBdot(k2, p2); }
  static __forceinline__ __device__ __host__ auto RFdot(const auto k2, const auto p2) { return REG::RFdot(k2, p2); }

  static __forceinline__ __device__ __host__ auto dq2RB(const auto k2, const auto p2) { return REG::dq2RB(k2, p2); }
  static __forceinline__ __device__ __host__ auto dq2RF(const auto k2, const auto p2) { return REG::dq2RF(k2, p2); }
};